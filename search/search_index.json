{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deep Search Toolkit \u00b6 Interact with the Deep Search platform for new knowledge explorations and discoveries The Deep Search Toolkit is a Python SDK allowing a user to interact with the Deep Search platform. The Toolkit provides easy-to-use functionalities for several common processes such as document conversion, graph creation and querying. Learn about IBM Deep Search Quick Links \u00b6 Deep Search Github Getting started User guide Install the Deep Search Toolkit \u00b6 The Deep Search Toolkit is available as a PyPI package . It can be installed using the standard Python package managers like pip , poetry , etc. Requirements \u00b6 Python 3.8+ Install using pip \u00b6 $ pip install deepsearch-toolkit ---> 100% Start using the toolkit \u00b6 // Login to Deep Search, see <a href=\"https://ds4sd.github.io/deepsearch-toolkit/getting_started/#authentication\">authentication</a>. $ deepsearch login ... // Convert a document // for more details, see <a href=\"https://ds4sd.github.io/deepsearch-toolkit/guide/convert_doc/\">document conversion</a>. $ deepsearch documents convert -p 1234567890abcdefghijklmnopqrstvwyz123456 -u https://arxiv.org/pdf/2206.00785.pdf Submitting input: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.52s/it] Converting input: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:33<00:00, 33.80s/it] Downloading result: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.11s/it] Total online documents 1 Successfully converted documents 1","title":"Home"},{"location":"#deep-search-toolkit","text":"Interact with the Deep Search platform for new knowledge explorations and discoveries The Deep Search Toolkit is a Python SDK allowing a user to interact with the Deep Search platform. The Toolkit provides easy-to-use functionalities for several common processes such as document conversion, graph creation and querying. Learn about IBM Deep Search","title":"Deep Search Toolkit"},{"location":"#quick-links","text":"Deep Search Github Getting started User guide","title":"Quick Links"},{"location":"#install-the-deep-search-toolkit","text":"The Deep Search Toolkit is available as a PyPI package . It can be installed using the standard Python package managers like pip , poetry , etc.","title":"Install the Deep Search Toolkit"},{"location":"#requirements","text":"Python 3.8+","title":"Requirements"},{"location":"#install-using-pip","text":"$ pip install deepsearch-toolkit ---> 100%","title":"Install using pip"},{"location":"#start-using-the-toolkit","text":"// Login to Deep Search, see <a href=\"https://ds4sd.github.io/deepsearch-toolkit/getting_started/#authentication\">authentication</a>. $ deepsearch login ... // Convert a document // for more details, see <a href=\"https://ds4sd.github.io/deepsearch-toolkit/guide/convert_doc/\">document conversion</a>. $ deepsearch documents convert -p 1234567890abcdefghijklmnopqrstvwyz123456 -u https://arxiv.org/pdf/2206.00785.pdf Submitting input: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.52s/it] Converting input: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:33<00:00, 33.80s/it] Downloading result: : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01<00:00, 1.11s/it] Total online documents 1 Successfully converted documents 1","title":"Start using the toolkit"},{"location":"api-reference/","text":"API Reference \u00b6 DeepSearch Toolkit core \u00b6 util \u00b6 config_paths \u00b6 CONFIG_FILE_NAME : str = 'deepsearch_toolkit.json' module-attribute \u00b6 ENV_VAR_NAME = 'DEEPSEARCH_TOOLKIT_CONFIG_FILE' module-attribute \u00b6 config_dir () \u00b6 Get the path to the configuration directory config_file_path () \u00b6 Get the actual path to the configuration file. This takes into account the following paths (from most to least relevant): The file pointed to by $DEEPSEARCH_TOOLKIT_CONFIG_FILE The file $PWD/deepsearch_toolkit.json , if it exists The result of default_config_file_path() , which is os-dependent default_config_file_path () \u00b6 Get the path to the configuration file cps \u00b6 __all__ = [ 'CpsApi' , 'CpsApiClient' ] module-attribute \u00b6 CpsApi \u00b6 data_catalogs = CpsApiDataCatalogs ( self ) instance-attribute \u00b6 data_indices = CpsApiDataIndices ( self ) instance-attribute \u00b6 elastic = CpsApiElastic ( self ) instance-attribute \u00b6 knowledge_graphs = CpsApiKnowledgeGraphs ( self ) instance-attribute \u00b6 projects = CpsApiProjects ( self ) instance-attribute \u00b6 queries = CpsApiQueries ( self ) instance-attribute \u00b6 tasks = CpsApiTasks ( self ) instance-attribute \u00b6 __init__ ( client ) \u00b6 default_from_env () classmethod \u00b6 Connect to CPS's API using a configured environment file CpsApiClient \u00b6 config = config instance-attribute \u00b6 session = requests . Session () instance-attribute \u00b6 __init__ ( config ) \u00b6 data_indices \u00b6 utils \u00b6 logger = logging . getLogger ( __name__ ) module-attribute \u00b6 process_local_file ( api , coords , local_file , progress_bar = False ) \u00b6 Individual files are uploaded for conversion and storage in data index. process_url_input ( api , coords , urls , progress_bar = False ) \u00b6 Individual urls are uploaded for conversion and storage in data index. upload_files ( coords , url = None , local_file = None , api = None ) \u00b6 Orchestrate document conversion and upload to an index in a project ipython \u00b6 CPS_IPYTHON_NOTEBOOK_URL = '' module-attribute \u00b6 get_notebook_args () \u00b6 init () \u00b6 kg_helpers \u00b6 display_kg_topology ( config , width = 960 , height = 600 ) \u00b6 Visualize the KG topology :param config: Knowledge Graph API Configuration :type config: Configuration :param width: IFrame width :type width: int :param height: IFrame height :type height: int display_workflow ( wf , config , width = 800 , height = 400 ) \u00b6 Visualize the workflow DAG :param config: Knowledge Graph API Configuration :type config: Configuration :param width: IFrame width :type width: int :param height: IFrame height :type height: int kg_widgets \u00b6 KGSelector \u00b6 api = api instance-attribute \u00b6 __init__ ( api ) \u00b6 check_knowledge_graph_status ( proj_key , bag_key ) \u00b6 interactive () \u00b6 Select the KG using the interacting widget components on_proj_change ( change ) \u00b6 kg \u00b6 workflow \u00b6 MultiLinkedList \u00b6 MultiLinkedList \u00b6 head = node instance-attribute \u00b6 tail = node instance-attribute \u00b6 __eq__ ( other ) \u00b6 __init__ ( node = None ) \u00b6 __ne__ ( other ) \u00b6 append ( value ) \u00b6 append_child ( child = None ) \u00b6 flatten_list () \u00b6 print_list () \u00b6 Node \u00b6 child = None instance-attribute \u00b6 data = data instance-attribute \u00b6 id = id or str ( uuid4 ()) instance-attribute \u00b6 next = None instance-attribute \u00b6 prev = None instance-attribute \u00b6 __init__ ( data , id = None ) \u00b6 wf_functions \u00b6 run ( wf , config ) \u00b6 Run the workflow against the given KG :param workflow: Workflow object :type workflow: Workflow :param config: Knowledge Graph API Configuration :type config: Configuration :returns workflow results validate ( wf , config ) \u00b6 Validate the workflow DAG :param workflow: Workflow object :type workflow: Workflow :param config: Knowledge Graph API Configuration :type config: Configuration workflow \u00b6 Workflow \u00b6 __add__ ( workflow ) \u00b6 __and__ ( workflow ) \u00b6 __init__ ( starting_node = None ) \u00b6 __mul__ ( workflow ) \u00b6 __or__ ( workflow ) \u00b6 as_output ( limit = None ) \u00b6 Set node type as output :param limit: Response limit :type limit: int combine ( * workflows ) \u00b6 Combine result :param *workflows : Nodes to combine :type *workflows : List['Workflow'] edge_traversal ( edges = [], include = []) \u00b6 Traverse edges :param edges: The edges to traverse :type edges: List[str] :param include: Include nodes in operation :type include: List['Workflow'] filter ( filter_type = 'cut-off' , field_operation = '==' , field_value = '' , include = []) \u00b6 Filter values :param filter_type: Filter type. Possible values \"cut-off\", \"field-value\" :type filter_type: str :param field_operation: The field operation to use if filter type is \"field-value\". Possible values \"<\", \"==\", \">\" :type field_operation: str :param field_value: The field value to filter by :type field_value: str :param include: Include nodes in operation :type include: List['Workflow'] filter_categories ( * categories , include = []) \u00b6 Filter node type by category :param categories: the categories to filter :type categories: List[str] :param include: Include nodes in operation :type include: List['Workflow'] get_operations () \u00b6 Return workflow operations intersect ( * workflows ) \u00b6 Intersect result :param *workflows : Nodes to intersect :type *workflows : List['Workflow'] matrix_function ( matrix_function = 'abs' , include = []) \u00b6 Run result through matrix function :param matrix_function: Scalar function to use. Possible values \"e^A\", \"cosh\", \"sinh\" :type matrix_function: str :param include: Include nodes in operation :type include: List['Workflow'] multiply ( * workflows ) \u00b6 Multiply result :param *workflows : Nodes to multiply :type *workflows : List['Workflow'] negate ( * workflows ) \u00b6 Negate result :param *workflows : Nodes to negate :type *workflows : List['Workflow'] normalize ( normalize_type = 'RENORMALIZE_L2' , include = []) \u00b6 Normalize result :param normalize_type: Normalize type to use. Possible values \"RENORMALIZE_L1\", \"RENORMALIZE_L2\", \"RENORMALIZE_LINF\" :type normalize_type: str :param include: Include nodes in operation :type include: List['Workflow'] pearson_traversal ( edges = [], include = []) \u00b6 Traverse edges using pearson traversal :param edges: The edges to traverse :type edges: List[str] :param include: Include nodes in operation :type include: List['Workflow'] scalar_function ( scalar_function = 'abs' , include = []) \u00b6 Run result through scalar function :param scalar_function: Scalar function to use. Possible values \"uniform\", \"abs\", \"inv\", \"sigmoid\", \"softmax\" :type scalar_function: str :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_approximation ( * args , tolerance = 0.8 , include = []) \u00b6 Search nodes where the arguments are approximate :param *args : the search arguments :type *args : List[str] :param tolerance: the tolerance :type tolerance: float :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_db_id_pair ( * args , include = []) \u00b6 Search nodes that contain the db\\id pair :param *args : the db\\id pairs in format {\"_db\": \"db value\", \"_id\": \"id value\"} :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_index ( indices = [], weights = [], include = []) \u00b6 Search nodes by index :param indices: the indices to search :type indices: str :param weights: the weight to search :type weights: float :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_regex ( * args , include = []) \u00b6 Search nodes by regex that match args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_containing ( * args , include = []) \u00b6 Search nodes that contain the args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_equal ( * args , include = []) \u00b6 Search nodes that equal the args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_in_category ( * categories , include = []) \u00b6 Search nodes in categories :param categories: the categories to search :type categories: List[str] :param include: Include nodes in operation :type include: List['Workflow'] set_to_field_value ( field_name = '' , include = []) \u00b6 Set node to field value :param field_name: The field name :type field_name: str :param include: Include nodes in operation :type include: List['Workflow'] split ( times = 1 ) \u00b6 Add children to node :param times: Number of children to add :type times: int :returns node childs sum ( * workflows ) \u00b6 Sum result :param *workflows : Nodes to sum :type *workflows : List['Workflow'] to_json ( indent = 2 ) \u00b6 Return workflow as json string :param indent: result indentation :type indent: int queries \u00b6 DataQuery ( search_query , * , source = None , aggregations = None , sort = None , limit = 20 , search_after = None , coordinates ) \u00b6 Fts ( search_query , collection_name , kg ) \u00b6 Wf ( wf_query , kg ) \u00b6 documents \u00b6 core \u00b6 common_routines \u00b6 ERROR_MSG = f ' { dashes } \\n Suggestion: \\n (1) Check your input. \\n (2) Contact Deep Search developers if problem persists. \\n { dashes } ' module-attribute \u00b6 WELCOME = f ' { dashes } \\n {} Welcome to the Deep Search Toolkit \\n { dashes } ' module-attribute \u00b6 dashes = f ' { - * 86 } ' module-attribute \u00b6 progressbar = ProgressBarParameters () module-attribute \u00b6 progressbar_length = 30 module-attribute \u00b6 success_message = 'Whoa... it is done. Until next time, Ciao!' module-attribute \u00b6 ProgressBarParameters dataclass \u00b6 bar_format = ' {l_bar} {bar: %d } {r_bar}{bar:-10b} ' % progressbar_length class-attribute \u00b6 colour = '#0f62fe' class-attribute \u00b6 padding = 22 class-attribute \u00b6 convert \u00b6 logger = logging . getLogger ( __name__ ) module-attribute \u00b6 check_single_task_status ( api , ccs_proj_key , task_id ) \u00b6 Check status of individual tasks. check_status_running_tasks ( cps_proj_key , task_ids , api = None , progress_bar = False ) \u00b6 Check status of multiple running tasks and optionally display progress with progress bar. download_converted_documents ( result_dir , download_urls , progress_bar = False ) \u00b6 Download converted documents. Input \u00b6 path directory for saving converted json doc list url of converted json boolean (default False) shows progress bar if True get_ccs_project_key ( api , cps_proj_key ) \u00b6 Given a cps project key, returns ccs project key and collection name. get_download_url ( cps_proj_key , task_ids , api = None ) \u00b6 Get the urls of converted documents. make_payload ( url_document , collection_name = '_default' ) \u00b6 Create payload for requesting conversion send_files_for_conversion ( api , cps_proj_key , source_path , root_dir , progress_bar = False ) \u00b6 Send multiple files for conversion. send_urls_for_conversion ( api , cps_proj_key , urls , progress_bar = False ) \u00b6 Send multiple online documents for conversion. submit_url_for_conversion ( api , cps_proj_key , url ) \u00b6 Convert an online pdf using DeepSearch Technology. upload_single_file ( api , cps_proj_key , source_path ) \u00b6 Uploads a single file. Return internal download url. create_report \u00b6 report_docs ( result_dir , statuses , task_ids , source_path ) \u00b6 Function to create report when DeepSearch is converting local documents. report_urls ( result_dir , urls , statuses , task_ids ) \u00b6 Function to create report when DeepSearch is converting urls. input_process \u00b6 process_local_input ( api , cps_proj_key , source_path , progress_bar = False ) \u00b6 Classify the user provided local input and take appropriate action. process_urls_input ( api , cps_proj_key , urls , progress_bar = False ) \u00b6 Classify user provided url(s) and take appropriate action. main \u00b6 convert_documents ( proj_key , api , urls = None , source_path = None , progress_bar = False ) \u00b6 Document conversion via Deep Search Technology. Function to orchestrate document conversion. Inputs \u00b6 proj_key : string [REQUIRED] Your DeepSearch CPS Project Key. Contact DeepSearch Developers to request one. url : string [OPTIONAL] For converting documents from the web, please provide a single url or list of urls. source_file : path [OPTIONAL] For converting local files, please provide absolute path to file or to directory containing multiple files. progress_bar : Boolean (default is False in code, True in CLI) Show progress bar for processing, submitting, converting input and downloading converted document. NOTE: Either url or source_path should be supplied. utils \u00b6 URLNavigator \u00b6 api = api instance-attribute \u00b6 url_host = self . api . client . swagger_client . configuration . host instance-attribute \u00b6 url_linked_ccs = urllib . parse . urljoin ( self . url_host , '/api/linked-ccs' ) instance-attribute \u00b6 url_user_management = '/user/v1' instance-attribute \u00b6 __init__ ( api ) \u00b6 url_convert ( ccs_proj_key ) \u00b6 url_request_status ( ccs_proj_key , task_id ) \u00b6 url_result ( ccs_proj_key , task_id ) \u00b6 batch_single_files ( source_path , root_dir , progress_bar = False ) \u00b6 Batch individual pdfs into zip files. cleanup ( root_dir ) \u00b6 Clean temporarily created zip batches. create_root_dir () \u00b6 Creates root directory labelled with timestamp download_url ( url , save_path , chunk_size = 128 ) \u00b6 Download contents from a url. get_urls ( url_path ) \u00b6 Returns list of url from input file. plugins \u00b6 query \u00b6","title":"Toolkit reference"},{"location":"api-reference/#api-reference","text":"DeepSearch Toolkit","title":"API Reference"},{"location":"api-reference/#deepsearch.core","text":"","title":"core"},{"location":"api-reference/#deepsearch.core.util","text":"","title":"util"},{"location":"api-reference/#deepsearch.core.util.config_paths","text":"","title":"config_paths"},{"location":"api-reference/#deepsearch.core.util.config_paths.CONFIG_FILE_NAME","text":"","title":"CONFIG_FILE_NAME"},{"location":"api-reference/#deepsearch.core.util.config_paths.ENV_VAR_NAME","text":"","title":"ENV_VAR_NAME"},{"location":"api-reference/#deepsearch.core.util.config_paths.config_dir","text":"Get the path to the configuration directory","title":"config_dir()"},{"location":"api-reference/#deepsearch.core.util.config_paths.config_file_path","text":"Get the actual path to the configuration file. This takes into account the following paths (from most to least relevant): The file pointed to by $DEEPSEARCH_TOOLKIT_CONFIG_FILE The file $PWD/deepsearch_toolkit.json , if it exists The result of default_config_file_path() , which is os-dependent","title":"config_file_path()"},{"location":"api-reference/#deepsearch.core.util.config_paths.default_config_file_path","text":"Get the path to the configuration file","title":"default_config_file_path()"},{"location":"api-reference/#deepsearch.cps","text":"","title":"cps"},{"location":"api-reference/#deepsearch.cps.__all__","text":"","title":"__all__"},{"location":"api-reference/#deepsearch.cps.CpsApi","text":"","title":"CpsApi"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.data_catalogs","text":"","title":"data_catalogs"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.data_indices","text":"","title":"data_indices"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.elastic","text":"","title":"elastic"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.knowledge_graphs","text":"","title":"knowledge_graphs"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.projects","text":"","title":"projects"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.queries","text":"","title":"queries"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.tasks","text":"","title":"tasks"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.__init__","text":"","title":"__init__()"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApi.default_from_env","text":"Connect to CPS's API using a configured environment file","title":"default_from_env()"},{"location":"api-reference/#deepsearch.cps.CpsApiClient","text":"","title":"CpsApiClient"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApiClient.config","text":"","title":"config"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApiClient.session","text":"","title":"session"},{"location":"api-reference/#deepsearch.cps.client.api.CpsApiClient.__init__","text":"","title":"__init__()"},{"location":"api-reference/#deepsearch.cps.data_indices","text":"","title":"data_indices"},{"location":"api-reference/#deepsearch.cps.data_indices.utils","text":"","title":"utils"},{"location":"api-reference/#deepsearch.cps.data_indices.utils.logger","text":"","title":"logger"},{"location":"api-reference/#deepsearch.cps.data_indices.utils.process_local_file","text":"Individual files are uploaded for conversion and storage in data index.","title":"process_local_file()"},{"location":"api-reference/#deepsearch.cps.data_indices.utils.process_url_input","text":"Individual urls are uploaded for conversion and storage in data index.","title":"process_url_input()"},{"location":"api-reference/#deepsearch.cps.data_indices.utils.upload_files","text":"Orchestrate document conversion and upload to an index in a project","title":"upload_files()"},{"location":"api-reference/#deepsearch.cps.ipython","text":"","title":"ipython"},{"location":"api-reference/#deepsearch.cps.ipython.CPS_IPYTHON_NOTEBOOK_URL","text":"","title":"CPS_IPYTHON_NOTEBOOK_URL"},{"location":"api-reference/#deepsearch.cps.ipython.get_notebook_args","text":"","title":"get_notebook_args()"},{"location":"api-reference/#deepsearch.cps.ipython.init","text":"","title":"init()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_helpers","text":"","title":"kg_helpers"},{"location":"api-reference/#deepsearch.cps.ipython.kg_helpers.display_kg_topology","text":"Visualize the KG topology :param config: Knowledge Graph API Configuration :type config: Configuration :param width: IFrame width :type width: int :param height: IFrame height :type height: int","title":"display_kg_topology()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_helpers.display_workflow","text":"Visualize the workflow DAG :param config: Knowledge Graph API Configuration :type config: Configuration :param width: IFrame width :type width: int :param height: IFrame height :type height: int","title":"display_workflow()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets","text":"","title":"kg_widgets"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector","text":"","title":"KGSelector"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector.api","text":"","title":"api"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector.__init__","text":"","title":"__init__()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector.check_knowledge_graph_status","text":"","title":"check_knowledge_graph_status()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector.interactive","text":"Select the KG using the interacting widget components","title":"interactive()"},{"location":"api-reference/#deepsearch.cps.ipython.kg_widgets.KGSelector.on_proj_change","text":"","title":"on_proj_change()"},{"location":"api-reference/#deepsearch.cps.kg","text":"","title":"kg"},{"location":"api-reference/#deepsearch.cps.kg.workflow","text":"","title":"workflow"},{"location":"api-reference/#deepsearch.cps.kg.workflow.MultiLinkedList","text":"","title":"MultiLinkedList"},{"location":"api-reference/#deepsearch.cps.kg.workflow.MultiLinkedList.MultiLinkedList","text":"head = node instance-attribute \u00b6 tail = node instance-attribute \u00b6 __eq__ ( other ) \u00b6 __init__ ( node = None ) \u00b6 __ne__ ( other ) \u00b6 append ( value ) \u00b6 append_child ( child = None ) \u00b6 flatten_list () \u00b6 print_list () \u00b6","title":"MultiLinkedList"},{"location":"api-reference/#deepsearch.cps.kg.workflow.MultiLinkedList.Node","text":"child = None instance-attribute \u00b6 data = data instance-attribute \u00b6 id = id or str ( uuid4 ()) instance-attribute \u00b6 next = None instance-attribute \u00b6 prev = None instance-attribute \u00b6 __init__ ( data , id = None ) \u00b6","title":"Node"},{"location":"api-reference/#deepsearch.cps.kg.workflow.wf_functions","text":"","title":"wf_functions"},{"location":"api-reference/#deepsearch.cps.kg.workflow.wf_functions.run","text":"Run the workflow against the given KG :param workflow: Workflow object :type workflow: Workflow :param config: Knowledge Graph API Configuration :type config: Configuration :returns workflow results","title":"run()"},{"location":"api-reference/#deepsearch.cps.kg.workflow.wf_functions.validate","text":"Validate the workflow DAG :param workflow: Workflow object :type workflow: Workflow :param config: Knowledge Graph API Configuration :type config: Configuration","title":"validate()"},{"location":"api-reference/#deepsearch.cps.kg.workflow.workflow","text":"","title":"workflow"},{"location":"api-reference/#deepsearch.cps.kg.workflow.workflow.Workflow","text":"__add__ ( workflow ) \u00b6 __and__ ( workflow ) \u00b6 __init__ ( starting_node = None ) \u00b6 __mul__ ( workflow ) \u00b6 __or__ ( workflow ) \u00b6 as_output ( limit = None ) \u00b6 Set node type as output :param limit: Response limit :type limit: int combine ( * workflows ) \u00b6 Combine result :param *workflows : Nodes to combine :type *workflows : List['Workflow'] edge_traversal ( edges = [], include = []) \u00b6 Traverse edges :param edges: The edges to traverse :type edges: List[str] :param include: Include nodes in operation :type include: List['Workflow'] filter ( filter_type = 'cut-off' , field_operation = '==' , field_value = '' , include = []) \u00b6 Filter values :param filter_type: Filter type. Possible values \"cut-off\", \"field-value\" :type filter_type: str :param field_operation: The field operation to use if filter type is \"field-value\". Possible values \"<\", \"==\", \">\" :type field_operation: str :param field_value: The field value to filter by :type field_value: str :param include: Include nodes in operation :type include: List['Workflow'] filter_categories ( * categories , include = []) \u00b6 Filter node type by category :param categories: the categories to filter :type categories: List[str] :param include: Include nodes in operation :type include: List['Workflow'] get_operations () \u00b6 Return workflow operations intersect ( * workflows ) \u00b6 Intersect result :param *workflows : Nodes to intersect :type *workflows : List['Workflow'] matrix_function ( matrix_function = 'abs' , include = []) \u00b6 Run result through matrix function :param matrix_function: Scalar function to use. Possible values \"e^A\", \"cosh\", \"sinh\" :type matrix_function: str :param include: Include nodes in operation :type include: List['Workflow'] multiply ( * workflows ) \u00b6 Multiply result :param *workflows : Nodes to multiply :type *workflows : List['Workflow'] negate ( * workflows ) \u00b6 Negate result :param *workflows : Nodes to negate :type *workflows : List['Workflow'] normalize ( normalize_type = 'RENORMALIZE_L2' , include = []) \u00b6 Normalize result :param normalize_type: Normalize type to use. Possible values \"RENORMALIZE_L1\", \"RENORMALIZE_L2\", \"RENORMALIZE_LINF\" :type normalize_type: str :param include: Include nodes in operation :type include: List['Workflow'] pearson_traversal ( edges = [], include = []) \u00b6 Traverse edges using pearson traversal :param edges: The edges to traverse :type edges: List[str] :param include: Include nodes in operation :type include: List['Workflow'] scalar_function ( scalar_function = 'abs' , include = []) \u00b6 Run result through scalar function :param scalar_function: Scalar function to use. Possible values \"uniform\", \"abs\", \"inv\", \"sigmoid\", \"softmax\" :type scalar_function: str :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_approximation ( * args , tolerance = 0.8 , include = []) \u00b6 Search nodes where the arguments are approximate :param *args : the search arguments :type *args : List[str] :param tolerance: the tolerance :type tolerance: float :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_db_id_pair ( * args , include = []) \u00b6 Search nodes that contain the db\\id pair :param *args : the db\\id pairs in format {\"_db\": \"db value\", \"_id\": \"id value\"} :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_index ( indices = [], weights = [], include = []) \u00b6 Search nodes by index :param indices: the indices to search :type indices: str :param weights: the weight to search :type weights: float :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_by_regex ( * args , include = []) \u00b6 Search nodes by regex that match args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_containing ( * args , include = []) \u00b6 Search nodes that contain the args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_equal ( * args , include = []) \u00b6 Search nodes that equal the args :param *args : the search arguments :type *args : List[str] :param include: Include nodes in operation :type include: List['Workflow'] search_nodes_in_category ( * categories , include = []) \u00b6 Search nodes in categories :param categories: the categories to search :type categories: List[str] :param include: Include nodes in operation :type include: List['Workflow'] set_to_field_value ( field_name = '' , include = []) \u00b6 Set node to field value :param field_name: The field name :type field_name: str :param include: Include nodes in operation :type include: List['Workflow'] split ( times = 1 ) \u00b6 Add children to node :param times: Number of children to add :type times: int :returns node childs sum ( * workflows ) \u00b6 Sum result :param *workflows : Nodes to sum :type *workflows : List['Workflow'] to_json ( indent = 2 ) \u00b6 Return workflow as json string :param indent: result indentation :type indent: int","title":"Workflow"},{"location":"api-reference/#deepsearch.cps.queries","text":"","title":"queries"},{"location":"api-reference/#deepsearch.cps.queries.DataQuery","text":"","title":"DataQuery()"},{"location":"api-reference/#deepsearch.cps.queries.Fts","text":"","title":"Fts()"},{"location":"api-reference/#deepsearch.cps.queries.Wf","text":"","title":"Wf()"},{"location":"api-reference/#deepsearch.documents","text":"","title":"documents"},{"location":"api-reference/#deepsearch.documents.core","text":"","title":"core"},{"location":"api-reference/#deepsearch.documents.core.common_routines","text":"","title":"common_routines"},{"location":"api-reference/#deepsearch.documents.core.common_routines.ERROR_MSG","text":"","title":"ERROR_MSG"},{"location":"api-reference/#deepsearch.documents.core.common_routines.WELCOME","text":"","title":"WELCOME"},{"location":"api-reference/#deepsearch.documents.core.common_routines.dashes","text":"","title":"dashes"},{"location":"api-reference/#deepsearch.documents.core.common_routines.progressbar","text":"","title":"progressbar"},{"location":"api-reference/#deepsearch.documents.core.common_routines.progressbar_length","text":"","title":"progressbar_length"},{"location":"api-reference/#deepsearch.documents.core.common_routines.success_message","text":"","title":"success_message"},{"location":"api-reference/#deepsearch.documents.core.common_routines.ProgressBarParameters","text":"","title":"ProgressBarParameters"},{"location":"api-reference/#deepsearch.documents.core.common_routines.ProgressBarParameters.bar_format","text":"","title":"bar_format"},{"location":"api-reference/#deepsearch.documents.core.common_routines.ProgressBarParameters.colour","text":"","title":"colour"},{"location":"api-reference/#deepsearch.documents.core.common_routines.ProgressBarParameters.padding","text":"","title":"padding"},{"location":"api-reference/#deepsearch.documents.core.convert","text":"","title":"convert"},{"location":"api-reference/#deepsearch.documents.core.convert.logger","text":"","title":"logger"},{"location":"api-reference/#deepsearch.documents.core.convert.check_single_task_status","text":"Check status of individual tasks.","title":"check_single_task_status()"},{"location":"api-reference/#deepsearch.documents.core.convert.check_status_running_tasks","text":"Check status of multiple running tasks and optionally display progress with progress bar.","title":"check_status_running_tasks()"},{"location":"api-reference/#deepsearch.documents.core.convert.download_converted_documents","text":"Download converted documents.","title":"download_converted_documents()"},{"location":"api-reference/#deepsearch.documents.core.convert.download_converted_documents--input","text":"path directory for saving converted json doc list url of converted json boolean (default False) shows progress bar if True","title":"Input"},{"location":"api-reference/#deepsearch.documents.core.convert.get_ccs_project_key","text":"Given a cps project key, returns ccs project key and collection name.","title":"get_ccs_project_key()"},{"location":"api-reference/#deepsearch.documents.core.convert.get_download_url","text":"Get the urls of converted documents.","title":"get_download_url()"},{"location":"api-reference/#deepsearch.documents.core.convert.make_payload","text":"Create payload for requesting conversion","title":"make_payload()"},{"location":"api-reference/#deepsearch.documents.core.convert.send_files_for_conversion","text":"Send multiple files for conversion.","title":"send_files_for_conversion()"},{"location":"api-reference/#deepsearch.documents.core.convert.send_urls_for_conversion","text":"Send multiple online documents for conversion.","title":"send_urls_for_conversion()"},{"location":"api-reference/#deepsearch.documents.core.convert.submit_url_for_conversion","text":"Convert an online pdf using DeepSearch Technology.","title":"submit_url_for_conversion()"},{"location":"api-reference/#deepsearch.documents.core.convert.upload_single_file","text":"Uploads a single file. Return internal download url.","title":"upload_single_file()"},{"location":"api-reference/#deepsearch.documents.core.create_report","text":"","title":"create_report"},{"location":"api-reference/#deepsearch.documents.core.create_report.report_docs","text":"Function to create report when DeepSearch is converting local documents.","title":"report_docs()"},{"location":"api-reference/#deepsearch.documents.core.create_report.report_urls","text":"Function to create report when DeepSearch is converting urls.","title":"report_urls()"},{"location":"api-reference/#deepsearch.documents.core.input_process","text":"","title":"input_process"},{"location":"api-reference/#deepsearch.documents.core.input_process.process_local_input","text":"Classify the user provided local input and take appropriate action.","title":"process_local_input()"},{"location":"api-reference/#deepsearch.documents.core.input_process.process_urls_input","text":"Classify user provided url(s) and take appropriate action.","title":"process_urls_input()"},{"location":"api-reference/#deepsearch.documents.core.main","text":"","title":"main"},{"location":"api-reference/#deepsearch.documents.core.main.convert_documents","text":"Document conversion via Deep Search Technology. Function to orchestrate document conversion.","title":"convert_documents()"},{"location":"api-reference/#deepsearch.documents.core.main.convert_documents--inputs","text":"proj_key : string [REQUIRED] Your DeepSearch CPS Project Key. Contact DeepSearch Developers to request one. url : string [OPTIONAL] For converting documents from the web, please provide a single url or list of urls. source_file : path [OPTIONAL] For converting local files, please provide absolute path to file or to directory containing multiple files. progress_bar : Boolean (default is False in code, True in CLI) Show progress bar for processing, submitting, converting input and downloading converted document. NOTE: Either url or source_path should be supplied.","title":"Inputs"},{"location":"api-reference/#deepsearch.documents.core.utils","text":"","title":"utils"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator","text":"","title":"URLNavigator"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.api","text":"","title":"api"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_host","text":"","title":"url_host"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_linked_ccs","text":"","title":"url_linked_ccs"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_user_management","text":"","title":"url_user_management"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.__init__","text":"","title":"__init__()"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_convert","text":"","title":"url_convert()"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_request_status","text":"","title":"url_request_status()"},{"location":"api-reference/#deepsearch.documents.core.utils.URLNavigator.url_result","text":"","title":"url_result()"},{"location":"api-reference/#deepsearch.documents.core.utils.batch_single_files","text":"Batch individual pdfs into zip files.","title":"batch_single_files()"},{"location":"api-reference/#deepsearch.documents.core.utils.cleanup","text":"Clean temporarily created zip batches.","title":"cleanup()"},{"location":"api-reference/#deepsearch.documents.core.utils.create_root_dir","text":"Creates root directory labelled with timestamp","title":"create_root_dir()"},{"location":"api-reference/#deepsearch.documents.core.utils.download_url","text":"Download contents from a url.","title":"download_url()"},{"location":"api-reference/#deepsearch.documents.core.utils.get_urls","text":"Returns list of url from input file.","title":"get_urls()"},{"location":"api-reference/#deepsearch.plugins","text":"","title":"plugins"},{"location":"api-reference/#deepsearch.query","text":"","title":"query"},{"location":"cli-reference/","text":"CLI Reference \u00b6 This page provides documentation for our command line tools. app \u00b6 Usage: [OPTIONS] COMMAND [ARGS]... config \u00b6 Manage CLI config files Usage: config [OPTIONS] COMMAND [ARGS]... config-file-path \u00b6 Get current configuration file path. This takes into account the environment variable 'DEEPSEARCH_TOOLKIT_CONFIG_FILE' and the presence of a file named 'deepsearch_toolkit.json' unless '--default' is passed Usage: config config-file-path [OPTIONS] Options: --default / --no-default [default: no-default] cps \u00b6 Interact with DeepSearch CPS component Usage: cps [OPTIONS] COMMAND [ARGS]... data-indices \u00b6 Manage CPS data indices Usage: cps data-indices [OPTIONS] COMMAND [ARGS]... create \u00b6 Create data index in project Usage: cps data-indices create [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -n, --name TEXT Name of data index [required] -d, -desc TEXT Describe your data index --type [Document|DB Record|Generic|Experiment] Type of Data Index [default: Document] delete \u00b6 Delete data index in a project Usage: cps data-indices delete [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -x, --index-key TEXT index_key of data index [required] list \u00b6 List data indices in project Usage: cps data-indices list [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table] upload \u00b6 Upload files/urls to index Usage: cps data-indices upload [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -u, --url TEXT Provide single url or absolute path to file containing multiple urls separated by empty lines. -i, --input-file PATH Provide absolute path to local file or directory containing pdf documents, zip files, or both. -x, --index-key TEXT index_key of data index [required] elastic-data \u00b6 Manage Elastic data collections Usage: cps elastic-data [OPTIONS] COMMAND [ARGS]... list \u00b6 List Elastic Data Collections Usage: cps elastic-data list [OPTIONS] Options: --domain TEXT [default: all] -o, --output [table|json] Output format [default: OutputEnum.table] kgs \u00b6 Manage CPS KGs Usage: cps kgs [OPTIONS] COMMAND [ARGS]... list \u00b6 List KGs Usage: cps kgs list [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table] list-flavours \u00b6 List KG flavours for a project Usage: cps kgs list-flavours [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table] save-snapshot \u00b6 Save a snapshot from an assembled Data Set Usage: cps kgs save-snapshot [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT Knowledge Graph [required] -w, --wait Wait for the operation to finish --flavour TEXT Name of the Flavour/Capacity of the snapshot. Use 'list-flavours' to get a list [required] --load-after-assembled [default: True] --snapshot-name TEXT projects \u00b6 Manage CPS projects Usage: cps projects [OPTIONS] COMMAND [ARGS]... list \u00b6 List projects Usage: cps projects list [OPTIONS] Options: -o, --output [table|json] Output format [default: OutputEnum.table] documents \u00b6 Interact with DeepSearch Document Conversion component Usage: documents [OPTIONS] COMMAND [ARGS]... convert \u00b6 Convert pdf documents using Deep Search Technology Usage: documents convert [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -u, --url TEXT Provide single url or absolute path to file containing multiple urls separated by empty lines. -i, --input-file PATH Provide absolute path to local file or directory containing pdf documents, zip files, or both. -pbar, --progress-bar TEXT Show progress bar (default is True) [default: True] login \u00b6 Login to DeepSearch platform Usage: login [OPTIONS] COMMAND [ARGS]... Options: --host TEXT [default: https://deepsearch- experience.res.ibm.com] --email TEXT [required] --api-key TEXT [required] --verify-ssl / --no-verify-ssl [default: verify-ssl] --output TEXT Where to save configuration to. Use '-' to print to stdout [default: /home/runner/.con fig/DeepSearch/deepsearch_toolkit.json] query \u00b6 Interact with DeepSearch Query component Usage: query [OPTIONS] COMMAND [ARGS]... data-query \u00b6 Launch a DeepSearch data query Usage: query data-query [OPTIONS] SEARCH_QUERY Options: SEARCH_QUERY [required] -s, --source TEXT -p, --proj-key TEXT Provide project key [required] -e, --instance TEXT -x, --index-key TEXT index_key of data index [required] -o, --output [table|json] Output format [default: OutputEnum.table] kg-fts \u00b6 Launch a KG Full Text Search Usage: query kg-fts [OPTIONS] SEARCH_QUERY Options: SEARCH_QUERY [required] -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT [required] -c, --collection TEXT [required] -o, --output [table|json] Output format [default: OutputEnum.table] query-flow \u00b6 Launch a raw flow query Usage: query query-flow [OPTIONS] Options: -i, --input-file PATH [required] -o, --output [table|json] Output format [default: OutputEnum.table] wf \u00b6 Launch a CPS KG Worflow query Usage: query wf [OPTIONS] Options: -i, --input-file PATH JSON Workflow file, as generated by the CPS KG UI [required] -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT [required] -o, --output [table|json] Output format [default: OutputEnum.table] version \u00b6 Print the client and server version Usage: version [OPTIONS]","title":"CLI reference"},{"location":"cli-reference/#cli-reference","text":"This page provides documentation for our command line tools.","title":"CLI Reference"},{"location":"cli-reference/#app","text":"Usage: [OPTIONS] COMMAND [ARGS]...","title":"app"},{"location":"cli-reference/#config","text":"Manage CLI config files Usage: config [OPTIONS] COMMAND [ARGS]...","title":"config"},{"location":"cli-reference/#config-file-path","text":"Get current configuration file path. This takes into account the environment variable 'DEEPSEARCH_TOOLKIT_CONFIG_FILE' and the presence of a file named 'deepsearch_toolkit.json' unless '--default' is passed Usage: config config-file-path [OPTIONS] Options: --default / --no-default [default: no-default]","title":"config-file-path"},{"location":"cli-reference/#cps","text":"Interact with DeepSearch CPS component Usage: cps [OPTIONS] COMMAND [ARGS]...","title":"cps"},{"location":"cli-reference/#data-indices","text":"Manage CPS data indices Usage: cps data-indices [OPTIONS] COMMAND [ARGS]...","title":"data-indices"},{"location":"cli-reference/#create","text":"Create data index in project Usage: cps data-indices create [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -n, --name TEXT Name of data index [required] -d, -desc TEXT Describe your data index --type [Document|DB Record|Generic|Experiment] Type of Data Index [default: Document]","title":"create"},{"location":"cli-reference/#delete","text":"Delete data index in a project Usage: cps data-indices delete [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -x, --index-key TEXT index_key of data index [required]","title":"delete"},{"location":"cli-reference/#list","text":"List data indices in project Usage: cps data-indices list [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"list"},{"location":"cli-reference/#upload","text":"Upload files/urls to index Usage: cps data-indices upload [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -u, --url TEXT Provide single url or absolute path to file containing multiple urls separated by empty lines. -i, --input-file PATH Provide absolute path to local file or directory containing pdf documents, zip files, or both. -x, --index-key TEXT index_key of data index [required]","title":"upload"},{"location":"cli-reference/#elastic-data","text":"Manage Elastic data collections Usage: cps elastic-data [OPTIONS] COMMAND [ARGS]...","title":"elastic-data"},{"location":"cli-reference/#list_1","text":"List Elastic Data Collections Usage: cps elastic-data list [OPTIONS] Options: --domain TEXT [default: all] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"list"},{"location":"cli-reference/#kgs","text":"Manage CPS KGs Usage: cps kgs [OPTIONS] COMMAND [ARGS]...","title":"kgs"},{"location":"cli-reference/#list_2","text":"List KGs Usage: cps kgs list [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"list"},{"location":"cli-reference/#list-flavours","text":"List KG flavours for a project Usage: cps kgs list-flavours [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"list-flavours"},{"location":"cli-reference/#save-snapshot","text":"Save a snapshot from an assembled Data Set Usage: cps kgs save-snapshot [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT Knowledge Graph [required] -w, --wait Wait for the operation to finish --flavour TEXT Name of the Flavour/Capacity of the snapshot. Use 'list-flavours' to get a list [required] --load-after-assembled [default: True] --snapshot-name TEXT","title":"save-snapshot"},{"location":"cli-reference/#projects","text":"Manage CPS projects Usage: cps projects [OPTIONS] COMMAND [ARGS]...","title":"projects"},{"location":"cli-reference/#list_3","text":"List projects Usage: cps projects list [OPTIONS] Options: -o, --output [table|json] Output format [default: OutputEnum.table]","title":"list"},{"location":"cli-reference/#documents","text":"Interact with DeepSearch Document Conversion component Usage: documents [OPTIONS] COMMAND [ARGS]...","title":"documents"},{"location":"cli-reference/#convert","text":"Convert pdf documents using Deep Search Technology Usage: documents convert [OPTIONS] Options: -p, --proj-key TEXT Provide project key [required] -u, --url TEXT Provide single url or absolute path to file containing multiple urls separated by empty lines. -i, --input-file PATH Provide absolute path to local file or directory containing pdf documents, zip files, or both. -pbar, --progress-bar TEXT Show progress bar (default is True) [default: True]","title":"convert"},{"location":"cli-reference/#login","text":"Login to DeepSearch platform Usage: login [OPTIONS] COMMAND [ARGS]... Options: --host TEXT [default: https://deepsearch- experience.res.ibm.com] --email TEXT [required] --api-key TEXT [required] --verify-ssl / --no-verify-ssl [default: verify-ssl] --output TEXT Where to save configuration to. Use '-' to print to stdout [default: /home/runner/.con fig/DeepSearch/deepsearch_toolkit.json]","title":"login"},{"location":"cli-reference/#query","text":"Interact with DeepSearch Query component Usage: query [OPTIONS] COMMAND [ARGS]...","title":"query"},{"location":"cli-reference/#data-query","text":"Launch a DeepSearch data query Usage: query data-query [OPTIONS] SEARCH_QUERY Options: SEARCH_QUERY [required] -s, --source TEXT -p, --proj-key TEXT Provide project key [required] -e, --instance TEXT -x, --index-key TEXT index_key of data index [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"data-query"},{"location":"cli-reference/#kg-fts","text":"Launch a KG Full Text Search Usage: query kg-fts [OPTIONS] SEARCH_QUERY Options: SEARCH_QUERY [required] -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT [required] -c, --collection TEXT [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"kg-fts"},{"location":"cli-reference/#query-flow","text":"Launch a raw flow query Usage: query query-flow [OPTIONS] Options: -i, --input-file PATH [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"query-flow"},{"location":"cli-reference/#wf","text":"Launch a CPS KG Worflow query Usage: query wf [OPTIONS] Options: -i, --input-file PATH JSON Workflow file, as generated by the CPS KG UI [required] -p, --proj-key TEXT Provide project key [required] -k, --kg-key TEXT [required] -o, --output [table|json] Output format [default: OutputEnum.table]","title":"wf"},{"location":"cli-reference/#version","text":"Print the client and server version Usage: version [OPTIONS]","title":"version"},{"location":"apis/","text":"WARNING: Generated Code \u00b6 This code was generated by a tool. Do not modify these files.","title":"WARNING: Generated Code"},{"location":"apis/#warning-generated-code","text":"This code was generated by a tool. Do not modify these files.","title":"WARNING: Generated Code"},{"location":"apis/public/AnnotateApi/","text":"deepsearch.cps.apis.public.AnnotateApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description generate_project_object_annotations POST /project/{proj_key}/object_annotations generate_project_object_annotations_async POST /project/{proj_key}/object_annotations_async get_cached_annotator_metadata POST /project/{proj_key}/annotator/metadata get_project_annotator_supported_annotations POST /project/{proj_key}/annotate/supported_annotations generate_project_object_annotations \u00b6 AnnotatedObject1 generate_project_object_annotations(proj_key, options) Run an annotator on an object, using resources from the project. DEPRECATED , please use generate_project_object_annotations_async instead. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . AnnotateObjectOptions () # AnnotateObjectOptions | try : api_response = api_instance . generate_project_object_annotations ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->generate_project_object_annotations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options AnnotateObjectOptions Return type \u00b6 AnnotatedObject1 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] generate_project_object_annotations_async \u00b6 Task generate_project_object_annotations_async(proj_key, options) Run an annotator on an object, using resources from the project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . AnnotateObjectOptions1 () # AnnotateObjectOptions1 | try : api_response = api_instance . generate_project_object_annotations_async ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->generate_project_object_annotations_async: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options AnnotateObjectOptions1 Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_cached_annotator_metadata \u00b6 AnnotatorMetadata get_cached_annotator_metadata(proj_key, options) Get annotator's metadata Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = None # object | try : api_response = api_instance . get_cached_annotator_metadata ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->get_cached_annotator_metadata: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options object Return type \u00b6 AnnotatorMetadata Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json, text/html HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_annotator_supported_annotations \u00b6 SupportedAnnotatorAnnotations get_project_annotator_supported_annotations(proj_key, options) Get supported annotations for an annotator Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = None # object | try : api_response = api_instance . get_project_annotator_supported_annotations ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->get_project_annotator_supported_annotations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options object Return type \u00b6 SupportedAnnotatorAnnotations Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json, text/html HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.AnnotateApi"},{"location":"apis/public/AnnotateApi/#deepsearchcpsapispublicannotateapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description generate_project_object_annotations POST /project/{proj_key}/object_annotations generate_project_object_annotations_async POST /project/{proj_key}/object_annotations_async get_cached_annotator_metadata POST /project/{proj_key}/annotator/metadata get_project_annotator_supported_annotations POST /project/{proj_key}/annotate/supported_annotations","title":"deepsearch.cps.apis.public.AnnotateApi"},{"location":"apis/public/AnnotateApi/#generate_project_object_annotations","text":"AnnotatedObject1 generate_project_object_annotations(proj_key, options) Run an annotator on an object, using resources from the project. DEPRECATED , please use generate_project_object_annotations_async instead.","title":"generate_project_object_annotations"},{"location":"apis/public/AnnotateApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . AnnotateObjectOptions () # AnnotateObjectOptions | try : api_response = api_instance . generate_project_object_annotations ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->generate_project_object_annotations: %s \\n \" % e )","title":"Example"},{"location":"apis/public/AnnotateApi/#parameters","text":"Name Type Description Notes proj_key str options AnnotateObjectOptions","title":"Parameters"},{"location":"apis/public/AnnotateApi/#return-type","text":"AnnotatedObject1","title":"Return type"},{"location":"apis/public/AnnotateApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/AnnotateApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/AnnotateApi/#http-response-details","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/AnnotateApi/#generate_project_object_annotations_async","text":"Task generate_project_object_annotations_async(proj_key, options) Run an annotator on an object, using resources from the project.","title":"generate_project_object_annotations_async"},{"location":"apis/public/AnnotateApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . AnnotateObjectOptions1 () # AnnotateObjectOptions1 | try : api_response = api_instance . generate_project_object_annotations_async ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->generate_project_object_annotations_async: %s \\n \" % e )","title":"Example"},{"location":"apis/public/AnnotateApi/#parameters_1","text":"Name Type Description Notes proj_key str options AnnotateObjectOptions1","title":"Parameters"},{"location":"apis/public/AnnotateApi/#return-type_1","text":"Task","title":"Return type"},{"location":"apis/public/AnnotateApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/AnnotateApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/AnnotateApi/#http-response-details_1","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/AnnotateApi/#get_cached_annotator_metadata","text":"AnnotatorMetadata get_cached_annotator_metadata(proj_key, options) Get annotator's metadata","title":"get_cached_annotator_metadata"},{"location":"apis/public/AnnotateApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = None # object | try : api_response = api_instance . get_cached_annotator_metadata ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->get_cached_annotator_metadata: %s \\n \" % e )","title":"Example"},{"location":"apis/public/AnnotateApi/#parameters_2","text":"Name Type Description Notes proj_key str options object","title":"Parameters"},{"location":"apis/public/AnnotateApi/#return-type_2","text":"AnnotatorMetadata","title":"Return type"},{"location":"apis/public/AnnotateApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/AnnotateApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json, text/html","title":"HTTP request headers"},{"location":"apis/public/AnnotateApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/AnnotateApi/#get_project_annotator_supported_annotations","text":"SupportedAnnotatorAnnotations get_project_annotator_supported_annotations(proj_key, options) Get supported annotations for an annotator","title":"get_project_annotator_supported_annotations"},{"location":"apis/public/AnnotateApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . AnnotateApi ( api_client ) proj_key = 'proj_key_example' # str | options = None # object | try : api_response = api_instance . get_project_annotator_supported_annotations ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AnnotateApi->get_project_annotator_supported_annotations: %s \\n \" % e )","title":"Example"},{"location":"apis/public/AnnotateApi/#parameters_3","text":"Name Type Description Notes proj_key str options object","title":"Parameters"},{"location":"apis/public/AnnotateApi/#return-type_3","text":"SupportedAnnotatorAnnotations","title":"Return type"},{"location":"apis/public/AnnotateApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/AnnotateApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json, text/html","title":"HTTP request headers"},{"location":"apis/public/AnnotateApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/AnnotateDocumentRequest/","text":"AnnotateDocumentRequest \u00b6 Properties \u00b6 Name Type Description Notes document object image_annotators list[AnnotatorParametersOrRef] table_annotators list[AnnotatorParametersOrRef] text_annotators list[AnnotatorParametersOrRef] use_cache bool [optional] [default to True] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotateDocumentRequest"},{"location":"apis/public/AnnotateDocumentRequest/#annotatedocumentrequest","text":"","title":"AnnotateDocumentRequest"},{"location":"apis/public/AnnotateDocumentRequest/#properties","text":"Name Type Description Notes document object image_annotators list[AnnotatorParametersOrRef] table_annotators list[AnnotatorParametersOrRef] text_annotators list[AnnotatorParametersOrRef] use_cache bool [optional] [default to True] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotateObjectOptions/","text":"AnnotateObjectOptions \u00b6 Properties \u00b6 Name Type Description Notes input AnnotatorInput parameters dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"AnnotateObjectOptions"},{"location":"apis/public/AnnotateObjectOptions/#annotateobjectoptions","text":"","title":"AnnotateObjectOptions"},{"location":"apis/public/AnnotateObjectOptions/#properties","text":"Name Type Description Notes input AnnotatorInput parameters dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotateObjectOptions1/","text":"AnnotateObjectOptions1 \u00b6 Properties \u00b6 Name Type Description Notes input AnnotatorInput model_config_key str [optional] parameters dict(str, object) proj_key str [optional] public bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotateObjectOptions1"},{"location":"apis/public/AnnotateObjectOptions1/#annotateobjectoptions1","text":"","title":"AnnotateObjectOptions1"},{"location":"apis/public/AnnotateObjectOptions1/#properties","text":"Name Type Description Notes input AnnotatorInput model_config_key str [optional] parameters dict(str, object) proj_key str [optional] public bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedDocumentReport/","text":"AnnotatedDocumentReport \u00b6 Properties \u00b6 Name Type Description Notes document ProjectProjKeyAnnotateDocumentReportDocument document_annotation_parameters object [optional] document_conversion_parameters object [optional] report ProjectProjKeyAnnotateDocumentReportReport [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedDocumentReport"},{"location":"apis/public/AnnotatedDocumentReport/#annotateddocumentreport","text":"","title":"AnnotatedDocumentReport"},{"location":"apis/public/AnnotatedDocumentReport/#properties","text":"Name Type Description Notes document ProjectProjKeyAnnotateDocumentReportDocument document_annotation_parameters object [optional] document_conversion_parameters object [optional] report ProjectProjKeyAnnotateDocumentReportReport [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedImage/","text":"AnnotatedImage \u00b6 Properties \u00b6 Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedImage"},{"location":"apis/public/AnnotatedImage/#annotatedimage","text":"","title":"AnnotatedImage"},{"location":"apis/public/AnnotatedImage/#properties","text":"Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedObject/","text":"AnnotatedObject \u00b6 Properties \u00b6 Name Type Description Notes image AnnotatedImage [optional] table AnnotatedTable [optional] text AnnotatedTextLines [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedObject"},{"location":"apis/public/AnnotatedObject/#annotatedobject","text":"","title":"AnnotatedObject"},{"location":"apis/public/AnnotatedObject/#properties","text":"Name Type Description Notes image AnnotatedImage [optional] table AnnotatedTable [optional] text AnnotatedTextLines [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedObject1/","text":"AnnotatedObject1 \u00b6 Properties \u00b6 Name Type Description Notes image AnnotatedImage [optional] table AnnotatedTable [optional] text AnnotatedTextLines [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedObject1"},{"location":"apis/public/AnnotatedObject1/#annotatedobject1","text":"","title":"AnnotatedObject1"},{"location":"apis/public/AnnotatedObject1/#properties","text":"Name Type Description Notes image AnnotatedImage [optional] table AnnotatedTable [optional] text AnnotatedTextLines [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedTable/","text":"AnnotatedTable \u00b6 Properties \u00b6 Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedTable"},{"location":"apis/public/AnnotatedTable/#annotatedtable","text":"","title":"AnnotatedTable"},{"location":"apis/public/AnnotatedTable/#properties","text":"Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedText/","text":"AnnotatedText \u00b6 Properties \u00b6 Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedText"},{"location":"apis/public/AnnotatedText/#annotatedtext","text":"","title":"AnnotatedText"},{"location":"apis/public/AnnotatedText/#properties","text":"Name Type Description Notes entities dict(str, list[EntityAnnotation]) properties object relationships dict(str, list[object]) text str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatedTextLines/","text":"AnnotatedTextLines \u00b6 Properties \u00b6 Name Type Description Notes entities list[dict(str, list[EntityAnnotation])] One item per line on the original text. properties list[object] One item per line on the original text. relationships list[dict(str, list[object])] One item per line on the original text. text str Input text after clean up. The annotation indexes will be based on this text and not the input text. [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatedTextLines"},{"location":"apis/public/AnnotatedTextLines/#annotatedtextlines","text":"","title":"AnnotatedTextLines"},{"location":"apis/public/AnnotatedTextLines/#properties","text":"Name Type Description Notes entities list[dict(str, list[EntityAnnotation])] One item per line on the original text. properties list[object] One item per line on the original text. relationships list[dict(str, list[object])] One item per line on the original text. text str Input text after clean up. The annotation indexes will be based on this text and not the input text. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatorImageInput/","text":"AnnotatorImageInput \u00b6 Properties \u00b6 Name Type Description Notes metadata ImageMetadata [optional] source ImageSource [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatorImageInput"},{"location":"apis/public/AnnotatorImageInput/#annotatorimageinput","text":"","title":"AnnotatorImageInput"},{"location":"apis/public/AnnotatorImageInput/#properties","text":"Name Type Description Notes metadata ImageMetadata [optional] source ImageSource [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatorInput/","text":"AnnotatorInput \u00b6 Properties \u00b6 Name Type Description Notes image AnnotatorImageInput [optional] table list[list[object]] A table, specified as an array of arrays. Each outer array represents a row, and each item in the inner array represents the column. [optional] text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatorInput"},{"location":"apis/public/AnnotatorInput/#annotatorinput","text":"","title":"AnnotatorInput"},{"location":"apis/public/AnnotatorInput/#properties","text":"Name Type Description Notes image AnnotatorImageInput [optional] table list[list[object]] A table, specified as an array of arrays. Each outer array represents a row, and each item in the inner array represents the column. [optional] text str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatorMetadata/","text":"AnnotatorMetadata \u00b6 Properties \u00b6 Name Type Description Notes author str description str name str url str version str [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatorMetadata"},{"location":"apis/public/AnnotatorMetadata/#annotatormetadata","text":"","title":"AnnotatorMetadata"},{"location":"apis/public/AnnotatorMetadata/#properties","text":"Name Type Description Notes author str description str name str url str version str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatorParametersOrRef/","text":"AnnotatorParametersOrRef \u00b6 Properties \u00b6 Name Type Description Notes model_config_key str [optional] proj_key str [optional] public bool [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatorParametersOrRef"},{"location":"apis/public/AnnotatorParametersOrRef/#annotatorparametersorref","text":"","title":"AnnotatorParametersOrRef"},{"location":"apis/public/AnnotatorParametersOrRef/#properties","text":"Name Type Description Notes model_config_key str [optional] proj_key str [optional] public bool [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AnnotatorSupportedAnnotationsParameters/","text":"AnnotatorSupportedAnnotationsParameters \u00b6 Properties \u00b6 Name Type Description Notes annotator str annotator_settings object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnnotatorSupportedAnnotationsParameters"},{"location":"apis/public/AnnotatorSupportedAnnotationsParameters/#annotatorsupportedannotationsparameters","text":"","title":"AnnotatorSupportedAnnotationsParameters"},{"location":"apis/public/AnnotatorSupportedAnnotationsParameters/#properties","text":"Name Type Description Notes annotator str annotator_settings object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions/","text":"AssembleDataFlowIntoKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender snapshot TakeSnapshotSettingsBackendAware [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AssembleDataFlowIntoKnowledgeGraphOptions"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions/#assembledataflowintoknowledgegraphoptions","text":"","title":"AssembleDataFlowIntoKnowledgeGraphOptions"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions/#properties","text":"Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender snapshot TakeSnapshotSettingsBackendAware [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions1/","text":"AssembleDataFlowIntoKnowledgeGraphOptions1 \u00b6 Properties \u00b6 Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender snapshot TakeSnapshotSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AssembleDataFlowIntoKnowledgeGraphOptions1"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions1/#assembledataflowintoknowledgegraphoptions1","text":"","title":"AssembleDataFlowIntoKnowledgeGraphOptions1"},{"location":"apis/public/AssembleDataFlowIntoKnowledgeGraphOptions1/#properties","text":"Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender snapshot TakeSnapshotSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BackendFlavour/","text":"BackendFlavour \u00b6 Properties \u00b6 Name Type Description Notes kg_amqp str [optional] kg_legacy_api str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BackendFlavour"},{"location":"apis/public/BackendFlavour/#backendflavour","text":"","title":"BackendFlavour"},{"location":"apis/public/BackendFlavour/#properties","text":"Name Type Description Notes kg_amqp str [optional] kg_legacy_api str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/","text":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow \u00b6 Properties \u00b6 Name Type Description Notes df_tpl_key str If set, the data flow with this key will be used. [optional] proj_key str If set, allows for cross-project data flows to be used. [optional] public bool Must be set if the data flow template is public [optional] raw_data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/#backendprojectprojkeybagsbagkeytasksassembledataflowdataflow","text":"","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/#properties","text":"Name Type Description Notes df_tpl_key str If set, the data flow with this key will be used. [optional] proj_key str If set, allows for cross-project data flows to be used. [optional] public bool Must be set if the data flow template is public [optional] raw_data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow/","text":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow \u00b6 If this is set, the raw data flow contents will be used. Properties \u00b6 Name Type Description Notes template str Must be valid JSON variables object [Back to Model list] [Back to API list] [Back to README]","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow/#backendprojectprojkeybagsbagkeytasksassembledataflowdataflowrawdataflow","text":"If this is set, the raw data flow contents will be used.","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRawDataFlow/#properties","text":"Name Type Description Notes template str Must be valid JSON variables object [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender/","text":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender \u00b6 Properties \u00b6 Name Type Description Notes variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender/#backendprojectprojkeybagsbagkeytasksassembledataflowrender","text":"","title":"BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender"},{"location":"apis/public/BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender/#properties","text":"Name Type Description Notes variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BackupKnowledgeGraphOptions/","text":"BackupKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes backup_s3 bool [optional] [default to True] coordinates S3CoordinatesWithBackupKey [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BackupKnowledgeGraphOptions"},{"location":"apis/public/BackupKnowledgeGraphOptions/#backupknowledgegraphoptions","text":"","title":"BackupKnowledgeGraphOptions"},{"location":"apis/public/BackupKnowledgeGraphOptions/#properties","text":"Name Type Description Notes backup_s3 bool [optional] [default to True] coordinates S3CoordinatesWithBackupKey [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/Bag/","text":"Bag \u00b6 Properties \u00b6 Name Type Description Notes svc_endpoint str bag_domain str bag_key str bag_url str flavour str name str proj_key str public bool slug str timestamp float token str [Back to Model list] [Back to API list] [Back to README]","title":"Bag"},{"location":"apis/public/Bag/#bag","text":"","title":"Bag"},{"location":"apis/public/Bag/#properties","text":"Name Type Description Notes svc_endpoint str bag_domain str bag_key str bag_url str flavour str name str proj_key str public bool slug str timestamp float token str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagAmqpBackend/","text":"BagAmqpBackend \u00b6 Properties \u00b6 Name Type Description Notes flavour str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BagAmqpBackend"},{"location":"apis/public/BagAmqpBackend/#bagamqpbackend","text":"","title":"BagAmqpBackend"},{"location":"apis/public/BagAmqpBackend/#properties","text":"Name Type Description Notes flavour str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagBackendAware/","text":"BagBackendAware \u00b6 Properties \u00b6 Name Type Description Notes backend BagBackends bag_key str description str last_coords_resolution float [optional] name str proj_key str public bool slug str timestamp float [Back to Model list] [Back to API list] [Back to README]","title":"BagBackendAware"},{"location":"apis/public/BagBackendAware/#bagbackendaware","text":"","title":"BagBackendAware"},{"location":"apis/public/BagBackendAware/#properties","text":"Name Type Description Notes backend BagBackends bag_key str description str last_coords_resolution float [optional] name str proj_key str public bool slug str timestamp float [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagBackends/","text":"BagBackends \u00b6 Properties \u00b6 Name Type Description Notes kg_amqp BagAmqpBackend [optional] kg_legacy_api BagKgLegacyApiBackend [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BagBackends"},{"location":"apis/public/BagBackends/#bagbackends","text":"","title":"BagBackends"},{"location":"apis/public/BagBackends/#properties","text":"Name Type Description Notes kg_amqp BagAmqpBackend [optional] kg_legacy_api BagKgLegacyApiBackend [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagCallback/","text":"BagCallback \u00b6 Properties \u00b6 Name Type Description Notes callback_url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BagCallback"},{"location":"apis/public/BagCallback/#bagcallback","text":"","title":"BagCallback"},{"location":"apis/public/BagCallback/#properties","text":"Name Type Description Notes callback_url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagComponentStatus/","text":"BagComponentStatus \u00b6 Properties \u00b6 Name Type Description Notes start_time float status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"BagComponentStatus"},{"location":"apis/public/BagComponentStatus/#bagcomponentstatus","text":"","title":"BagComponentStatus"},{"location":"apis/public/BagComponentStatus/#properties","text":"Name Type Description Notes start_time float status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagComponentStatusEnum/","text":"BagComponentStatusEnum \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"BagComponentStatusEnum"},{"location":"apis/public/BagComponentStatusEnum/#bagcomponentstatusenum","text":"","title":"BagComponentStatusEnum"},{"location":"apis/public/BagComponentStatusEnum/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagFlavour/","text":"BagFlavour \u00b6 Properties \u00b6 Name Type Description Notes description str [optional] display_name str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BagFlavour"},{"location":"apis/public/BagFlavour/#bagflavour","text":"","title":"BagFlavour"},{"location":"apis/public/BagFlavour/#properties","text":"Name Type Description Notes description str [optional] display_name str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagFlavourDefaultQuota/","text":"BagFlavourDefaultQuota \u00b6 Properties \u00b6 Name Type Description Notes default_quota float [optional] display_name str name str [Back to Model list] [Back to API list] [Back to README]","title":"BagFlavourDefaultQuota"},{"location":"apis/public/BagFlavourDefaultQuota/#bagflavourdefaultquota","text":"","title":"BagFlavourDefaultQuota"},{"location":"apis/public/BagFlavourDefaultQuota/#properties","text":"Name Type Description Notes default_quota float [optional] display_name str name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagFlavourFullData/","text":"BagFlavourFullData \u00b6 Properties \u00b6 Name Type Description Notes backend str config object default_quota int [optional] description str display_name str is_from_deployment bool [optional] name str [optional] order float [optional] project_specific bool [Back to Model list] [Back to API list] [Back to README]","title":"BagFlavourFullData"},{"location":"apis/public/BagFlavourFullData/#bagflavourfulldata","text":"","title":"BagFlavourFullData"},{"location":"apis/public/BagFlavourFullData/#properties","text":"Name Type Description Notes backend str config object default_quota int [optional] description str display_name str is_from_deployment bool [optional] name str [optional] order float [optional] project_specific bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagKgLegacyApiBackend/","text":"BagKgLegacyApiBackend \u00b6 Properties \u00b6 Name Type Description Notes svc_endpoint str [optional] bag_domain str [optional] bag_url str [optional] flavour str [optional] token str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BagKgLegacyApiBackend"},{"location":"apis/public/BagKgLegacyApiBackend/#bagkglegacyapibackend","text":"","title":"BagKgLegacyApiBackend"},{"location":"apis/public/BagKgLegacyApiBackend/#properties","text":"Name Type Description Notes svc_endpoint str [optional] bag_domain str [optional] bag_url str [optional] flavour str [optional] token str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagStatus/","text":"BagStatus \u00b6 Properties \u00b6 Name Type Description Notes components BagStatusComponents status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"BagStatus"},{"location":"apis/public/BagStatus/#bagstatus","text":"","title":"BagStatus"},{"location":"apis/public/BagStatus/#properties","text":"Name Type Description Notes components BagStatusComponents status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagStatusBackendAware/","text":"BagStatusBackendAware \u00b6 Properties \u00b6 Name Type Description Notes kg_amqp BagStatusBackendAwareKgAmqp [optional] kg_legacy_api BagStatus [optional] overall_status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"BagStatusBackendAware"},{"location":"apis/public/BagStatusBackendAware/#bagstatusbackendaware","text":"","title":"BagStatusBackendAware"},{"location":"apis/public/BagStatusBackendAware/#properties","text":"Name Type Description Notes kg_amqp BagStatusBackendAwareKgAmqp [optional] kg_legacy_api BagStatus [optional] overall_status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagStatusBackendAwareKgAmqp/","text":"BagStatusBackendAwareKgAmqp \u00b6 Properties \u00b6 Name Type Description Notes status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"BagStatusBackendAwareKgAmqp"},{"location":"apis/public/BagStatusBackendAwareKgAmqp/#bagstatusbackendawarekgamqp","text":"","title":"BagStatusBackendAwareKgAmqp"},{"location":"apis/public/BagStatusBackendAwareKgAmqp/#properties","text":"Name Type Description Notes status BagComponentStatusEnum [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/BagStatusComponents/","text":"BagStatusComponents \u00b6 Properties \u00b6 Name Type Description Notes erlenmeyer_api BagComponentStatus Status of the Erlenmeyer API for this Graph erlenmeyer_ui BagComponentStatus Status of the Erlenmeyer UI for this Graph kg BagComponentStatus Status of the Knowledge Graph and its API [Back to Model list] [Back to API list] [Back to README]","title":"BagStatusComponents"},{"location":"apis/public/BagStatusComponents/#bagstatuscomponents","text":"","title":"BagStatusComponents"},{"location":"apis/public/BagStatusComponents/#properties","text":"Name Type Description Notes erlenmeyer_api BagComponentStatus Status of the Erlenmeyer API for this Graph erlenmeyer_ui BagComponentStatus Status of the Erlenmeyer UI for this Graph kg BagComponentStatus Status of the Knowledge Graph and its API [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CatalogReference/","text":"CatalogReference \u00b6 Properties \u00b6 Name Type Description Notes collection_name str dc_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CatalogReference"},{"location":"apis/public/CatalogReference/#catalogreference","text":"","title":"CatalogReference"},{"location":"apis/public/CatalogReference/#properties","text":"Name Type Description Notes collection_name str dc_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CcsCollectionReference/","text":"CcsCollectionReference \u00b6 Properties \u00b6 Name Type Description Notes collection_name str language str [optional] proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"CcsCollectionReference"},{"location":"apis/public/CcsCollectionReference/#ccscollectionreference","text":"","title":"CcsCollectionReference"},{"location":"apis/public/CcsCollectionReference/#properties","text":"Name Type Description Notes collection_name str language str [optional] proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CcsTask/","text":"CcsTask \u00b6 Properties \u00b6 Name Type Description Notes ccs_collection_name str ccs_project_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"CcsTask"},{"location":"apis/public/CcsTask/#ccstask","text":"","title":"CcsTask"},{"location":"apis/public/CcsTask/#properties","text":"Name Type Description Notes ccs_collection_name str ccs_project_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CeleryTask/","text":"CeleryTask \u00b6 Properties \u00b6 Name Type Description Notes failures list[SystemCeleryTasksFailureFailures] proj_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"CeleryTask"},{"location":"apis/public/CeleryTask/#celerytask","text":"","title":"CeleryTask"},{"location":"apis/public/CeleryTask/#properties","text":"Name Type Description Notes failures list[SystemCeleryTasksFailureFailures] proj_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CeleryTask1/","text":"CeleryTask1 \u00b6 Properties \u00b6 Name Type Description Notes completed_at float created_at float meta dict(str, object) metrics object [optional] proj_key str project_task_id str project_task_type str [optional] started_at float task_id str task_status str task_type str worker_name str [Back to Model list] [Back to API list] [Back to README]","title":"CeleryTask1"},{"location":"apis/public/CeleryTask1/#celerytask1","text":"","title":"CeleryTask1"},{"location":"apis/public/CeleryTask1/#properties","text":"Name Type Description Notes completed_at float created_at float meta dict(str, object) metrics object [optional] proj_key str project_task_id str project_task_type str [optional] started_at float task_id str task_status str task_type str worker_name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CeleryTaskPromise/","text":"CeleryTaskPromise \u00b6 Properties \u00b6 Name Type Description Notes result object task_id str task_status str [Back to Model list] [Back to API list] [Back to README]","title":"CeleryTaskPromise"},{"location":"apis/public/CeleryTaskPromise/#celerytaskpromise","text":"","title":"CeleryTaskPromise"},{"location":"apis/public/CeleryTaskPromise/#properties","text":"Name Type Description Notes result object task_id str task_status str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CloneDataCatalogOptions/","text":"CloneDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the catalog's S3 data also be copied? [optional] [default to True] description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"CloneDataCatalogOptions"},{"location":"apis/public/CloneDataCatalogOptions/#clonedatacatalogoptions","text":"","title":"CloneDataCatalogOptions"},{"location":"apis/public/CloneDataCatalogOptions/#properties","text":"Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the catalog's S3 data also be copied? [optional] [default to True] description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CloneDataCatalogResult/","text":"CloneDataCatalogResult \u00b6 Properties \u00b6 Name Type Description Notes clone_task Task data_catalogue DataCatalogue [Back to Model list] [Back to API list] [Back to README]","title":"CloneDataCatalogResult"},{"location":"apis/public/CloneDataCatalogResult/#clonedatacatalogresult","text":"","title":"CloneDataCatalogResult"},{"location":"apis/public/CloneDataCatalogResult/#properties","text":"Name Type Description Notes clone_task Task data_catalogue DataCatalogue [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CloneDictionaryOptions/","text":"CloneDictionaryOptions \u00b6 Properties \u00b6 Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the dictionary's S3 data also be copied? [optional] [default to True] description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"CloneDictionaryOptions"},{"location":"apis/public/CloneDictionaryOptions/#clonedictionaryoptions","text":"","title":"CloneDictionaryOptions"},{"location":"apis/public/CloneDictionaryOptions/#properties","text":"Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the dictionary's S3 data also be copied? [optional] [default to True] description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ClonePublicDataCatalogOptions/","text":"ClonePublicDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the catalog's S3 data also be copied? [optional] [default to True] description str name str proj_key str The project key of the project to store the resulting data catalogue public bool [Back to Model list] [Back to API list] [Back to README]","title":"ClonePublicDataCatalogOptions"},{"location":"apis/public/ClonePublicDataCatalogOptions/#clonepublicdatacatalogoptions","text":"","title":"ClonePublicDataCatalogOptions"},{"location":"apis/public/ClonePublicDataCatalogOptions/#properties","text":"Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the catalog's S3 data also be copied? [optional] [default to True] description str name str proj_key str The project key of the project to store the resulting data catalogue public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ClonePublicDictionaryOptions/","text":"ClonePublicDictionaryOptions \u00b6 Properties \u00b6 Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the dictionary's S3 data also be copied? [optional] [default to True] description str name str proj_key str The project key of the project to store the resulting dictionary public bool [Back to Model list] [Back to API list] [Back to README]","title":"ClonePublicDictionaryOptions"},{"location":"apis/public/ClonePublicDictionaryOptions/#clonepublicdictionaryoptions","text":"","title":"ClonePublicDictionaryOptions"},{"location":"apis/public/ClonePublicDictionaryOptions/#properties","text":"Name Type Description Notes collections list[str] [optional] copy_s3 bool Should the dictionary's S3 data also be copied? [optional] [default to True] description str name str proj_key str The project key of the project to store the resulting dictionary public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CollectionListCoordinates/","text":"CollectionListCoordinates \u00b6 Properties \u00b6 Name Type Description Notes collections list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CollectionListCoordinates"},{"location":"apis/public/CollectionListCoordinates/#collectionlistcoordinates","text":"","title":"CollectionListCoordinates"},{"location":"apis/public/CollectionListCoordinates/#properties","text":"Name Type Description Notes collections list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CpsModelReference/","text":"CpsModelReference \u00b6 Properties \u00b6 Name Type Description Notes model_config_key str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"CpsModelReference"},{"location":"apis/public/CpsModelReference/#cpsmodelreference","text":"","title":"CpsModelReference"},{"location":"apis/public/CpsModelReference/#properties","text":"Name Type Description Notes model_config_key str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CpsPackage/","text":"CpsPackage \u00b6 Properties \u00b6 Name Type Description Notes dependencies list[str] description str name str package_id str type str [Back to Model list] [Back to API list] [Back to README]","title":"CpsPackage"},{"location":"apis/public/CpsPackage/#cpspackage","text":"","title":"CpsPackage"},{"location":"apis/public/CpsPackage/#properties","text":"Name Type Description Notes dependencies list[str] description str name str package_id str type str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateCollectionInDictionaryOptions/","text":"CreateCollectionInDictionaryOptions \u00b6 Properties \u00b6 Name Type Description Notes collection_name str [Back to Model list] [Back to API list] [Back to README]","title":"CreateCollectionInDictionaryOptions"},{"location":"apis/public/CreateCollectionInDictionaryOptions/#createcollectionindictionaryoptions","text":"","title":"CreateCollectionInDictionaryOptions"},{"location":"apis/public/CreateCollectionInDictionaryOptions/#properties","text":"Name Type Description Notes collection_name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateDataCatalogCollectionOptions/","text":"CreateDataCatalogCollectionOptions \u00b6 Properties \u00b6 Name Type Description Notes collection_name str [Back to Model list] [Back to API list] [Back to README]","title":"CreateDataCatalogCollectionOptions"},{"location":"apis/public/CreateDataCatalogCollectionOptions/#createdatacatalogcollectionoptions","text":"","title":"CreateDataCatalogCollectionOptions"},{"location":"apis/public/CreateDataCatalogCollectionOptions/#properties","text":"Name Type Description Notes collection_name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateDataCatalogOptions/","text":"CreateDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes category_schemas list[DataCatalogCategorySchema] [optional] collections_data_flows list[DataCatalogDataFlow] [optional] description str name str public bool topologydata_flows list[DataCatalogTopology] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateDataCatalogOptions"},{"location":"apis/public/CreateDataCatalogOptions/#createdatacatalogoptions","text":"","title":"CreateDataCatalogOptions"},{"location":"apis/public/CreateDataCatalogOptions/#properties","text":"Name Type Description Notes category_schemas list[DataCatalogCategorySchema] [optional] collections_data_flows list[DataCatalogDataFlow] [optional] description str name str public bool topologydata_flows list[DataCatalogTopology] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateDataFlowTemplateOptions/","text":"CreateDataFlowTemplateOptions \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool template DataFlowTemplate variables dict(str, ProjectProjKeyKgcDataflowTemplatesVariables) [Back to Model list] [Back to API list] [Back to README]","title":"CreateDataFlowTemplateOptions"},{"location":"apis/public/CreateDataFlowTemplateOptions/#createdataflowtemplateoptions","text":"","title":"CreateDataFlowTemplateOptions"},{"location":"apis/public/CreateDataFlowTemplateOptions/#properties","text":"Name Type Description Notes description str name str public bool template DataFlowTemplate variables dict(str, ProjectProjKeyKgcDataflowTemplatesVariables) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateDictionaryOptions/","text":"CreateDictionaryOptions \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"CreateDictionaryOptions"},{"location":"apis/public/CreateDictionaryOptions/#createdictionaryoptions","text":"","title":"CreateDictionaryOptions"},{"location":"apis/public/CreateDictionaryOptions/#properties","text":"Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateKnowledgeGraphOptions/","text":"CreateKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes description str Description of the BAG [optional] flavours list[str] Flavours names of the bag. Determines its available resources name str Name of the BAG public bool If true, the BAG will be publicly available [Back to Model list] [Back to API list] [Back to README]","title":"CreateKnowledgeGraphOptions"},{"location":"apis/public/CreateKnowledgeGraphOptions/#createknowledgegraphoptions","text":"","title":"CreateKnowledgeGraphOptions"},{"location":"apis/public/CreateKnowledgeGraphOptions/#properties","text":"Name Type Description Notes description str Description of the BAG [optional] flavours list[str] Flavours names of the bag. Determines its available resources name str Name of the BAG public bool If true, the BAG will be publicly available [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateKnowledgeGraphOptions1/","text":"CreateKnowledgeGraphOptions1 \u00b6 Properties \u00b6 Name Type Description Notes description str Description of the BAG [optional] flavour str \\\"Flavour\\\" of the BAG, determines its available resources. name str Name of the BAG public bool If true, the BAG will be publicly available [Back to Model list] [Back to API list] [Back to README]","title":"CreateKnowledgeGraphOptions1"},{"location":"apis/public/CreateKnowledgeGraphOptions1/#createknowledgegraphoptions1","text":"","title":"CreateKnowledgeGraphOptions1"},{"location":"apis/public/CreateKnowledgeGraphOptions1/#properties","text":"Name Type Description Notes description str Description of the BAG [optional] flavour str \\\"Flavour\\\" of the BAG, determines its available resources. name str Name of the BAG public bool If true, the BAG will be publicly available [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/CreateProjectModelConfigOptions/","text":"CreateProjectModelConfigOptions \u00b6 Properties \u00b6 Name Type Description Notes configurations ProjectProjKeyModelConfigsConfigurations description str model_config_key str [optional] name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"CreateProjectModelConfigOptions"},{"location":"apis/public/CreateProjectModelConfigOptions/#createprojectmodelconfigoptions","text":"","title":"CreateProjectModelConfigOptions"},{"location":"apis/public/CreateProjectModelConfigOptions/#properties","text":"Name Type Description Notes configurations ProjectProjKeyModelConfigsConfigurations description str model_config_key str [optional] name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogCategorySchema/","text":"DataCatalogCategorySchema \u00b6 Properties \u00b6 Name Type Description Notes key str schema dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogCategorySchema"},{"location":"apis/public/DataCatalogCategorySchema/#datacatalogcategoryschema","text":"","title":"DataCatalogCategorySchema"},{"location":"apis/public/DataCatalogCategorySchema/#properties","text":"Name Type Description Notes key str schema dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogCollection/","text":"DataCatalogCollection \u00b6 Properties \u00b6 Name Type Description Notes item_count int name str [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogCollection"},{"location":"apis/public/DataCatalogCollection/#datacatalogcollection","text":"","title":"DataCatalogCollection"},{"location":"apis/public/DataCatalogCollection/#properties","text":"Name Type Description Notes item_count int name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogDataFlow/","text":"DataCatalogDataFlow \u00b6 Properties \u00b6 Name Type Description Notes data_flows list[object] key str [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogDataFlow"},{"location":"apis/public/DataCatalogDataFlow/#datacatalogdataflow","text":"","title":"DataCatalogDataFlow"},{"location":"apis/public/DataCatalogDataFlow/#properties","text":"Name Type Description Notes data_flows list[object] key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogImportOptions/","text":"DataCatalogImportOptions \u00b6 Properties \u00b6 Name Type Description Notes options ProjectProjKeyDataCataloguesFromMongoOptions target ProjectProjKeyDataCataloguesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogImportOptions"},{"location":"apis/public/DataCatalogImportOptions/#datacatalogimportoptions","text":"","title":"DataCatalogImportOptions"},{"location":"apis/public/DataCatalogImportOptions/#properties","text":"Name Type Description Notes options ProjectProjKeyDataCataloguesFromMongoOptions target ProjectProjKeyDataCataloguesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogImportResult/","text":"DataCatalogImportResult \u00b6 Properties \u00b6 Name Type Description Notes data_catalogue DataCatalogue import_task Task [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogImportResult"},{"location":"apis/public/DataCatalogImportResult/#datacatalogimportresult","text":"","title":"DataCatalogImportResult"},{"location":"apis/public/DataCatalogImportResult/#properties","text":"Name Type Description Notes data_catalogue DataCatalogue import_task Task [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogProvenanceLog/","text":"DataCatalogProvenanceLog \u00b6 Properties \u00b6 Name Type Description Notes collection_name str source DataCatalogProvenanceLogSource timestamp float user DataCatalogProvenanceLogUser [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogProvenanceLog"},{"location":"apis/public/DataCatalogProvenanceLog/#datacatalogprovenancelog","text":"","title":"DataCatalogProvenanceLog"},{"location":"apis/public/DataCatalogProvenanceLog/#properties","text":"Name Type Description Notes collection_name str source DataCatalogProvenanceLogSource timestamp float user DataCatalogProvenanceLogUser [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogProvenanceLogSource/","text":"DataCatalogProvenanceLogSource \u00b6 Properties \u00b6 Name Type Description Notes ccs object [optional] clone object [optional] elastic object [optional] file object [optional] mongo_s3 object [optional] url object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogProvenanceLogSource"},{"location":"apis/public/DataCatalogProvenanceLogSource/#datacatalogprovenancelogsource","text":"","title":"DataCatalogProvenanceLogSource"},{"location":"apis/public/DataCatalogProvenanceLogSource/#properties","text":"Name Type Description Notes ccs object [optional] clone object [optional] elastic object [optional] file object [optional] mongo_s3 object [optional] url object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogProvenanceLogUser/","text":"DataCatalogProvenanceLogUser \u00b6 Properties \u00b6 Name Type Description Notes email str name str user_key str [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogProvenanceLogUser"},{"location":"apis/public/DataCatalogProvenanceLogUser/#datacatalogprovenanceloguser","text":"","title":"DataCatalogProvenanceLogUser"},{"location":"apis/public/DataCatalogProvenanceLogUser/#properties","text":"Name Type Description Notes email str name str user_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogSchema/","text":"DataCatalogSchema \u00b6 Properties \u00b6 Name Type Description Notes name str [optional] schema str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogSchema"},{"location":"apis/public/DataCatalogSchema/#datacatalogschema","text":"","title":"DataCatalogSchema"},{"location":"apis/public/DataCatalogSchema/#properties","text":"Name Type Description Notes name str [optional] schema str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogTopology/","text":"DataCatalogTopology \u00b6 Properties \u00b6 Name Type Description Notes categories list[DataCatalogTopologyNode] edges list[DataCatalogTopologyEdge] [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogTopology"},{"location":"apis/public/DataCatalogTopology/#datacatalogtopology","text":"","title":"DataCatalogTopology"},{"location":"apis/public/DataCatalogTopology/#properties","text":"Name Type Description Notes categories list[DataCatalogTopologyNode] edges list[DataCatalogTopologyEdge] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogTopologyEdge/","text":"DataCatalogTopologyEdge \u00b6 Properties \u00b6 Name Type Description Notes name str source list[str] source_field str target list[str] target_field str [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogTopologyEdge"},{"location":"apis/public/DataCatalogTopologyEdge/#datacatalogtopologyedge","text":"","title":"DataCatalogTopologyEdge"},{"location":"apis/public/DataCatalogTopologyEdge/#properties","text":"Name Type Description Notes name str source list[str] source_field str target list[str] target_field str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogTopologyNode/","text":"DataCatalogTopologyNode \u00b6 Properties \u00b6 Name Type Description Notes data_fields list[str] name str [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogTopologyNode"},{"location":"apis/public/DataCatalogTopologyNode/#datacatalogtopologynode","text":"","title":"DataCatalogTopologyNode"},{"location":"apis/public/DataCatalogTopologyNode/#properties","text":"Name Type Description Notes data_fields list[str] name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogUrlImportOptions/","text":"DataCatalogUrlImportOptions \u00b6 Properties \u00b6 Name Type Description Notes options ProjectProjKeyDataCataloguesFromUrlOptions target ProjectProjKeyDataCataloguesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogUrlImportOptions"},{"location":"apis/public/DataCatalogUrlImportOptions/#datacatalogurlimportoptions","text":"","title":"DataCatalogUrlImportOptions"},{"location":"apis/public/DataCatalogUrlImportOptions/#properties","text":"Name Type Description Notes options ProjectProjKeyDataCataloguesFromUrlOptions target ProjectProjKeyDataCataloguesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCatalogsApi/","text":"deepsearch.cps.apis.public.DataCatalogsApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description clone_project_data_catalog POST /project/{proj_key}/data_catalogues/{dc_key}/actions/clone clone_public_data_catalog POST /project/public/data_catalogues/{dc_key}/actions/clone create_project_data_catalog POST /project/{proj_key}/data_catalogues create_project_data_catalog_collection POST /project/{proj_key}/data_catalogues/{dc_key}/collections create_project_data_catalog_delete_token POST /project/{proj_key}/data_catalogues/{dc_key}/delete_token delete_project_data_catalog DELETE /project/{proj_key}/data_catalogues/{dc_key} delete_project_data_catalog_collection DELETE /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name} export_dataset POST /project/{proj_key}/bags/{bag_key}/tasks/export_dataset export_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/export export_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/export get_data_catalog_collection_data GET /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/data get_project_data_catalog GET /project/{proj_key}/data_catalogues/{dc_key} get_public_data_catalog GET /project/public/data_catalogues/{dc_key} import_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/import import_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/import import_project_data_catalog_from_mongo POST /project/{proj_key}/data_catalogues/from_mongo import_project_data_catalog_from_url POST /project/{proj_key}/data_catalogues/from_url infer_project_data_catalog_category_schema POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/infer_schema list_data_catalogs_and_collections_from_schema POST /project/data_catalogues/with_schema list_known_data_catalog_schemas GET /project/data_cataloges/known_schemas list_project_data_catalog_collections GET /project/{proj_key}/data_catalogues/{dc_key}/collections list_project_data_catalogs GET /project/{proj_key}/data_catalogues list_public_data_catalog_collections GET /project/public/data_catalogues/{dc_key}/collections list_public_data_catalogs GET /project/public/data_catalogues patch_project_data_catalog PATCH /project/{proj_key}/data_catalogues/{dc_key} upload_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/upload upload_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/upload clone_project_data_catalog \u00b6 CloneDataCatalogResult clone_project_data_catalog(proj_key, dc_key, options) Clone an existing data catalogue Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . CloneDataCatalogOptions () # CloneDataCatalogOptions | try : api_response = api_instance . clone_project_data_catalog ( proj_key , dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->clone_project_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str options CloneDataCatalogOptions Return type \u00b6 CloneDataCatalogResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue cloned, and data is being copied. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] clone_public_data_catalog \u00b6 CloneDataCatalogResult clone_public_data_catalog(dc_key, options) Clone an existing public data catalogue Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . ClonePublicDataCatalogOptions () # ClonePublicDataCatalogOptions | try : api_response = api_instance . clone_public_data_catalog ( dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->clone_public_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dc_key str options ClonePublicDataCatalogOptions Return type \u00b6 CloneDataCatalogResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue cloned, and data is being copied. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_catalog \u00b6 DataCatalogue create_project_data_catalog(proj_key, options) Create an empty data catalog Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . CreateDataCatalogOptions () # CreateDataCatalogOptions | try : api_response = api_instance . create_project_data_catalog ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options CreateDataCatalogOptions Return type \u00b6 DataCatalogue Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalog created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_catalog_collection \u00b6 create_project_data_catalog_collection(proj_key, dc_key, body) Create a collection in a data catalog Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | body = deepsearch . cps . apis . public . CreateDataCatalogCollectionOptions () # CreateDataCatalogCollectionOptions | try : api_instance . create_project_data_catalog_collection ( proj_key , dc_key , body ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog_collection: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str body CreateDataCatalogCollectionOptions Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Collection created. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_catalog_delete_token \u00b6 TokenResponse create_project_data_catalog_delete_token(proj_key, dc_key) Get a token used to confirm the deletion of a data catalog. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . create_project_data_catalog_delete_token ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog_delete_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalog deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_data_catalog \u00b6 delete_project_data_catalog(proj_key, dc_key, confirmation_token) Delete a single data catalog Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_data_catalog ( proj_key , dc_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->delete_project_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str confirmation_token str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Data catalog deleted. - 404 Data catalog doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_data_catalog_collection \u00b6 delete_project_data_catalog_collection(proj_key, dc_key, collection_name) Delete a single data catalog's collection Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | try : api_instance . delete_project_data_catalog_collection ( proj_key , dc_key , collection_name ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->delete_project_data_catalog_collection: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Collection deleted. - 404 Collection doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_dataset \u00b6 ProjectTask export_dataset(proj_key, bag_key, data) Export dataset from a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . InlineObject3 () # InlineObject3 | try : api_response = api_instance . export_dataset ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_dataset: %s \\n \" % e ) Api Key Authentication (KGAuth): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . InlineObject3 () # InlineObject3 | try : api_response = api_instance . export_dataset ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_dataset: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str data InlineObject3 Return type \u00b6 ProjectTask Authorization \u00b6 Bearer , KGAuth HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_project_data_catalog_collection_data \u00b6 file export_project_data_catalog_collection_data(proj_key, dc_key, collection_name) Export the contents of a data catalog's collection Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | try : api_response = api_instance . export_project_data_catalog_collection_data ( proj_key , dc_key , collection_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_project_data_catalog_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/zip, application/json, application/x-jsonlines HTTP response details \u00b6 Status code Description Response headers 200 Data catalog collection contents. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_project_data_catalog_data \u00b6 file export_project_data_catalog_data(proj_key, dc_key) Export the contents of a data catalog. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . export_project_data_catalog_data ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_project_data_catalog_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/zip HTTP response details \u00b6 Status code Description Response headers 200 Data catalog contents. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_data_catalog_collection_data \u00b6 get_data_catalog_collection_data(proj_key, dc_key, collection_name, after=after, limit=limit) Get Data Catalog Collection data. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_instance . get_data_catalog_collection_data ( proj_key , dc_key , collection_name , after = after , limit = limit ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_data_catalog_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str after str [optional] limit int [optional] [default to 50] Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Get Data Catalog Collection data. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_catalog \u00b6 DataCatalogue get_project_data_catalog(proj_key, dc_key, include_collections=include_collections) Get a single data catalogue Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_data_catalog ( proj_key , dc_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_project_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str include_collections bool [optional] [default to False] Return type \u00b6 DataCatalogue Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_public_data_catalog \u00b6 DataCatalogue get_public_data_catalog(dc_key, include_collections=include_collections) Get a single data catalogue that was made public Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_public_data_catalog ( dc_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_public_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dc_key str include_collections bool [optional] [default to False] Return type \u00b6 DataCatalogue Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue - 404 Data catalogue not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] import_project_data_catalog_collection_data \u00b6 Task import_project_data_catalog_collection_data(proj_key, dc_key, collection_name, body) Import data to a data catalog collection. The collection will be created if it doesn't exist. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | body = deepsearch . cps . apis . public . ImportToDataCatalogCollectionOptions () # ImportToDataCatalogCollectionOptions | try : api_response = api_instance . import_project_data_catalog_collection_data ( proj_key , dc_key , collection_name , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str body ImportToDataCatalogCollectionOptions Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] import_project_data_catalog_data \u00b6 Task import_project_data_catalog_data(proj_key, dc_key, body) Import data to a data catalog. The collections will be created if they don't exist. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | body = deepsearch . cps . apis . public . ImportToDataCatalogOptions () # ImportToDataCatalogOptions | try : api_response = api_instance . import_project_data_catalog_data ( proj_key , dc_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str body ImportToDataCatalogOptions Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] import_project_data_catalog_from_mongo \u00b6 DataCatalogImportResult import_project_data_catalog_from_mongo(proj_key, body) Create a data catalogue from a mongo database Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DataCatalogImportOptions () # DataCatalogImportOptions | try : api_response = api_instance . import_project_data_catalog_from_mongo ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_from_mongo: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body DataCatalogImportOptions Return type \u00b6 DataCatalogImportResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] import_project_data_catalog_from_url \u00b6 DataCatalogImportResult import_project_data_catalog_from_url(proj_key, body) Create a data catalogue from a URL to a file Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DataCatalogUrlImportOptions () # DataCatalogUrlImportOptions | try : api_response = api_instance . import_project_data_catalog_from_url ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_from_url: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body DataCatalogUrlImportOptions Return type \u00b6 DataCatalogImportResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalogue created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] infer_project_data_catalog_category_schema \u00b6 Task infer_project_data_catalog_category_schema(proj_key, dc_key, collection_name, body) Infer the schema for a data catalog's collection. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | body = deepsearch . cps . apis . public . InferProjectDataCatalogCategorySchema () # InferProjectDataCatalogCategorySchema | try : api_response = api_instance . infer_project_data_catalog_category_schema ( proj_key , dc_key , collection_name , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->infer_project_data_catalog_category_schema: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str body InferProjectDataCatalogCategorySchema Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_data_catalogs_and_collections_from_schema \u00b6 list[DataCatalogue] list_data_catalogs_and_collections_from_schema(schema, proj_key=proj_key) List data catalogues with specific schema Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) schema = None # dict(str, object) | proj_key = 'proj_key_example' # str | (optional) try : api_response = api_instance . list_data_catalogs_and_collections_from_schema ( schema , proj_key = proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_data_catalogs_and_collections_from_schema: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes schema dict(str, object) proj_key str [optional] Return type \u00b6 list[DataCatalogue] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_known_data_catalog_schemas \u00b6 list[DataCatalogSchema] list_known_data_catalog_schemas() List System Known Data Catalog Schemas. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) try : api_response = api_instance . list_known_data_catalog_schemas () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_known_data_catalog_schemas: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[DataCatalogSchema] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Known Data Catalog Schemas. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_data_catalog_collections \u00b6 list[DataCatalogCollection] list_project_data_catalog_collections(proj_key, dc_key) Get the collections of a data catalog. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . list_project_data_catalog_collections ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_project_data_catalog_collections: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str Return type \u00b6 list[DataCatalogCollection] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalog collections - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_data_catalogs \u00b6 list[DataCatalogue] list_project_data_catalogs(proj_key, query=query) List data catalogues for a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_data_catalogs ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_project_data_catalogs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str query str [optional] Return type \u00b6 list[DataCatalogue] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_data_catalog_collections \u00b6 list[DataCatalogCollection] list_public_data_catalog_collections(dc_key) Get the collections of a data catalog. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | try : api_response = api_instance . list_public_data_catalog_collections ( dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_public_data_catalog_collections: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dc_key str Return type \u00b6 list[DataCatalogCollection] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalog collections - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_data_catalogs \u00b6 list[DataCatalogue] list_public_data_catalogs(query=query) List public data catalogues Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_data_catalogs ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_public_data_catalogs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes query str [optional] Return type \u00b6 list[DataCatalogue] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of public data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] patch_project_data_catalog \u00b6 DataCatalogue patch_project_data_catalog(proj_key, dc_key, options) Update the metadata of a data catalog. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . PatchDataCatalogOptions () # PatchDataCatalogOptions | try : api_response = api_instance . patch_project_data_catalog ( proj_key , dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->patch_project_data_catalog: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str options PatchDataCatalogOptions Return type \u00b6 DataCatalogue Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data catalog updated. - 404 Data catalog not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_data_catalog_collection_data \u00b6 Task upload_project_data_catalog_collection_data(proj_key, dc_key, collection_name, file) Upload data to a data catalog collection. The collection will be created if it doesn't exist. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_data_catalog_collection_data ( proj_key , dc_key , collection_name , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->upload_project_data_catalog_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str collection_name str file file Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_data_catalog_data \u00b6 Task upload_project_data_catalog_data(proj_key, dc_key, file) Upload data to a data catalog. The collection name(s) will be inferred from the file name(s). Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_data_catalog_data ( proj_key , dc_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->upload_project_data_catalog_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dc_key str file file Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.DataCatalogsApi"},{"location":"apis/public/DataCatalogsApi/#deepsearchcpsapispublicdatacatalogsapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description clone_project_data_catalog POST /project/{proj_key}/data_catalogues/{dc_key}/actions/clone clone_public_data_catalog POST /project/public/data_catalogues/{dc_key}/actions/clone create_project_data_catalog POST /project/{proj_key}/data_catalogues create_project_data_catalog_collection POST /project/{proj_key}/data_catalogues/{dc_key}/collections create_project_data_catalog_delete_token POST /project/{proj_key}/data_catalogues/{dc_key}/delete_token delete_project_data_catalog DELETE /project/{proj_key}/data_catalogues/{dc_key} delete_project_data_catalog_collection DELETE /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name} export_dataset POST /project/{proj_key}/bags/{bag_key}/tasks/export_dataset export_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/export export_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/export get_data_catalog_collection_data GET /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/data get_project_data_catalog GET /project/{proj_key}/data_catalogues/{dc_key} get_public_data_catalog GET /project/public/data_catalogues/{dc_key} import_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/import import_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/import import_project_data_catalog_from_mongo POST /project/{proj_key}/data_catalogues/from_mongo import_project_data_catalog_from_url POST /project/{proj_key}/data_catalogues/from_url infer_project_data_catalog_category_schema POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/infer_schema list_data_catalogs_and_collections_from_schema POST /project/data_catalogues/with_schema list_known_data_catalog_schemas GET /project/data_cataloges/known_schemas list_project_data_catalog_collections GET /project/{proj_key}/data_catalogues/{dc_key}/collections list_project_data_catalogs GET /project/{proj_key}/data_catalogues list_public_data_catalog_collections GET /project/public/data_catalogues/{dc_key}/collections list_public_data_catalogs GET /project/public/data_catalogues patch_project_data_catalog PATCH /project/{proj_key}/data_catalogues/{dc_key} upload_project_data_catalog_collection_data POST /project/{proj_key}/data_catalogues/{dc_key}/collections/{collection_name}/actions/upload upload_project_data_catalog_data POST /project/{proj_key}/data_catalogues/{dc_key}/actions/upload","title":"deepsearch.cps.apis.public.DataCatalogsApi"},{"location":"apis/public/DataCatalogsApi/#clone_project_data_catalog","text":"CloneDataCatalogResult clone_project_data_catalog(proj_key, dc_key, options) Clone an existing data catalogue","title":"clone_project_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . CloneDataCatalogOptions () # CloneDataCatalogOptions | try : api_response = api_instance . clone_project_data_catalog ( proj_key , dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->clone_project_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters","text":"Name Type Description Notes proj_key str dc_key str options CloneDataCatalogOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type","text":"CloneDataCatalogResult","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details","text":"Status code Description Response headers 200 Data catalogue cloned, and data is being copied. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#clone_public_data_catalog","text":"CloneDataCatalogResult clone_public_data_catalog(dc_key, options) Clone an existing public data catalogue","title":"clone_public_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . ClonePublicDataCatalogOptions () # ClonePublicDataCatalogOptions | try : api_response = api_instance . clone_public_data_catalog ( dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->clone_public_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_1","text":"Name Type Description Notes dc_key str options ClonePublicDataCatalogOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_1","text":"CloneDataCatalogResult","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_1","text":"Status code Description Response headers 200 Data catalogue cloned, and data is being copied. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#create_project_data_catalog","text":"DataCatalogue create_project_data_catalog(proj_key, options) Create an empty data catalog","title":"create_project_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . CreateDataCatalogOptions () # CreateDataCatalogOptions | try : api_response = api_instance . create_project_data_catalog ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_2","text":"Name Type Description Notes proj_key str options CreateDataCatalogOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_2","text":"DataCatalogue","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_2","text":"Status code Description Response headers 200 Data catalog created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#create_project_data_catalog_collection","text":"create_project_data_catalog_collection(proj_key, dc_key, body) Create a collection in a data catalog","title":"create_project_data_catalog_collection"},{"location":"apis/public/DataCatalogsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | body = deepsearch . cps . apis . public . CreateDataCatalogCollectionOptions () # CreateDataCatalogCollectionOptions | try : api_instance . create_project_data_catalog_collection ( proj_key , dc_key , body ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog_collection: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_3","text":"Name Type Description Notes proj_key str dc_key str body CreateDataCatalogCollectionOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_3","text":"Status code Description Response headers 200 Collection created. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#create_project_data_catalog_delete_token","text":"TokenResponse create_project_data_catalog_delete_token(proj_key, dc_key) Get a token used to confirm the deletion of a data catalog.","title":"create_project_data_catalog_delete_token"},{"location":"apis/public/DataCatalogsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . create_project_data_catalog_delete_token ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->create_project_data_catalog_delete_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_4","text":"Name Type Description Notes proj_key str dc_key str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_4","text":"TokenResponse","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_4","text":"Status code Description Response headers 200 Data catalog deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#delete_project_data_catalog","text":"delete_project_data_catalog(proj_key, dc_key, confirmation_token) Delete a single data catalog","title":"delete_project_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_data_catalog ( proj_key , dc_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->delete_project_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_5","text":"Name Type Description Notes proj_key str dc_key str confirmation_token str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_5","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_5","text":"Status code Description Response headers 204 Data catalog deleted. - 404 Data catalog doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#delete_project_data_catalog_collection","text":"delete_project_data_catalog_collection(proj_key, dc_key, collection_name) Delete a single data catalog's collection","title":"delete_project_data_catalog_collection"},{"location":"apis/public/DataCatalogsApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | try : api_instance . delete_project_data_catalog_collection ( proj_key , dc_key , collection_name ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->delete_project_data_catalog_collection: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_6","text":"Name Type Description Notes proj_key str dc_key str collection_name str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_6","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_6","text":"Status code Description Response headers 204 Collection deleted. - 404 Collection doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#export_dataset","text":"ProjectTask export_dataset(proj_key, bag_key, data) Export dataset from a Knowledge Graph","title":"export_dataset"},{"location":"apis/public/DataCatalogsApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . InlineObject3 () # InlineObject3 | try : api_response = api_instance . export_dataset ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_dataset: %s \\n \" % e ) Api Key Authentication (KGAuth): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . InlineObject3 () # InlineObject3 | try : api_response = api_instance . export_dataset ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_dataset: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_7","text":"Name Type Description Notes proj_key str bag_key str data InlineObject3","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_7","text":"ProjectTask","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_7","text":"Bearer , KGAuth","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_7","text":"Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#export_project_data_catalog_collection_data","text":"file export_project_data_catalog_collection_data(proj_key, dc_key, collection_name) Export the contents of a data catalog's collection","title":"export_project_data_catalog_collection_data"},{"location":"apis/public/DataCatalogsApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | try : api_response = api_instance . export_project_data_catalog_collection_data ( proj_key , dc_key , collection_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_project_data_catalog_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_8","text":"Name Type Description Notes proj_key str dc_key str collection_name str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_8","text":"file","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/zip, application/json, application/x-jsonlines","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_8","text":"Status code Description Response headers 200 Data catalog collection contents. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#export_project_data_catalog_data","text":"file export_project_data_catalog_data(proj_key, dc_key) Export the contents of a data catalog.","title":"export_project_data_catalog_data"},{"location":"apis/public/DataCatalogsApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . export_project_data_catalog_data ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->export_project_data_catalog_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_9","text":"Name Type Description Notes proj_key str dc_key str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_9","text":"file","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/zip","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_9","text":"Status code Description Response headers 200 Data catalog contents. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#get_data_catalog_collection_data","text":"get_data_catalog_collection_data(proj_key, dc_key, collection_name, after=after, limit=limit) Get Data Catalog Collection data.","title":"get_data_catalog_collection_data"},{"location":"apis/public/DataCatalogsApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_instance . get_data_catalog_collection_data ( proj_key , dc_key , collection_name , after = after , limit = limit ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_data_catalog_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_10","text":"Name Type Description Notes proj_key str dc_key str collection_name str after str [optional] limit int [optional] [default to 50]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_10","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_10","text":"Status code Description Response headers 200 Get Data Catalog Collection data. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#get_project_data_catalog","text":"DataCatalogue get_project_data_catalog(proj_key, dc_key, include_collections=include_collections) Get a single data catalogue","title":"get_project_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_data_catalog ( proj_key , dc_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_project_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_11","text":"Name Type Description Notes proj_key str dc_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_11","text":"DataCatalogue","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_11","text":"Status code Description Response headers 200 Data catalogue - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#get_public_data_catalog","text":"DataCatalogue get_public_data_catalog(dc_key, include_collections=include_collections) Get a single data catalogue that was made public","title":"get_public_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_12","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_public_data_catalog ( dc_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->get_public_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_12","text":"Name Type Description Notes dc_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_12","text":"DataCatalogue","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_12","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_12","text":"Status code Description Response headers 200 Data catalogue - 404 Data catalogue not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#import_project_data_catalog_collection_data","text":"Task import_project_data_catalog_collection_data(proj_key, dc_key, collection_name, body) Import data to a data catalog collection. The collection will be created if it doesn't exist.","title":"import_project_data_catalog_collection_data"},{"location":"apis/public/DataCatalogsApi/#example_13","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | body = deepsearch . cps . apis . public . ImportToDataCatalogCollectionOptions () # ImportToDataCatalogCollectionOptions | try : api_response = api_instance . import_project_data_catalog_collection_data ( proj_key , dc_key , collection_name , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_13","text":"Name Type Description Notes proj_key str dc_key str collection_name str body ImportToDataCatalogCollectionOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_13","text":"Task","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_13","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_13","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_13","text":"Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#import_project_data_catalog_data","text":"Task import_project_data_catalog_data(proj_key, dc_key, body) Import data to a data catalog. The collections will be created if they don't exist.","title":"import_project_data_catalog_data"},{"location":"apis/public/DataCatalogsApi/#example_14","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | body = deepsearch . cps . apis . public . ImportToDataCatalogOptions () # ImportToDataCatalogOptions | try : api_response = api_instance . import_project_data_catalog_data ( proj_key , dc_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_14","text":"Name Type Description Notes proj_key str dc_key str body ImportToDataCatalogOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_14","text":"Task","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_14","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_14","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_14","text":"Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#import_project_data_catalog_from_mongo","text":"DataCatalogImportResult import_project_data_catalog_from_mongo(proj_key, body) Create a data catalogue from a mongo database","title":"import_project_data_catalog_from_mongo"},{"location":"apis/public/DataCatalogsApi/#example_15","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DataCatalogImportOptions () # DataCatalogImportOptions | try : api_response = api_instance . import_project_data_catalog_from_mongo ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_from_mongo: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_15","text":"Name Type Description Notes proj_key str body DataCatalogImportOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_15","text":"DataCatalogImportResult","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_15","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_15","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_15","text":"Status code Description Response headers 200 Data catalogue created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#import_project_data_catalog_from_url","text":"DataCatalogImportResult import_project_data_catalog_from_url(proj_key, body) Create a data catalogue from a URL to a file","title":"import_project_data_catalog_from_url"},{"location":"apis/public/DataCatalogsApi/#example_16","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DataCatalogUrlImportOptions () # DataCatalogUrlImportOptions | try : api_response = api_instance . import_project_data_catalog_from_url ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->import_project_data_catalog_from_url: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_16","text":"Name Type Description Notes proj_key str body DataCatalogUrlImportOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_16","text":"DataCatalogImportResult","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_16","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_16","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_16","text":"Status code Description Response headers 200 Data catalogue created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#infer_project_data_catalog_category_schema","text":"Task infer_project_data_catalog_category_schema(proj_key, dc_key, collection_name, body) Infer the schema for a data catalog's collection.","title":"infer_project_data_catalog_category_schema"},{"location":"apis/public/DataCatalogsApi/#example_17","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | body = deepsearch . cps . apis . public . InferProjectDataCatalogCategorySchema () # InferProjectDataCatalogCategorySchema | try : api_response = api_instance . infer_project_data_catalog_category_schema ( proj_key , dc_key , collection_name , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->infer_project_data_catalog_category_schema: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_17","text":"Name Type Description Notes proj_key str dc_key str collection_name str body InferProjectDataCatalogCategorySchema","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_17","text":"Task","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_17","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_17","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_17","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_data_catalogs_and_collections_from_schema","text":"list[DataCatalogue] list_data_catalogs_and_collections_from_schema(schema, proj_key=proj_key) List data catalogues with specific schema","title":"list_data_catalogs_and_collections_from_schema"},{"location":"apis/public/DataCatalogsApi/#example_18","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) schema = None # dict(str, object) | proj_key = 'proj_key_example' # str | (optional) try : api_response = api_instance . list_data_catalogs_and_collections_from_schema ( schema , proj_key = proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_data_catalogs_and_collections_from_schema: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_18","text":"Name Type Description Notes schema dict(str, object) proj_key str [optional]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_18","text":"list[DataCatalogue]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_18","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_18","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_18","text":"Status code Description Response headers 200 List of data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_known_data_catalog_schemas","text":"list[DataCatalogSchema] list_known_data_catalog_schemas() List System Known Data Catalog Schemas.","title":"list_known_data_catalog_schemas"},{"location":"apis/public/DataCatalogsApi/#example_19","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) try : api_response = api_instance . list_known_data_catalog_schemas () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_known_data_catalog_schemas: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_19","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_19","text":"list[DataCatalogSchema]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_19","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_19","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_19","text":"Status code Description Response headers 200 List of Known Data Catalog Schemas. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_project_data_catalog_collections","text":"list[DataCatalogCollection] list_project_data_catalog_collections(proj_key, dc_key) Get the collections of a data catalog.","title":"list_project_data_catalog_collections"},{"location":"apis/public/DataCatalogsApi/#example_20","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | try : api_response = api_instance . list_project_data_catalog_collections ( proj_key , dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_project_data_catalog_collections: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_20","text":"Name Type Description Notes proj_key str dc_key str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_20","text":"list[DataCatalogCollection]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_20","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_20","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_20","text":"Status code Description Response headers 200 Data catalog collections - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_project_data_catalogs","text":"list[DataCatalogue] list_project_data_catalogs(proj_key, query=query) List data catalogues for a project","title":"list_project_data_catalogs"},{"location":"apis/public/DataCatalogsApi/#example_21","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_data_catalogs ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_project_data_catalogs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_21","text":"Name Type Description Notes proj_key str query str [optional]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_21","text":"list[DataCatalogue]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_21","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_21","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_21","text":"Status code Description Response headers 200 List of data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_public_data_catalog_collections","text":"list[DataCatalogCollection] list_public_data_catalog_collections(dc_key) Get the collections of a data catalog.","title":"list_public_data_catalog_collections"},{"location":"apis/public/DataCatalogsApi/#example_22","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) dc_key = 'dc_key_example' # str | try : api_response = api_instance . list_public_data_catalog_collections ( dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_public_data_catalog_collections: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_22","text":"Name Type Description Notes dc_key str","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_22","text":"list[DataCatalogCollection]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_22","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_22","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_22","text":"Status code Description Response headers 200 Data catalog collections - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#list_public_data_catalogs","text":"list[DataCatalogue] list_public_data_catalogs(query=query) List public data catalogues","title":"list_public_data_catalogs"},{"location":"apis/public/DataCatalogsApi/#example_23","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_data_catalogs ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->list_public_data_catalogs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_23","text":"Name Type Description Notes query str [optional]","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_23","text":"list[DataCatalogue]","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_23","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_23","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_23","text":"Status code Description Response headers 200 List of public data catalogues - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#patch_project_data_catalog","text":"DataCatalogue patch_project_data_catalog(proj_key, dc_key, options) Update the metadata of a data catalog.","title":"patch_project_data_catalog"},{"location":"apis/public/DataCatalogsApi/#example_24","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | options = deepsearch . cps . apis . public . PatchDataCatalogOptions () # PatchDataCatalogOptions | try : api_response = api_instance . patch_project_data_catalog ( proj_key , dc_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->patch_project_data_catalog: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_24","text":"Name Type Description Notes proj_key str dc_key str options PatchDataCatalogOptions","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_24","text":"DataCatalogue","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_24","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_24","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_24","text":"Status code Description Response headers 200 Data catalog updated. - 404 Data catalog not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#upload_project_data_catalog_collection_data","text":"Task upload_project_data_catalog_collection_data(proj_key, dc_key, collection_name, file) Upload data to a data catalog collection. The collection will be created if it doesn't exist.","title":"upload_project_data_catalog_collection_data"},{"location":"apis/public/DataCatalogsApi/#example_25","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | collection_name = 'collection_name_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_data_catalog_collection_data ( proj_key , dc_key , collection_name , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->upload_project_data_catalog_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_25","text":"Name Type Description Notes proj_key str dc_key str collection_name str file file","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_25","text":"Task","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_25","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_25","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_25","text":"Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogsApi/#upload_project_data_catalog_data","text":"Task upload_project_data_catalog_data(proj_key, dc_key, file) Upload data to a data catalog. The collection name(s) will be inferred from the file name(s).","title":"upload_project_data_catalog_data"},{"location":"apis/public/DataCatalogsApi/#example_26","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataCatalogsApi ( api_client ) proj_key = 'proj_key_example' # str | dc_key = 'dc_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_data_catalog_data ( proj_key , dc_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataCatalogsApi->upload_project_data_catalog_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataCatalogsApi/#parameters_26","text":"Name Type Description Notes proj_key str dc_key str file file","title":"Parameters"},{"location":"apis/public/DataCatalogsApi/#return-type_26","text":"Task","title":"Return type"},{"location":"apis/public/DataCatalogsApi/#authorization_26","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataCatalogsApi/#http-request-headers_26","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataCatalogsApi/#http-response-details_26","text":"Status code Description Response headers 200 Data is being processed. - 404 Data catalogue not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataCatalogue/","text":"DataCatalogue \u00b6 Properties \u00b6 Name Type Description Notes category_schemas list[DataCatalogCategorySchema] collections list[DataCatalogCollection] [optional] collections_data_flows list[DataCatalogDataFlow] copy_of str created_at float created_by str dc_key str description str name str proj_key str provenance_logs list[DataCatalogProvenanceLog] public bool topology DataCatalogTopology [Back to Model list] [Back to API list] [Back to README]","title":"DataCatalogue"},{"location":"apis/public/DataCatalogue/#datacatalogue","text":"","title":"DataCatalogue"},{"location":"apis/public/DataCatalogue/#properties","text":"Name Type Description Notes category_schemas list[DataCatalogCategorySchema] collections list[DataCatalogCollection] [optional] collections_data_flows list[DataCatalogDataFlow] copy_of str created_at float created_by str dc_key str description str name str proj_key str provenance_logs list[DataCatalogProvenanceLog] public bool topology DataCatalogTopology [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCollection/","text":"DataCollection \u00b6 Properties \u00b6 Name Type Description Notes documents float health str metadata DataCollectionMetadata name str source DataCollectionSource [optional] status str [Back to Model list] [Back to API list] [Back to README]","title":"DataCollection"},{"location":"apis/public/DataCollection/#datacollection","text":"","title":"DataCollection"},{"location":"apis/public/DataCollection/#properties","text":"Name Type Description Notes documents float health str metadata DataCollectionMetadata name str source DataCollectionSource [optional] status str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCollectionMetadata/","text":"DataCollectionMetadata \u00b6 Properties \u00b6 Name Type Description Notes aliases list[str] created str description str domain list[str] source str storage str [optional] type str version str [Back to Model list] [Back to API list] [Back to README]","title":"DataCollectionMetadata"},{"location":"apis/public/DataCollectionMetadata/#datacollectionmetadata","text":"","title":"DataCollectionMetadata"},{"location":"apis/public/DataCollectionMetadata/#properties","text":"Name Type Description Notes aliases list[str] created str description str domain list[str] source str storage str [optional] type str version str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataCollectionSource/","text":"DataCollectionSource \u00b6 Properties \u00b6 Name Type Description Notes elastic_id str [optional] index_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataCollectionSource"},{"location":"apis/public/DataCollectionSource/#datacollectionsource","text":"","title":"DataCollectionSource"},{"location":"apis/public/DataCollectionSource/#properties","text":"Name Type Description Notes elastic_id str [optional] index_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlow/","text":"DataFlow \u00b6 Properties \u00b6 Name Type Description Notes created_at float [optional] description str [optional] df_tpl_key str [optional] name str [optional] proj_key str [optional] public bool [optional] template object [optional] updated_at float [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlow"},{"location":"apis/public/DataFlow/#dataflow","text":"","title":"DataFlow"},{"location":"apis/public/DataFlow/#properties","text":"Name Type Description Notes created_at float [optional] description str [optional] df_tpl_key str [optional] name str [optional] proj_key str [optional] public bool [optional] template object [optional] updated_at float [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleIntoKnowledgeGraphTask/","text":"DataFlowAssembleIntoKnowledgeGraphTask \u00b6 Properties \u00b6 Name Type Description Notes data_flow ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleIntoKnowledgeGraphTask"},{"location":"apis/public/DataFlowAssembleIntoKnowledgeGraphTask/#dataflowassembleintoknowledgegraphtask","text":"","title":"DataFlowAssembleIntoKnowledgeGraphTask"},{"location":"apis/public/DataFlowAssembleIntoKnowledgeGraphTask/#properties","text":"Name Type Description Notes data_flow ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReport/","text":"DataFlowAssembleReport \u00b6 Properties \u00b6 Name Type Description Notes dataflow_tasks dict(str, DataFlowAssembleReportSingleTask) [optional] task_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReport"},{"location":"apis/public/DataFlowAssembleReport/#dataflowassemblereport","text":"","title":"DataFlowAssembleReport"},{"location":"apis/public/DataFlowAssembleReport/#properties","text":"Name Type Description Notes dataflow_tasks dict(str, DataFlowAssembleReportSingleTask) [optional] task_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReportCause/","text":"DataFlowAssembleReportCause \u00b6 Properties \u00b6 Name Type Description Notes type str [optional] value object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReportCause"},{"location":"apis/public/DataFlowAssembleReportCause/#dataflowassemblereportcause","text":"","title":"DataFlowAssembleReportCause"},{"location":"apis/public/DataFlowAssembleReportCause/#properties","text":"Name Type Description Notes type str [optional] value object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReportChunks/","text":"DataFlowAssembleReportChunks \u00b6 Properties \u00b6 Name Type Description Notes completed int [optional] failure int [optional] spawned int [optional] success int [optional] total int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReportChunks"},{"location":"apis/public/DataFlowAssembleReportChunks/#dataflowassemblereportchunks","text":"","title":"DataFlowAssembleReportChunks"},{"location":"apis/public/DataFlowAssembleReportChunks/#properties","text":"Name Type Description Notes completed int [optional] failure int [optional] spawned int [optional] success int [optional] total int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReportErrors/","text":"DataFlowAssembleReportErrors \u00b6 Properties \u00b6 Name Type Description Notes cause DataFlowAssembleReportCause [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReportErrors"},{"location":"apis/public/DataFlowAssembleReportErrors/#dataflowassemblereporterrors","text":"","title":"DataFlowAssembleReportErrors"},{"location":"apis/public/DataFlowAssembleReportErrors/#properties","text":"Name Type Description Notes cause DataFlowAssembleReportCause [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReportOptions/","text":"DataFlowAssembleReportOptions \u00b6 Properties \u00b6 Name Type Description Notes event_log_level str [optional] [default to 'error'] max_errors int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReportOptions"},{"location":"apis/public/DataFlowAssembleReportOptions/#dataflowassemblereportoptions","text":"","title":"DataFlowAssembleReportOptions"},{"location":"apis/public/DataFlowAssembleReportOptions/#properties","text":"Name Type Description Notes event_log_level str [optional] [default to 'error'] max_errors int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowAssembleReportSingleTask/","text":"DataFlowAssembleReportSingleTask \u00b6 Properties \u00b6 Name Type Description Notes chunks DataFlowAssembleReportChunks [optional] errors list[DataFlowAssembleReportErrors] [optional] progress float [optional] status str [optional] task_type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowAssembleReportSingleTask"},{"location":"apis/public/DataFlowAssembleReportSingleTask/#dataflowassemblereportsingletask","text":"","title":"DataFlowAssembleReportSingleTask"},{"location":"apis/public/DataFlowAssembleReportSingleTask/#properties","text":"Name Type Description Notes chunks DataFlowAssembleReportChunks [optional] errors list[DataFlowAssembleReportErrors] [optional] progress float [optional] status str [optional] task_type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowLoadIntoKnowledgeGraphTask/","text":"DataFlowLoadIntoKnowledgeGraphTask \u00b6 Properties \u00b6 Name Type Description Notes data_flow ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow [optional] save object [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowLoadIntoKnowledgeGraphTask"},{"location":"apis/public/DataFlowLoadIntoKnowledgeGraphTask/#dataflowloadintoknowledgegraphtask","text":"","title":"DataFlowLoadIntoKnowledgeGraphTask"},{"location":"apis/public/DataFlowLoadIntoKnowledgeGraphTask/#properties","text":"Name Type Description Notes data_flow ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow [optional] save object [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowTemplate/","text":"DataFlowTemplate \u00b6 Properties \u00b6 Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowTemplate"},{"location":"apis/public/DataFlowTemplate/#dataflowtemplate","text":"","title":"DataFlowTemplate"},{"location":"apis/public/DataFlowTemplate/#properties","text":"Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowTemplateListItem/","text":"DataFlowTemplateListItem \u00b6 Properties \u00b6 Name Type Description Notes created_at float [optional] description str [optional] df_tpl_key str [optional] name str [optional] proj_key str [optional] public bool [optional] updated_at float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowTemplateListItem"},{"location":"apis/public/DataFlowTemplateListItem/#dataflowtemplatelistitem","text":"","title":"DataFlowTemplateListItem"},{"location":"apis/public/DataFlowTemplateListItem/#properties","text":"Name Type Description Notes created_at float [optional] description str [optional] df_tpl_key str [optional] name str [optional] proj_key str [optional] public bool [optional] updated_at float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowTemplateVariable/","text":"DataFlowTemplateVariable \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowTemplateVariable"},{"location":"apis/public/DataFlowTemplateVariable/#dataflowtemplatevariable","text":"","title":"DataFlowTemplateVariable"},{"location":"apis/public/DataFlowTemplateVariable/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowTopologyOptions/","text":"DataFlowTopologyOptions \u00b6 Properties \u00b6 Name Type Description Notes variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFlowTopologyOptions"},{"location":"apis/public/DataFlowTopologyOptions/#dataflowtopologyoptions","text":"","title":"DataFlowTopologyOptions"},{"location":"apis/public/DataFlowTopologyOptions/#properties","text":"Name Type Description Notes variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataFlowsApi/","text":"deepsearch.cps.apis.public.DataFlowsApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description assemble_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/run assemble_project_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/run assemble_project_raw_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/raw_dataflow_templates/actions/run create_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates create_project_data_flow_template_delete_token POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/delete_token create_project_knowledge_graph_assemble_report POST /project/{proj_key}/dataset_assembles/{task_id}/report debug_project_data_flow_template POST /project/{proj_key}/kgc_dataflow_templates/debug/{df_tpl_key} delete_project_data_flow_template DELETE /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} export_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/export.json export_public_data_flow_template POST /project/public/kgc/dataflow_templates/{df_tpl_key}/export.json get_project_data_flow GET /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} get_project_data_flow_template_topology POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/topology get_public_data_flow_template GET /project/public/kgc/dataflow_templates/{df_tpl_key} list_project_data_flow_templates GET /project/{proj_key}/kgc/dataflow_templates list_public_data_flow_templates GET /project/public/kgc/dataflow_templates load_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/load load_project_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/load render_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/render update_project_data_flow_template PUT /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} upload_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/from_json validate_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/validate assemble_project_data_flow \u00b6 Task assemble_project_data_flow(proj_key, dataflow) Run a dataflow Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | dataflow = deepsearch . cps . apis . public . KgcDataInput () # KgcDataInput | try : api_response = api_instance . assemble_project_data_flow ( proj_key , dataflow ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dataflow KgcDataInput Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - [Back to top] [Back to API list] [Back to Model list] [Back to README] assemble_project_data_flow_template_into_knowledge_graph \u00b6 Task assemble_project_data_flow_template_into_knowledge_graph(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and run it. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . RunDataFlowTemplateOptions () # RunDataFlowTemplateOptions | try : api_response = api_instance . assemble_project_data_flow_template_into_knowledge_graph ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_data_flow_template_into_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options RunDataFlowTemplateOptions Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] assemble_project_raw_data_flow_template_into_knowledge_graph \u00b6 Task assemble_project_raw_data_flow_template_into_knowledge_graph(proj_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and run it. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . RunDataFlowTemplateOptions1 () # RunDataFlowTemplateOptions1 | try : api_response = api_instance . assemble_project_raw_data_flow_template_into_knowledge_graph ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_raw_data_flow_template_into_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options RunDataFlowTemplateOptions1 Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_flow_template \u00b6 DataFlow create_project_data_flow_template(proj_key, options) Create a data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . CreateDataFlowTemplateOptions () # CreateDataFlowTemplateOptions | try : api_response = api_instance . create_project_data_flow_template ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options CreateDataFlowTemplateOptions Return type \u00b6 DataFlow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dataflow created. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_flow_template_delete_token \u00b6 TokenResponse create_project_data_flow_template_delete_token(proj_key, df_tpl_key) Get a token used to confirm the deletion of a data flow template. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . create_project_data_flow_template_delete_token ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_data_flow_template_delete_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data flow deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_assemble_report \u00b6 DataFlowAssembleReport create_project_knowledge_graph_assemble_report(proj_key, task_id, options) Create a report for a data flow task assemble. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | options = deepsearch . cps . apis . public . DataFlowAssembleReportOptions () # DataFlowAssembleReportOptions | try : api_response = api_instance . create_project_knowledge_graph_assemble_report ( proj_key , task_id , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_knowledge_graph_assemble_report: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str options DataFlowAssembleReportOptions Return type \u00b6 DataFlowAssembleReport Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Report. - 404 Task not found, or is not a data flow assemble. - [Back to top] [Back to API list] [Back to Model list] [Back to README] debug_project_data_flow_template \u00b6 object debug_project_data_flow_template(proj_key, df_tpl_key, options) (Debug) get the fully rendered data flow, with all the coordinates set. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . FullyRenderedDataFlow () # FullyRenderedDataFlow | try : api_response = api_instance . debug_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->debug_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options FullyRenderedDataFlow Return type \u00b6 object Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Rendered data flow. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_data_flow_template \u00b6 delete_project_data_flow_template(proj_key, df_tpl_key, confirmation_token) Delete a single data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_data_flow_template ( proj_key , df_tpl_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->delete_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str confirmation_token str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Data flow deleted. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_project_data_flow_template \u00b6 file export_project_data_flow_template(proj_key, df_tpl_key) Export a single data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . export_project_data_flow_template ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->export_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/vnd.ibm.cps.df-template+json HTTP response details \u00b6 Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_public_data_flow_template \u00b6 file export_public_data_flow_template(df_tpl_key) Export a single public data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . export_public_data_flow_template ( df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->export_public_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes df_tpl_key str Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/vnd.ibm.cps.df-template+json HTTP response details \u00b6 Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_flow \u00b6 DataFlow get_project_data_flow(proj_key, df_tpl_key) Get a single data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . get_project_data_flow ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_project_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str Return type \u00b6 DataFlow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_flow_template_topology \u00b6 Topology get_project_data_flow_template_topology(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and get the resulting Knowledge Graph topology from it. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . DataFlowTopologyOptions () # DataFlowTopologyOptions | try : api_response = api_instance . get_project_data_flow_template_topology ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_project_data_flow_template_topology: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options DataFlowTopologyOptions Return type \u00b6 Topology Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data flow topology. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_public_data_flow_template \u00b6 DataFlow get_public_data_flow_template(df_tpl_key) Get a single data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . get_public_data_flow_template ( df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_public_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes df_tpl_key str Return type \u00b6 DataFlow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data flow. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_data_flow_templates \u00b6 list[DataFlowTemplateListItem] list_project_data_flow_templates(proj_key, query=query) List a data flow templates Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_data_flow_templates ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->list_project_data_flow_templates: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str query str [optional] Return type \u00b6 list[DataFlowTemplateListItem] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of data flow templates. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_data_flow_templates \u00b6 list[DataFlowTemplateListItem] list_public_data_flow_templates(query=query) List public data flow templates Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_data_flow_templates ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->list_public_data_flow_templates: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes query str [optional] Return type \u00b6 list[DataFlowTemplateListItem] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of data flow templates. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] load_project_data_flow \u00b6 Task load_project_data_flow(proj_key, options) Load a dataflow into a KG Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . LoadKgcDataInput () # LoadKgcDataInput | try : api_response = api_instance . load_project_data_flow ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->load_project_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str options LoadKgcDataInput Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - [Back to top] [Back to API list] [Back to Model list] [Back to README] load_project_data_flow_template_into_knowledge_graph \u00b6 Task load_project_data_flow_template_into_knowledge_graph(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and load it into a Knowledge Graph. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . LoadDataFlowIntoKnowledgeGraphOptions1 () # LoadDataFlowIntoKnowledgeGraphOptions1 | try : api_response = api_instance . load_project_data_flow_template_into_knowledge_graph ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->load_project_data_flow_template_into_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options LoadDataFlowIntoKnowledgeGraphOptions1 Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] render_project_data_flow_template \u00b6 object render_project_data_flow_template(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . RenderDataFlowTemplateOptions () # RenderDataFlowTemplateOptions | try : api_response = api_instance . render_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->render_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options RenderDataFlowTemplateOptions Return type \u00b6 object Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Rendered data flow - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_data_flow_template \u00b6 DataFlow update_project_data_flow_template(proj_key, df_tpl_key, options) Update a data flow template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . UpdateDataFlowOptions () # UpdateDataFlowOptions | try : api_response = api_instance . update_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->update_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str df_tpl_key str options UpdateDataFlowOptions Return type \u00b6 DataFlow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dataflow updated. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_data_flow_template \u00b6 DataFlow upload_project_data_flow_template(proj_key, contents, name=name, description=description, public=public) Create a data flow template from a JSON file. DEPRECATED : use create_project_data_flow_template Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | contents = '/path/to/file' # file | name = 'name_example' # str | (optional) description = 'description_example' # str | (optional) public = True # bool | (optional) try : api_response = api_instance . upload_project_data_flow_template ( proj_key , contents , name = name , description = description , public = public ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->upload_project_data_flow_template: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str contents file name str [optional] description str [optional] public bool [optional] Return type \u00b6 DataFlow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dataflow created. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] validate_project_data_flow \u00b6 validate_project_data_flow(proj_key, dataflow) Validate a dataflow Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | dataflow = deepsearch . cps . apis . public . KgcDataInput () # KgcDataInput | try : api_instance . validate_project_data_flow ( proj_key , dataflow ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->validate_project_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dataflow KgcDataInput Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Validation successful. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.DataFlowsApi"},{"location":"apis/public/DataFlowsApi/#deepsearchcpsapispublicdataflowsapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description assemble_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/run assemble_project_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/run assemble_project_raw_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/raw_dataflow_templates/actions/run create_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates create_project_data_flow_template_delete_token POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/delete_token create_project_knowledge_graph_assemble_report POST /project/{proj_key}/dataset_assembles/{task_id}/report debug_project_data_flow_template POST /project/{proj_key}/kgc_dataflow_templates/debug/{df_tpl_key} delete_project_data_flow_template DELETE /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} export_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/export.json export_public_data_flow_template POST /project/public/kgc/dataflow_templates/{df_tpl_key}/export.json get_project_data_flow GET /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} get_project_data_flow_template_topology POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/topology get_public_data_flow_template GET /project/public/kgc/dataflow_templates/{df_tpl_key} list_project_data_flow_templates GET /project/{proj_key}/kgc/dataflow_templates list_public_data_flow_templates GET /project/public/kgc/dataflow_templates load_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/load load_project_data_flow_template_into_knowledge_graph POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/load render_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key}/actions/render update_project_data_flow_template PUT /project/{proj_key}/kgc/dataflow_templates/{df_tpl_key} upload_project_data_flow_template POST /project/{proj_key}/kgc/dataflow_templates/from_json validate_project_data_flow POST /project/{proj_key}/kgc/dataflows/actions/validate","title":"deepsearch.cps.apis.public.DataFlowsApi"},{"location":"apis/public/DataFlowsApi/#assemble_project_data_flow","text":"Task assemble_project_data_flow(proj_key, dataflow) Run a dataflow","title":"assemble_project_data_flow"},{"location":"apis/public/DataFlowsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | dataflow = deepsearch . cps . apis . public . KgcDataInput () # KgcDataInput | try : api_response = api_instance . assemble_project_data_flow ( proj_key , dataflow ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters","text":"Name Type Description Notes proj_key str dataflow KgcDataInput","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type","text":"Task","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#assemble_project_data_flow_template_into_knowledge_graph","text":"Task assemble_project_data_flow_template_into_knowledge_graph(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and run it.","title":"assemble_project_data_flow_template_into_knowledge_graph"},{"location":"apis/public/DataFlowsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . RunDataFlowTemplateOptions () # RunDataFlowTemplateOptions | try : api_response = api_instance . assemble_project_data_flow_template_into_knowledge_graph ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_data_flow_template_into_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_1","text":"Name Type Description Notes proj_key str df_tpl_key str options RunDataFlowTemplateOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_1","text":"Task","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_1","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#assemble_project_raw_data_flow_template_into_knowledge_graph","text":"Task assemble_project_raw_data_flow_template_into_knowledge_graph(proj_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and run it.","title":"assemble_project_raw_data_flow_template_into_knowledge_graph"},{"location":"apis/public/DataFlowsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . RunDataFlowTemplateOptions1 () # RunDataFlowTemplateOptions1 | try : api_response = api_instance . assemble_project_raw_data_flow_template_into_knowledge_graph ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->assemble_project_raw_data_flow_template_into_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_2","text":"Name Type Description Notes proj_key str options RunDataFlowTemplateOptions1","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_2","text":"Task","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_2","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#create_project_data_flow_template","text":"DataFlow create_project_data_flow_template(proj_key, options) Create a data flow template","title":"create_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . CreateDataFlowTemplateOptions () # CreateDataFlowTemplateOptions | try : api_response = api_instance . create_project_data_flow_template ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_3","text":"Name Type Description Notes proj_key str options CreateDataFlowTemplateOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_3","text":"DataFlow","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_3","text":"Status code Description Response headers 200 Dataflow created. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#create_project_data_flow_template_delete_token","text":"TokenResponse create_project_data_flow_template_delete_token(proj_key, df_tpl_key) Get a token used to confirm the deletion of a data flow template.","title":"create_project_data_flow_template_delete_token"},{"location":"apis/public/DataFlowsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . create_project_data_flow_template_delete_token ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_data_flow_template_delete_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_4","text":"Name Type Description Notes proj_key str df_tpl_key str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_4","text":"TokenResponse","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_4","text":"Status code Description Response headers 200 Data flow deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#create_project_knowledge_graph_assemble_report","text":"DataFlowAssembleReport create_project_knowledge_graph_assemble_report(proj_key, task_id, options) Create a report for a data flow task assemble.","title":"create_project_knowledge_graph_assemble_report"},{"location":"apis/public/DataFlowsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | options = deepsearch . cps . apis . public . DataFlowAssembleReportOptions () # DataFlowAssembleReportOptions | try : api_response = api_instance . create_project_knowledge_graph_assemble_report ( proj_key , task_id , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->create_project_knowledge_graph_assemble_report: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_5","text":"Name Type Description Notes proj_key str task_id str options DataFlowAssembleReportOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_5","text":"DataFlowAssembleReport","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_5","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_5","text":"Status code Description Response headers 200 Report. - 404 Task not found, or is not a data flow assemble. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#debug_project_data_flow_template","text":"object debug_project_data_flow_template(proj_key, df_tpl_key, options) (Debug) get the fully rendered data flow, with all the coordinates set.","title":"debug_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . FullyRenderedDataFlow () # FullyRenderedDataFlow | try : api_response = api_instance . debug_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->debug_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_6","text":"Name Type Description Notes proj_key str df_tpl_key str options FullyRenderedDataFlow","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_6","text":"object","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_6","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_6","text":"Status code Description Response headers 200 Rendered data flow. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#delete_project_data_flow_template","text":"delete_project_data_flow_template(proj_key, df_tpl_key, confirmation_token) Delete a single data flow template","title":"delete_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_data_flow_template ( proj_key , df_tpl_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->delete_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_7","text":"Name Type Description Notes proj_key str df_tpl_key str confirmation_token str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_7","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_7","text":"Status code Description Response headers 204 Data flow deleted. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#export_project_data_flow_template","text":"file export_project_data_flow_template(proj_key, df_tpl_key) Export a single data flow template","title":"export_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . export_project_data_flow_template ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->export_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_8","text":"Name Type Description Notes proj_key str df_tpl_key str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_8","text":"file","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/vnd.ibm.cps.df-template+json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_8","text":"Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#export_public_data_flow_template","text":"file export_public_data_flow_template(df_tpl_key) Export a single public data flow template","title":"export_public_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . export_public_data_flow_template ( df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->export_public_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_9","text":"Name Type Description Notes df_tpl_key str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_9","text":"file","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/vnd.ibm.cps.df-template+json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_9","text":"Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#get_project_data_flow","text":"DataFlow get_project_data_flow(proj_key, df_tpl_key) Get a single data flow template","title":"get_project_data_flow"},{"location":"apis/public/DataFlowsApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . get_project_data_flow ( proj_key , df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_project_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_10","text":"Name Type Description Notes proj_key str df_tpl_key str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_10","text":"DataFlow","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_10","text":"Status code Description Response headers 200 Data flow template. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#get_project_data_flow_template_topology","text":"Topology get_project_data_flow_template_topology(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and get the resulting Knowledge Graph topology from it.","title":"get_project_data_flow_template_topology"},{"location":"apis/public/DataFlowsApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . DataFlowTopologyOptions () # DataFlowTopologyOptions | try : api_response = api_instance . get_project_data_flow_template_topology ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_project_data_flow_template_topology: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_11","text":"Name Type Description Notes proj_key str df_tpl_key str options DataFlowTopologyOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_11","text":"Topology","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_11","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_11","text":"Status code Description Response headers 200 Data flow topology. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#get_public_data_flow_template","text":"DataFlow get_public_data_flow_template(df_tpl_key) Get a single data flow template","title":"get_public_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_12","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) df_tpl_key = 'df_tpl_key_example' # str | try : api_response = api_instance . get_public_data_flow_template ( df_tpl_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->get_public_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_12","text":"Name Type Description Notes df_tpl_key str","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_12","text":"DataFlow","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_12","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_12","text":"Status code Description Response headers 200 Data flow. - 404 Data flow template doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#list_project_data_flow_templates","text":"list[DataFlowTemplateListItem] list_project_data_flow_templates(proj_key, query=query) List a data flow templates","title":"list_project_data_flow_templates"},{"location":"apis/public/DataFlowsApi/#example_13","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_data_flow_templates ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->list_project_data_flow_templates: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_13","text":"Name Type Description Notes proj_key str query str [optional]","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_13","text":"list[DataFlowTemplateListItem]","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_13","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_13","text":"Status code Description Response headers 200 List of data flow templates. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#list_public_data_flow_templates","text":"list[DataFlowTemplateListItem] list_public_data_flow_templates(query=query) List public data flow templates","title":"list_public_data_flow_templates"},{"location":"apis/public/DataFlowsApi/#example_14","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_data_flow_templates ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->list_public_data_flow_templates: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_14","text":"Name Type Description Notes query str [optional]","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_14","text":"list[DataFlowTemplateListItem]","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_14","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_14","text":"Status code Description Response headers 200 List of data flow templates. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#load_project_data_flow","text":"Task load_project_data_flow(proj_key, options) Load a dataflow into a KG","title":"load_project_data_flow"},{"location":"apis/public/DataFlowsApi/#example_15","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | options = deepsearch . cps . apis . public . LoadKgcDataInput () # LoadKgcDataInput | try : api_response = api_instance . load_project_data_flow ( proj_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->load_project_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_15","text":"Name Type Description Notes proj_key str options LoadKgcDataInput","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_15","text":"Task","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_15","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_15","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_15","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#load_project_data_flow_template_into_knowledge_graph","text":"Task load_project_data_flow_template_into_knowledge_graph(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values and load it into a Knowledge Graph.","title":"load_project_data_flow_template_into_knowledge_graph"},{"location":"apis/public/DataFlowsApi/#example_16","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . LoadDataFlowIntoKnowledgeGraphOptions1 () # LoadDataFlowIntoKnowledgeGraphOptions1 | try : api_response = api_instance . load_project_data_flow_template_into_knowledge_graph ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->load_project_data_flow_template_into_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_16","text":"Name Type Description Notes proj_key str df_tpl_key str options LoadDataFlowIntoKnowledgeGraphOptions1","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_16","text":"Task","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_16","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_16","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_16","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#render_project_data_flow_template","text":"object render_project_data_flow_template(proj_key, df_tpl_key, options) Render a single data flow template, replacing the variable placeholders by their actual values.","title":"render_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_17","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . RenderDataFlowTemplateOptions () # RenderDataFlowTemplateOptions | try : api_response = api_instance . render_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->render_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_17","text":"Name Type Description Notes proj_key str df_tpl_key str options RenderDataFlowTemplateOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_17","text":"object","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_17","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_17","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_17","text":"Status code Description Response headers 200 Rendered data flow - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#update_project_data_flow_template","text":"DataFlow update_project_data_flow_template(proj_key, df_tpl_key, options) Update a data flow template","title":"update_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_18","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | df_tpl_key = 'df_tpl_key_example' # str | options = deepsearch . cps . apis . public . UpdateDataFlowOptions () # UpdateDataFlowOptions | try : api_response = api_instance . update_project_data_flow_template ( proj_key , df_tpl_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->update_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_18","text":"Name Type Description Notes proj_key str df_tpl_key str options UpdateDataFlowOptions","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_18","text":"DataFlow","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_18","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_18","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_18","text":"Status code Description Response headers 200 Dataflow updated. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#upload_project_data_flow_template","text":"DataFlow upload_project_data_flow_template(proj_key, contents, name=name, description=description, public=public) Create a data flow template from a JSON file. DEPRECATED : use create_project_data_flow_template","title":"upload_project_data_flow_template"},{"location":"apis/public/DataFlowsApi/#example_19","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | contents = '/path/to/file' # file | name = 'name_example' # str | (optional) description = 'description_example' # str | (optional) public = True # bool | (optional) try : api_response = api_instance . upload_project_data_flow_template ( proj_key , contents , name = name , description = description , public = public ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->upload_project_data_flow_template: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_19","text":"Name Type Description Notes proj_key str contents file name str [optional] description str [optional] public bool [optional]","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_19","text":"DataFlow","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_19","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_19","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_19","text":"Status code Description Response headers 200 Dataflow created. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataFlowsApi/#validate_project_data_flow","text":"validate_project_data_flow(proj_key, dataflow) Validate a dataflow","title":"validate_project_data_flow"},{"location":"apis/public/DataFlowsApi/#example_20","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataFlowsApi ( api_client ) proj_key = 'proj_key_example' # str | dataflow = deepsearch . cps . apis . public . KgcDataInput () # KgcDataInput | try : api_instance . validate_project_data_flow ( proj_key , dataflow ) except ApiException as e : print ( \"Exception when calling DataFlowsApi->validate_project_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataFlowsApi/#parameters_20","text":"Name Type Description Notes proj_key str dataflow KgcDataInput","title":"Parameters"},{"location":"apis/public/DataFlowsApi/#return-type_20","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataFlowsApi/#authorization_20","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataFlowsApi/#http-request-headers_20","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataFlowsApi/#http-response-details_20","text":"Status code Description Response headers 200 Validation successful. - 400 Invalid dataflow. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndexUploadFileSource/","text":"DataIndexUploadFileSource \u00b6 Properties \u00b6 Name Type Description Notes file_url str File URL to be converted and uploaded to the data index [optional] scratch_files_id list[str] List of CCS's scratch files id to be converted and uploaded to the data index [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataIndexUploadFileSource"},{"location":"apis/public/DataIndexUploadFileSource/#dataindexuploadfilesource","text":"","title":"DataIndexUploadFileSource"},{"location":"apis/public/DataIndexUploadFileSource/#properties","text":"Name Type Description Notes file_url str File URL to be converted and uploaded to the data index [optional] scratch_files_id list[str] List of CCS's scratch files id to be converted and uploaded to the data index [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DataIndicesApi/","text":"deepsearch.cps.apis.public.DataIndicesApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description ccs_convert_upload_file_project_data_index POST /project/{proj_key}/data_indices/{index_key}/actions/ccs_convert_upload create_project_data_index POST /project/{proj_key}/data_indices create_project_data_index_delete_token POST /project/{proj_key}/data_indices/{index_key}/delete_token delete_project_data_index DELETE /project/{proj_key}/data_indices/{index_key} get_project_data_index GET /project/{proj_key}/data_indices/{index_key} get_project_data_indices GET /project/{proj_key}/data_indices search_project_data_index POST /project/{proj_key}/data_indices/{index_key}/search update_project_data_index PATCH /project/{proj_key}/data_indices/{index_key} upload_project_data_index_file POST /project/{proj_key}/data_indices/{index_key}/actions/upload ccs_convert_upload_file_project_data_index \u00b6 CcsTask ccs_convert_upload_file_project_data_index(proj_key, index_key, body) Convert files via CCS and upload to a project data index (only for indices with 'deepsearch-doc' schema) Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | body = deepsearch . cps . apis . public . DataIndexUploadFileSource () # DataIndexUploadFileSource | try : api_response = api_instance . ccs_convert_upload_file_project_data_index ( proj_key , index_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->ccs_convert_upload_file_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str body DataIndexUploadFileSource Return type \u00b6 CcsTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 CCS task info - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_index \u00b6 ProjectDataIndexWithStatus create_project_data_index(proj_key, data) Create a project data index Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | data = None # object | try : api_response = api_instance . create_project_data_index ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->create_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str data object Return type \u00b6 ProjectDataIndexWithStatus Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_data_index_delete_token \u00b6 TokenResponse create_project_data_index_delete_token(proj_key, index_key) Get a token used to confirm the deletion of a project data index. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | try : api_response = api_instance . create_project_data_index_delete_token ( proj_key , index_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->create_project_data_index_delete_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project data index deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_data_index \u00b6 delete_project_data_index(proj_key, index_key, confirmation_token) Delete a project index data Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | confirmation_token = 'confirmation_token_example' # str | The delete confirmation token try : api_instance . delete_project_data_index ( proj_key , index_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->delete_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str confirmation_token str The delete confirmation token Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project data index deleted successfully. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_index \u00b6 ProjectDataIndexWithStatus get_project_data_index(proj_key, index_key) Get project data index Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | try : api_response = api_instance . get_project_data_index ( proj_key , index_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->get_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str Return type \u00b6 ProjectDataIndexWithStatus Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_indices \u00b6 list[ProjectDataIndexWithStatus] get_project_data_indices(proj_key) Get project data indices Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_data_indices ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->get_project_data_indices: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 list[ProjectDataIndexWithStatus] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project data indices. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] search_project_data_index \u00b6 ElasticIndexSearchResults search_project_data_index(proj_key, index_key, parameters) Search a project data index Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | parameters = None # dict(str, object) | try : api_response = api_instance . search_project_data_index ( proj_key , index_key , parameters ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->search_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str parameters dict(str, object) Return type \u00b6 ElasticIndexSearchResults Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List project data index search results - 404 Project data indices search not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_data_index \u00b6 ProjectDataIndexWithStatus update_project_data_index(proj_key, index_key, data) Update a project data index Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | data = None # object | try : api_response = api_instance . update_project_data_index ( proj_key , index_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->update_project_data_index: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str data object Return type \u00b6 ProjectDataIndexWithStatus Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Updated project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_data_index_file \u00b6 upload_project_data_index_file(proj_key, index_key, file) Upload a file to a project data index Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | file = '/path/to/file' # file | try : api_instance . upload_project_data_index_file ( proj_key , index_key , file ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->upload_project_data_index_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str index_key str file file Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 File uploaded successfully - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.DataIndicesApi"},{"location":"apis/public/DataIndicesApi/#deepsearchcpsapispublicdataindicesapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description ccs_convert_upload_file_project_data_index POST /project/{proj_key}/data_indices/{index_key}/actions/ccs_convert_upload create_project_data_index POST /project/{proj_key}/data_indices create_project_data_index_delete_token POST /project/{proj_key}/data_indices/{index_key}/delete_token delete_project_data_index DELETE /project/{proj_key}/data_indices/{index_key} get_project_data_index GET /project/{proj_key}/data_indices/{index_key} get_project_data_indices GET /project/{proj_key}/data_indices search_project_data_index POST /project/{proj_key}/data_indices/{index_key}/search update_project_data_index PATCH /project/{proj_key}/data_indices/{index_key} upload_project_data_index_file POST /project/{proj_key}/data_indices/{index_key}/actions/upload","title":"deepsearch.cps.apis.public.DataIndicesApi"},{"location":"apis/public/DataIndicesApi/#ccs_convert_upload_file_project_data_index","text":"CcsTask ccs_convert_upload_file_project_data_index(proj_key, index_key, body) Convert files via CCS and upload to a project data index (only for indices with 'deepsearch-doc' schema)","title":"ccs_convert_upload_file_project_data_index"},{"location":"apis/public/DataIndicesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | body = deepsearch . cps . apis . public . DataIndexUploadFileSource () # DataIndexUploadFileSource | try : api_response = api_instance . ccs_convert_upload_file_project_data_index ( proj_key , index_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->ccs_convert_upload_file_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters","text":"Name Type Description Notes proj_key str index_key str body DataIndexUploadFileSource","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type","text":"CcsTask","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details","text":"Status code Description Response headers 200 CCS task info - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#create_project_data_index","text":"ProjectDataIndexWithStatus create_project_data_index(proj_key, data) Create a project data index","title":"create_project_data_index"},{"location":"apis/public/DataIndicesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | data = None # object | try : api_response = api_instance . create_project_data_index ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->create_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_1","text":"Name Type Description Notes proj_key str data object","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_1","text":"ProjectDataIndexWithStatus","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_1","text":"Status code Description Response headers 200 Project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#create_project_data_index_delete_token","text":"TokenResponse create_project_data_index_delete_token(proj_key, index_key) Get a token used to confirm the deletion of a project data index.","title":"create_project_data_index_delete_token"},{"location":"apis/public/DataIndicesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | try : api_response = api_instance . create_project_data_index_delete_token ( proj_key , index_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->create_project_data_index_delete_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_2","text":"Name Type Description Notes proj_key str index_key str","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_2","text":"TokenResponse","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_2","text":"Status code Description Response headers 200 Project data index deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#delete_project_data_index","text":"delete_project_data_index(proj_key, index_key, confirmation_token) Delete a project index data","title":"delete_project_data_index"},{"location":"apis/public/DataIndicesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | confirmation_token = 'confirmation_token_example' # str | The delete confirmation token try : api_instance . delete_project_data_index ( proj_key , index_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->delete_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_3","text":"Name Type Description Notes proj_key str index_key str confirmation_token str The delete confirmation token","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_3","text":"Status code Description Response headers 200 Project data index deleted successfully. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#get_project_data_index","text":"ProjectDataIndexWithStatus get_project_data_index(proj_key, index_key) Get project data index","title":"get_project_data_index"},{"location":"apis/public/DataIndicesApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | try : api_response = api_instance . get_project_data_index ( proj_key , index_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->get_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_4","text":"Name Type Description Notes proj_key str index_key str","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_4","text":"ProjectDataIndexWithStatus","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_4","text":"Status code Description Response headers 200 Project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#get_project_data_indices","text":"list[ProjectDataIndexWithStatus] get_project_data_indices(proj_key) Get project data indices","title":"get_project_data_indices"},{"location":"apis/public/DataIndicesApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_data_indices ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->get_project_data_indices: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_5","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_5","text":"list[ProjectDataIndexWithStatus]","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_5","text":"Status code Description Response headers 200 Project data indices. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#search_project_data_index","text":"ElasticIndexSearchResults search_project_data_index(proj_key, index_key, parameters) Search a project data index","title":"search_project_data_index"},{"location":"apis/public/DataIndicesApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | parameters = None # dict(str, object) | try : api_response = api_instance . search_project_data_index ( proj_key , index_key , parameters ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->search_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_6","text":"Name Type Description Notes proj_key str index_key str parameters dict(str, object)","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_6","text":"ElasticIndexSearchResults","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_6","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_6","text":"Status code Description Response headers 200 List project data index search results - 404 Project data indices search not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#update_project_data_index","text":"ProjectDataIndexWithStatus update_project_data_index(proj_key, index_key, data) Update a project data index","title":"update_project_data_index"},{"location":"apis/public/DataIndicesApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | data = None # object | try : api_response = api_instance . update_project_data_index ( proj_key , index_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->update_project_data_index: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_7","text":"Name Type Description Notes proj_key str index_key str data object","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_7","text":"ProjectDataIndexWithStatus","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_7","text":"Status code Description Response headers 200 Updated project data index. - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DataIndicesApi/#upload_project_data_index_file","text":"upload_project_data_index_file(proj_key, index_key, file) Upload a file to a project data index","title":"upload_project_data_index_file"},{"location":"apis/public/DataIndicesApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DataIndicesApi ( api_client ) proj_key = 'proj_key_example' # str | index_key = 'index_key_example' # str | file = '/path/to/file' # file | try : api_instance . upload_project_data_index_file ( proj_key , index_key , file ) except ApiException as e : print ( \"Exception when calling DataIndicesApi->upload_project_data_index_file: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DataIndicesApi/#parameters_8","text":"Name Type Description Notes proj_key str index_key str file file","title":"Parameters"},{"location":"apis/public/DataIndicesApi/#return-type_8","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DataIndicesApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/public/DataIndicesApi/#http-request-headers_8","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DataIndicesApi/#http-response-details_8","text":"Status code Description Response headers 200 File uploaded successfully - 404 Project data index not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/","text":"deepsearch.cps.apis.public.DictionariesApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description clone_project_dictionary POST /project/{proj_key}/dictionaries/{dict_key}/actions/clone clone_public_dictionary POST /project/public/dictionaries/{dict_key}/actions/clone create_project_dictionary POST /project/{proj_key}/dictionaries create_project_dictionary_collection POST /project/{proj_key}/dictionaries/{dict_key}/collections create_project_dictionary_delete_token POST /project/{proj_key}/dictionaries/{dict_key}/delete_token delete_project_dictionary DELETE /project/{proj_key}/dictionaries/{dict_key} delete_project_dictionary_collection DELETE /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name} export_project_dictionary_collection_data POST /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/actions/export export_project_dictionary_data POST /project/{proj_key}/dictionaries/{dict_key}/actions/export get_project_dictionary GET /project/{proj_key}/dictionaries/{dict_key} get_project_dictionary_collection_data GET /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/data get_public_dictionary GET /project/public/dictionaries/{dict_key} import_project_dictionary_from_mongo POST /project/{proj_key}/dictionaries/from_mongo list_project_dictionaries GET /project/{proj_key}/dictionaries list_project_dictionary_collections GET /project/{proj_key}/dictionaries/{dict_key}/collections list_public_dictionaries GET /project/public/dictionaries list_public_dictionary_collections GET /project/public/dictionaries/{dict_key}/collections update_project_dictionary PATCH /project/{proj_key}/dictionaries/{dict_key} update_project_dictionary_collection_data PATCH /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/data upload_project_dictionary_collection_data POST /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/actions/upload upload_project_dictionary_data POST /project/{proj_key}/dictionaries/{dict_key}/actions/upload clone_project_dictionary \u00b6 DictionaryCloneResult clone_project_dictionary(proj_key, dict_key, body) Clone an existing dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . CloneDictionaryOptions () # CloneDictionaryOptions | try : api_response = api_instance . clone_project_dictionary ( proj_key , dict_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->clone_project_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str body CloneDictionaryOptions Return type \u00b6 DictionaryCloneResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary cloned, and data is being copied. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] clone_public_dictionary \u00b6 DictionaryCloneResult clone_public_dictionary(dict_key, body) Clone an existing public dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . ClonePublicDictionaryOptions () # ClonePublicDictionaryOptions | try : api_response = api_instance . clone_public_dictionary ( dict_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->clone_public_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dict_key str body ClonePublicDictionaryOptions Return type \u00b6 DictionaryCloneResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary cloned, and data is being copied. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_dictionary \u00b6 Dictionary create_project_dictionary(proj_key, body) Create an empty dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . CreateDictionaryOptions () # CreateDictionaryOptions | try : api_response = api_instance . create_project_dictionary ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body CreateDictionaryOptions Return type \u00b6 Dictionary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_dictionary_collection \u00b6 create_project_dictionary_collection(proj_key, dict_key, body) Create a collection in a dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . CreateCollectionInDictionaryOptions () # CreateCollectionInDictionaryOptions | try : api_instance . create_project_dictionary_collection ( proj_key , dict_key , body ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary_collection: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str body CreateCollectionInDictionaryOptions Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Collection created. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_dictionary_delete_token \u00b6 TokenResponse create_project_dictionary_delete_token(proj_key, dict_key) Get a token used to confirm the deletion of a dictionary. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . create_project_dictionary_delete_token ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary_delete_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_dictionary \u00b6 delete_project_dictionary(proj_key, dict_key, confirmation_token) Delete a single dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_dictionary ( proj_key , dict_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DictionariesApi->delete_project_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str confirmation_token str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Dictionary deleted. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_dictionary_collection \u00b6 delete_project_dictionary_collection(proj_key, dict_key, collection_name) Delete a single dictionary's collection Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | try : api_instance . delete_project_dictionary_collection ( proj_key , dict_key , collection_name ) except ApiException as e : print ( \"Exception when calling DictionariesApi->delete_project_dictionary_collection: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str collection_name str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Collection deleted. - 404 Collection doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_project_dictionary_collection_data \u00b6 file export_project_dictionary_collection_data(proj_key, dict_key, collection_name, file_format=file_format) Export the contents of a dictionary's collection Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | file_format = 'file_format_example' # str | (optional) try : api_response = api_instance . export_project_dictionary_collection_data ( proj_key , dict_key , collection_name , file_format = file_format ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->export_project_dictionary_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str collection_name str file_format str [optional] Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/zip, application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary collection contents. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] export_project_dictionary_data \u00b6 file export_project_dictionary_data(proj_key, dict_key) Export the contents of a dictionary. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . export_project_dictionary_data ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->export_project_dictionary_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str Return type \u00b6 file Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/zip HTTP response details \u00b6 Status code Description Response headers 200 Dictionary contents. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_dictionary \u00b6 Dictionary get_project_dictionary(proj_key, dict_key, include_collections=include_collections) Get a single dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_dictionary ( proj_key , dict_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_project_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str include_collections bool [optional] [default to False] Return type \u00b6 Dictionary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_dictionary_collection_data \u00b6 object get_project_dictionary_collection_data(proj_key, dict_key, collection_name, after=after, limit=limit, response_format=response_format) Get a preview of the data in a dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | after = 'after_example' # str | (optional) limit = 1000 # int | (optional) (default to 1000) response_format = 'object' # str | (optional) (default to 'object') try : api_response = api_instance . get_project_dictionary_collection_data ( proj_key , dict_key , collection_name , after = after , limit = limit , response_format = response_format ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_project_dictionary_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str collection_name str after str [optional] limit int [optional] [default to 1000] response_format str [optional] [default to 'object'] Return type \u00b6 object Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary collection contents. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_public_dictionary \u00b6 Dictionary get_public_dictionary(dict_key, include_collections=include_collections) Get a single dictionary that was made public Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_public_dictionary ( dict_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_public_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dict_key str include_collections bool [optional] [default to False] Return type \u00b6 Dictionary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary - 404 Dictionary not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] import_project_dictionary_from_mongo \u00b6 DictionaryImportResult import_project_dictionary_from_mongo(proj_key, body) Create a dictionary from a mongo database Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DictionaryImportOptions () # DictionaryImportOptions | try : api_response = api_instance . import_project_dictionary_from_mongo ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->import_project_dictionary_from_mongo: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body DictionaryImportOptions Return type \u00b6 DictionaryImportResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_dictionaries \u00b6 list[Dictionary] list_project_dictionaries(proj_key, query=query) List dictionaries for a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_dictionaries ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_project_dictionaries: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str query str [optional] Return type \u00b6 list[Dictionary] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of dictionaries - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_dictionary_collections \u00b6 list[DictionaryCollection] list_project_dictionary_collections(proj_key, dict_key) Get the collections of a dictionary. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . list_project_dictionary_collections ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_project_dictionary_collections: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str Return type \u00b6 list[DictionaryCollection] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary collections - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_dictionaries \u00b6 list[Dictionary] list_public_dictionaries(query=query) List public dictionaries Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_dictionaries ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_public_dictionaries: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes query str [optional] Return type \u00b6 list[Dictionary] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of public dictionaries - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_dictionary_collections \u00b6 list[DictionaryCollection] list_public_dictionary_collections(dict_key) Get the collections of a dictionary. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | try : api_response = api_instance . list_public_dictionary_collections ( dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_public_dictionary_collections: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dict_key str Return type \u00b6 list[DictionaryCollection] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary collections - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_dictionary \u00b6 Dictionary update_project_dictionary(proj_key, dict_key, options) Update the metadata of a dictionary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | options = deepsearch . cps . apis . public . PatchDictionaryOptions () # PatchDictionaryOptions | try : api_response = api_instance . update_project_dictionary ( proj_key , dict_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->update_project_dictionary: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str options PatchDictionaryOptions Return type \u00b6 Dictionary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Dictionary updated. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_dictionary_collection_data \u00b6 update_project_dictionary_collection_data(proj_key, dict_key, collection_name, body) Update the data in a dictionary's collection Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | body = [ deepsearch . cps . apis . public . DictionaryCollectionPatch ()] # list[DictionaryCollectionPatch] | A subset of JSON Patch operation list. Only `add`, `replace`, and `remove` is supported. See http://jsonpatch.com/ for more details. try : api_instance . update_project_dictionary_collection_data ( proj_key , dict_key , collection_name , body ) except ApiException as e : print ( \"Exception when calling DictionariesApi->update_project_dictionary_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str collection_name str body list[DictionaryCollectionPatch] A subset of JSON Patch operation list. Only `add`, `replace`, and `remove` is supported. See http://jsonpatch.com/ for more details. Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Data updated. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_dictionary_collection_data \u00b6 Task upload_project_dictionary_collection_data(proj_key, dict_key, collection_name, file) Upload data to a dictionary collection. The collection will be created if it doesn't exist. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_dictionary_collection_data ( proj_key , dict_key , collection_name , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->upload_project_dictionary_collection_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str collection_name str file file Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_dictionary_data \u00b6 Task upload_project_dictionary_data(proj_key, dict_key, file) Upload data to a dictionary. The collection name(s) will be inferred from the file name(s). Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_dictionary_data ( proj_key , dict_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->upload_project_dictionary_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str dict_key str file file Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Data is being processed. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.DictionariesApi"},{"location":"apis/public/DictionariesApi/#deepsearchcpsapispublicdictionariesapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description clone_project_dictionary POST /project/{proj_key}/dictionaries/{dict_key}/actions/clone clone_public_dictionary POST /project/public/dictionaries/{dict_key}/actions/clone create_project_dictionary POST /project/{proj_key}/dictionaries create_project_dictionary_collection POST /project/{proj_key}/dictionaries/{dict_key}/collections create_project_dictionary_delete_token POST /project/{proj_key}/dictionaries/{dict_key}/delete_token delete_project_dictionary DELETE /project/{proj_key}/dictionaries/{dict_key} delete_project_dictionary_collection DELETE /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name} export_project_dictionary_collection_data POST /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/actions/export export_project_dictionary_data POST /project/{proj_key}/dictionaries/{dict_key}/actions/export get_project_dictionary GET /project/{proj_key}/dictionaries/{dict_key} get_project_dictionary_collection_data GET /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/data get_public_dictionary GET /project/public/dictionaries/{dict_key} import_project_dictionary_from_mongo POST /project/{proj_key}/dictionaries/from_mongo list_project_dictionaries GET /project/{proj_key}/dictionaries list_project_dictionary_collections GET /project/{proj_key}/dictionaries/{dict_key}/collections list_public_dictionaries GET /project/public/dictionaries list_public_dictionary_collections GET /project/public/dictionaries/{dict_key}/collections update_project_dictionary PATCH /project/{proj_key}/dictionaries/{dict_key} update_project_dictionary_collection_data PATCH /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/data upload_project_dictionary_collection_data POST /project/{proj_key}/dictionaries/{dict_key}/collections/{collection_name}/actions/upload upload_project_dictionary_data POST /project/{proj_key}/dictionaries/{dict_key}/actions/upload","title":"deepsearch.cps.apis.public.DictionariesApi"},{"location":"apis/public/DictionariesApi/#clone_project_dictionary","text":"DictionaryCloneResult clone_project_dictionary(proj_key, dict_key, body) Clone an existing dictionary","title":"clone_project_dictionary"},{"location":"apis/public/DictionariesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . CloneDictionaryOptions () # CloneDictionaryOptions | try : api_response = api_instance . clone_project_dictionary ( proj_key , dict_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->clone_project_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters","text":"Name Type Description Notes proj_key str dict_key str body CloneDictionaryOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type","text":"DictionaryCloneResult","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details","text":"Status code Description Response headers 200 Dictionary cloned, and data is being copied. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#clone_public_dictionary","text":"DictionaryCloneResult clone_public_dictionary(dict_key, body) Clone an existing public dictionary","title":"clone_public_dictionary"},{"location":"apis/public/DictionariesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . ClonePublicDictionaryOptions () # ClonePublicDictionaryOptions | try : api_response = api_instance . clone_public_dictionary ( dict_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->clone_public_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_1","text":"Name Type Description Notes dict_key str body ClonePublicDictionaryOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_1","text":"DictionaryCloneResult","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_1","text":"Status code Description Response headers 200 Dictionary cloned, and data is being copied. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#create_project_dictionary","text":"Dictionary create_project_dictionary(proj_key, body) Create an empty dictionary","title":"create_project_dictionary"},{"location":"apis/public/DictionariesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . CreateDictionaryOptions () # CreateDictionaryOptions | try : api_response = api_instance . create_project_dictionary ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_2","text":"Name Type Description Notes proj_key str body CreateDictionaryOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_2","text":"Dictionary","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_2","text":"Status code Description Response headers 200 Dictionary created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#create_project_dictionary_collection","text":"create_project_dictionary_collection(proj_key, dict_key, body) Create a collection in a dictionary","title":"create_project_dictionary_collection"},{"location":"apis/public/DictionariesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | body = deepsearch . cps . apis . public . CreateCollectionInDictionaryOptions () # CreateCollectionInDictionaryOptions | try : api_instance . create_project_dictionary_collection ( proj_key , dict_key , body ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary_collection: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_3","text":"Name Type Description Notes proj_key str dict_key str body CreateCollectionInDictionaryOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_3","text":"Status code Description Response headers 200 Collection created. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#create_project_dictionary_delete_token","text":"TokenResponse create_project_dictionary_delete_token(proj_key, dict_key) Get a token used to confirm the deletion of a dictionary.","title":"create_project_dictionary_delete_token"},{"location":"apis/public/DictionariesApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . create_project_dictionary_delete_token ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->create_project_dictionary_delete_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_4","text":"Name Type Description Notes proj_key str dict_key str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_4","text":"TokenResponse","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_4","text":"Status code Description Response headers 200 Dictionary deletion token. - 404 Data flow template not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#delete_project_dictionary","text":"delete_project_dictionary(proj_key, dict_key, confirmation_token) Delete a single dictionary","title":"delete_project_dictionary"},{"location":"apis/public/DictionariesApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_dictionary ( proj_key , dict_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling DictionariesApi->delete_project_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_5","text":"Name Type Description Notes proj_key str dict_key str confirmation_token str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_5","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_5","text":"Status code Description Response headers 204 Dictionary deleted. - 404 Dictionary doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#delete_project_dictionary_collection","text":"delete_project_dictionary_collection(proj_key, dict_key, collection_name) Delete a single dictionary's collection","title":"delete_project_dictionary_collection"},{"location":"apis/public/DictionariesApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | try : api_instance . delete_project_dictionary_collection ( proj_key , dict_key , collection_name ) except ApiException as e : print ( \"Exception when calling DictionariesApi->delete_project_dictionary_collection: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_6","text":"Name Type Description Notes proj_key str dict_key str collection_name str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_6","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_6","text":"Status code Description Response headers 204 Collection deleted. - 404 Collection doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#export_project_dictionary_collection_data","text":"file export_project_dictionary_collection_data(proj_key, dict_key, collection_name, file_format=file_format) Export the contents of a dictionary's collection","title":"export_project_dictionary_collection_data"},{"location":"apis/public/DictionariesApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | file_format = 'file_format_example' # str | (optional) try : api_response = api_instance . export_project_dictionary_collection_data ( proj_key , dict_key , collection_name , file_format = file_format ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->export_project_dictionary_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_7","text":"Name Type Description Notes proj_key str dict_key str collection_name str file_format str [optional]","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_7","text":"file","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/zip, application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_7","text":"Status code Description Response headers 200 Dictionary collection contents. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#export_project_dictionary_data","text":"file export_project_dictionary_data(proj_key, dict_key) Export the contents of a dictionary.","title":"export_project_dictionary_data"},{"location":"apis/public/DictionariesApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . export_project_dictionary_data ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->export_project_dictionary_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_8","text":"Name Type Description Notes proj_key str dict_key str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_8","text":"file","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/zip","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_8","text":"Status code Description Response headers 200 Dictionary contents. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#get_project_dictionary","text":"Dictionary get_project_dictionary(proj_key, dict_key, include_collections=include_collections) Get a single dictionary","title":"get_project_dictionary"},{"location":"apis/public/DictionariesApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_dictionary ( proj_key , dict_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_project_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_9","text":"Name Type Description Notes proj_key str dict_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_9","text":"Dictionary","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_9","text":"Status code Description Response headers 200 Dictionary - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#get_project_dictionary_collection_data","text":"object get_project_dictionary_collection_data(proj_key, dict_key, collection_name, after=after, limit=limit, response_format=response_format) Get a preview of the data in a dictionary","title":"get_project_dictionary_collection_data"},{"location":"apis/public/DictionariesApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | after = 'after_example' # str | (optional) limit = 1000 # int | (optional) (default to 1000) response_format = 'object' # str | (optional) (default to 'object') try : api_response = api_instance . get_project_dictionary_collection_data ( proj_key , dict_key , collection_name , after = after , limit = limit , response_format = response_format ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_project_dictionary_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_10","text":"Name Type Description Notes proj_key str dict_key str collection_name str after str [optional] limit int [optional] [default to 1000] response_format str [optional] [default to 'object']","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_10","text":"object","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_10","text":"Status code Description Response headers 200 Dictionary collection contents. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#get_public_dictionary","text":"Dictionary get_public_dictionary(dict_key, include_collections=include_collections) Get a single dictionary that was made public","title":"get_public_dictionary"},{"location":"apis/public/DictionariesApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . get_public_dictionary ( dict_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->get_public_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_11","text":"Name Type Description Notes dict_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_11","text":"Dictionary","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_11","text":"Status code Description Response headers 200 Dictionary - 404 Dictionary not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#import_project_dictionary_from_mongo","text":"DictionaryImportResult import_project_dictionary_from_mongo(proj_key, body) Create a dictionary from a mongo database","title":"import_project_dictionary_from_mongo"},{"location":"apis/public/DictionariesApi/#example_12","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . DictionaryImportOptions () # DictionaryImportOptions | try : api_response = api_instance . import_project_dictionary_from_mongo ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->import_project_dictionary_from_mongo: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_12","text":"Name Type Description Notes proj_key str body DictionaryImportOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_12","text":"DictionaryImportResult","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_12","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_12","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_12","text":"Status code Description Response headers 200 Dictionary created, and data is being imported. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#list_project_dictionaries","text":"list[Dictionary] list_project_dictionaries(proj_key, query=query) List dictionaries for a project","title":"list_project_dictionaries"},{"location":"apis/public/DictionariesApi/#example_13","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | query = 'query_example' # str | (optional) try : api_response = api_instance . list_project_dictionaries ( proj_key , query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_project_dictionaries: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_13","text":"Name Type Description Notes proj_key str query str [optional]","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_13","text":"list[Dictionary]","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_13","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_13","text":"Status code Description Response headers 200 List of dictionaries - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#list_project_dictionary_collections","text":"list[DictionaryCollection] list_project_dictionary_collections(proj_key, dict_key) Get the collections of a dictionary.","title":"list_project_dictionary_collections"},{"location":"apis/public/DictionariesApi/#example_14","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | try : api_response = api_instance . list_project_dictionary_collections ( proj_key , dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_project_dictionary_collections: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_14","text":"Name Type Description Notes proj_key str dict_key str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_14","text":"list[DictionaryCollection]","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_14","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_14","text":"Status code Description Response headers 200 Dictionary collections - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#list_public_dictionaries","text":"list[Dictionary] list_public_dictionaries(query=query) List public dictionaries","title":"list_public_dictionaries"},{"location":"apis/public/DictionariesApi/#example_15","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) query = 'query_example' # str | (optional) try : api_response = api_instance . list_public_dictionaries ( query = query ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_public_dictionaries: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_15","text":"Name Type Description Notes query str [optional]","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_15","text":"list[Dictionary]","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_15","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_15","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_15","text":"Status code Description Response headers 200 List of public dictionaries - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#list_public_dictionary_collections","text":"list[DictionaryCollection] list_public_dictionary_collections(dict_key) Get the collections of a dictionary.","title":"list_public_dictionary_collections"},{"location":"apis/public/DictionariesApi/#example_16","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) dict_key = 'dict_key_example' # str | try : api_response = api_instance . list_public_dictionary_collections ( dict_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->list_public_dictionary_collections: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_16","text":"Name Type Description Notes dict_key str","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_16","text":"list[DictionaryCollection]","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_16","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_16","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_16","text":"Status code Description Response headers 200 Dictionary collections - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#update_project_dictionary","text":"Dictionary update_project_dictionary(proj_key, dict_key, options) Update the metadata of a dictionary","title":"update_project_dictionary"},{"location":"apis/public/DictionariesApi/#example_17","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | options = deepsearch . cps . apis . public . PatchDictionaryOptions () # PatchDictionaryOptions | try : api_response = api_instance . update_project_dictionary ( proj_key , dict_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->update_project_dictionary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_17","text":"Name Type Description Notes proj_key str dict_key str options PatchDictionaryOptions","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_17","text":"Dictionary","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_17","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_17","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_17","text":"Status code Description Response headers 200 Dictionary updated. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#update_project_dictionary_collection_data","text":"update_project_dictionary_collection_data(proj_key, dict_key, collection_name, body) Update the data in a dictionary's collection","title":"update_project_dictionary_collection_data"},{"location":"apis/public/DictionariesApi/#example_18","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | body = [ deepsearch . cps . apis . public . DictionaryCollectionPatch ()] # list[DictionaryCollectionPatch] | A subset of JSON Patch operation list. Only `add`, `replace`, and `remove` is supported. See http://jsonpatch.com/ for more details. try : api_instance . update_project_dictionary_collection_data ( proj_key , dict_key , collection_name , body ) except ApiException as e : print ( \"Exception when calling DictionariesApi->update_project_dictionary_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_18","text":"Name Type Description Notes proj_key str dict_key str collection_name str body list[DictionaryCollectionPatch] A subset of JSON Patch operation list. Only `add`, `replace`, and `remove` is supported. See http://jsonpatch.com/ for more details.","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_18","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_18","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_18","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_18","text":"Status code Description Response headers 204 Data updated. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#upload_project_dictionary_collection_data","text":"Task upload_project_dictionary_collection_data(proj_key, dict_key, collection_name, file) Upload data to a dictionary collection. The collection will be created if it doesn't exist.","title":"upload_project_dictionary_collection_data"},{"location":"apis/public/DictionariesApi/#example_19","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | collection_name = 'collection_name_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_dictionary_collection_data ( proj_key , dict_key , collection_name , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->upload_project_dictionary_collection_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_19","text":"Name Type Description Notes proj_key str dict_key str collection_name str file file","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_19","text":"Task","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_19","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_19","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_19","text":"Status code Description Response headers 200 Data is being processed. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DictionariesApi/#upload_project_dictionary_data","text":"Task upload_project_dictionary_data(proj_key, dict_key, file) Upload data to a dictionary. The collection name(s) will be inferred from the file name(s).","title":"upload_project_dictionary_data"},{"location":"apis/public/DictionariesApi/#example_20","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DictionariesApi ( api_client ) proj_key = 'proj_key_example' # str | dict_key = 'dict_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_dictionary_data ( proj_key , dict_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DictionariesApi->upload_project_dictionary_data: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DictionariesApi/#parameters_20","text":"Name Type Description Notes proj_key str dict_key str file file","title":"Parameters"},{"location":"apis/public/DictionariesApi/#return-type_20","text":"Task","title":"Return type"},{"location":"apis/public/DictionariesApi/#authorization_20","text":"Bearer","title":"Authorization"},{"location":"apis/public/DictionariesApi/#http-request-headers_20","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DictionariesApi/#http-response-details_20","text":"Status code Description Response headers 200 Data is being processed. - 404 Dictionary not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/Dictionary/","text":"Dictionary \u00b6 Properties \u00b6 Name Type Description Notes collections list[DictionaryCollection] [optional] copy_of str created_at float created_by str description str dict_key str name str proj_key str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Dictionary"},{"location":"apis/public/Dictionary/#dictionary","text":"","title":"Dictionary"},{"location":"apis/public/Dictionary/#properties","text":"Name Type Description Notes collections list[DictionaryCollection] [optional] copy_of str created_at float created_by str description str dict_key str name str proj_key str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryCloneResult/","text":"DictionaryCloneResult \u00b6 Properties \u00b6 Name Type Description Notes clone_task Task [optional] dictionary Dictionary [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryCloneResult"},{"location":"apis/public/DictionaryCloneResult/#dictionarycloneresult","text":"","title":"DictionaryCloneResult"},{"location":"apis/public/DictionaryCloneResult/#properties","text":"Name Type Description Notes clone_task Task [optional] dictionary Dictionary [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryCollection/","text":"DictionaryCollection \u00b6 Properties \u00b6 Name Type Description Notes item_count int name str [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryCollection"},{"location":"apis/public/DictionaryCollection/#dictionarycollection","text":"","title":"DictionaryCollection"},{"location":"apis/public/DictionaryCollection/#properties","text":"Name Type Description Notes item_count int name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryCollectionCsvData/","text":"DictionaryCollectionCsvData \u00b6 Properties \u00b6 Name Type Description Notes body str header str [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryCollectionCsvData"},{"location":"apis/public/DictionaryCollectionCsvData/#dictionarycollectioncsvdata","text":"","title":"DictionaryCollectionCsvData"},{"location":"apis/public/DictionaryCollectionCsvData/#properties","text":"Name Type Description Notes body str header str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryCollectionPatch/","text":"DictionaryCollectionPatch \u00b6 Properties \u00b6 Name Type Description Notes op str path str A path (see JSON patch specification) in the format `/{objectid}` for existing objects, or `/-` for new objects (`add` operations). value DictionaryEntry [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryCollectionPatch"},{"location":"apis/public/DictionaryCollectionPatch/#dictionarycollectionpatch","text":"","title":"DictionaryCollectionPatch"},{"location":"apis/public/DictionaryCollectionPatch/#properties","text":"Name Type Description Notes op str path str A path (see JSON patch specification) in the format `/{objectid}` for existing objects, or `/-` for new objects (`add` operations). value DictionaryEntry [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryEntry/","text":"DictionaryEntry \u00b6 Properties \u00b6 Name Type Description Notes name str synonyms list[str] [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryEntry"},{"location":"apis/public/DictionaryEntry/#dictionaryentry","text":"","title":"DictionaryEntry"},{"location":"apis/public/DictionaryEntry/#properties","text":"Name Type Description Notes name str synonyms list[str] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryImportOptions/","text":"DictionaryImportOptions \u00b6 Properties \u00b6 Name Type Description Notes options ProjectProjKeyDataCataloguesFromMongoOptions target ProjectProjKeyDictionariesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryImportOptions"},{"location":"apis/public/DictionaryImportOptions/#dictionaryimportoptions","text":"","title":"DictionaryImportOptions"},{"location":"apis/public/DictionaryImportOptions/#properties","text":"Name Type Description Notes options ProjectProjKeyDataCataloguesFromMongoOptions target ProjectProjKeyDictionariesFromMongoTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DictionaryImportResult/","text":"DictionaryImportResult \u00b6 Properties \u00b6 Name Type Description Notes dictionary Dictionary [optional] import_task Task [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DictionaryImportResult"},{"location":"apis/public/DictionaryImportResult/#dictionaryimportresult","text":"","title":"DictionaryImportResult"},{"location":"apis/public/DictionaryImportResult/#properties","text":"Name Type Description Notes dictionary Dictionary [optional] import_task Task [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/DocumentAnnotationApi/","text":"deepsearch.cps.apis.public.DocumentAnnotationApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description annotate_document POST /project/{proj_key}/annotate/document delete_document_annotation_result DELETE /project/{proj_key}/annotate/document/results/{document_hash} get_annotate_document_result GET /project/{proj_key}/annotate/document/tasks/{task_id} report_inspected_document POST /project/{proj_key}/annotate/document/report annotate_document \u00b6 Task annotate_document(proj_key, body) Run an annotator on a document Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . AnnotateDocumentRequest () # AnnotateDocumentRequest | try : api_response = api_instance . annotate_document ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->annotate_document: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body AnnotateDocumentRequest Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_document_annotation_result \u00b6 delete_document_annotation_result(proj_key, document_hash) Delete annotation results for a document Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | document_hash = 'document_hash_example' # str | try : api_instance . delete_document_annotation_result ( proj_key , document_hash ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->delete_document_annotation_result: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str document_hash str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_annotate_document_result \u00b6 InlineResponse2002 get_annotate_document_result(proj_key, task_id, wait=wait) Get the result of a previous document annotation Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | wait = 3.4 # float | Allow the response to be delayed for a few seconds to wait for the result, instead of doing client-side polling. (optional) try : api_response = api_instance . get_annotate_document_result ( proj_key , task_id , wait = wait ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->get_annotate_document_result: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str wait float Allow the response to be delayed for a few seconds to wait for the result, instead of doing client-side polling. [optional] Return type \u00b6 InlineResponse2002 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] report_inspected_document \u00b6 Task report_inspected_document(proj_key, body) Submit a report on an inspected document Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . AnnotatedDocumentReport () # AnnotatedDocumentReport | try : api_response = api_instance . report_inspected_document ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->report_inspected_document: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body AnnotatedDocumentReport Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.DocumentAnnotationApi"},{"location":"apis/public/DocumentAnnotationApi/#deepsearchcpsapispublicdocumentannotationapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description annotate_document POST /project/{proj_key}/annotate/document delete_document_annotation_result DELETE /project/{proj_key}/annotate/document/results/{document_hash} get_annotate_document_result GET /project/{proj_key}/annotate/document/tasks/{task_id} report_inspected_document POST /project/{proj_key}/annotate/document/report","title":"deepsearch.cps.apis.public.DocumentAnnotationApi"},{"location":"apis/public/DocumentAnnotationApi/#annotate_document","text":"Task annotate_document(proj_key, body) Run an annotator on a document","title":"annotate_document"},{"location":"apis/public/DocumentAnnotationApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . AnnotateDocumentRequest () # AnnotateDocumentRequest | try : api_response = api_instance . annotate_document ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->annotate_document: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DocumentAnnotationApi/#parameters","text":"Name Type Description Notes proj_key str body AnnotateDocumentRequest","title":"Parameters"},{"location":"apis/public/DocumentAnnotationApi/#return-type","text":"Task","title":"Return type"},{"location":"apis/public/DocumentAnnotationApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/DocumentAnnotationApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DocumentAnnotationApi/#http-response-details","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DocumentAnnotationApi/#delete_document_annotation_result","text":"delete_document_annotation_result(proj_key, document_hash) Delete annotation results for a document","title":"delete_document_annotation_result"},{"location":"apis/public/DocumentAnnotationApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | document_hash = 'document_hash_example' # str | try : api_instance . delete_document_annotation_result ( proj_key , document_hash ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->delete_document_annotation_result: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DocumentAnnotationApi/#parameters_1","text":"Name Type Description Notes proj_key str document_hash str","title":"Parameters"},{"location":"apis/public/DocumentAnnotationApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/DocumentAnnotationApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/DocumentAnnotationApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DocumentAnnotationApi/#http-response-details_1","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DocumentAnnotationApi/#get_annotate_document_result","text":"InlineResponse2002 get_annotate_document_result(proj_key, task_id, wait=wait) Get the result of a previous document annotation","title":"get_annotate_document_result"},{"location":"apis/public/DocumentAnnotationApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | wait = 3.4 # float | Allow the response to be delayed for a few seconds to wait for the result, instead of doing client-side polling. (optional) try : api_response = api_instance . get_annotate_document_result ( proj_key , task_id , wait = wait ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->get_annotate_document_result: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DocumentAnnotationApi/#parameters_2","text":"Name Type Description Notes proj_key str task_id str wait float Allow the response to be delayed for a few seconds to wait for the result, instead of doing client-side polling. [optional]","title":"Parameters"},{"location":"apis/public/DocumentAnnotationApi/#return-type_2","text":"InlineResponse2002","title":"Return type"},{"location":"apis/public/DocumentAnnotationApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/DocumentAnnotationApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DocumentAnnotationApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/DocumentAnnotationApi/#report_inspected_document","text":"Task report_inspected_document(proj_key, body) Submit a report on an inspected document","title":"report_inspected_document"},{"location":"apis/public/DocumentAnnotationApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . DocumentAnnotationApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . AnnotatedDocumentReport () # AnnotatedDocumentReport | try : api_response = api_instance . report_inspected_document ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling DocumentAnnotationApi->report_inspected_document: %s \\n \" % e )","title":"Example"},{"location":"apis/public/DocumentAnnotationApi/#parameters_3","text":"Name Type Description Notes proj_key str body AnnotatedDocumentReport","title":"Parameters"},{"location":"apis/public/DocumentAnnotationApi/#return-type_3","text":"Task","title":"Return type"},{"location":"apis/public/DocumentAnnotationApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/DocumentAnnotationApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/DocumentAnnotationApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticApi/","text":"deepsearch.cps.apis.public.ElasticApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description get_elastic_domains GET /elastic/domains get_elastic_query_max_size GET /elastic/query_max_size get_index_search_results POST /elastic/{elastic_instance}/{elastic_index}/search get_kibana_saved_queries GET /elastic/{elastic_instance}/{elastic_index}/saved_queries list_indices_from_elastic_instance GET /elastic/indices/{index_type}/{index_domain} get_elastic_domains \u00b6 list[str] get_elastic_domains() List system elastic domains. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) try : api_response = api_instance . get_elastic_domains () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_elastic_domains: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[str] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Elastic Domains. - 404 Domains not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_elastic_query_max_size \u00b6 InlineResponse200 get_elastic_query_max_size() Get the system maximum workable elastic query size. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) try : api_response = api_instance . get_elastic_query_max_size () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_elastic_query_max_size: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 InlineResponse200 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Maximum elastic query size. - 404 No maximum workable elastic query size found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_index_search_results \u00b6 ElasticIndexSearchResults get_index_search_results(elastic_instance, elastic_index, parameters) List elastic index search results. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) elastic_instance = 'elastic_instance_example' # str | elastic_index = 'elastic_index_example' # str | parameters = None # dict(str, object) | try : api_response = api_instance . get_index_search_results ( elastic_instance , elastic_index , parameters ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_index_search_results: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes elastic_instance str elastic_index str parameters dict(str, object) Return type \u00b6 ElasticIndexSearchResults Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List elastic index search results - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_kibana_saved_queries \u00b6 list[KibanaSavedQueriesResult] get_kibana_saved_queries(elastic_instance, elastic_index) List Kibana saved queries. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) elastic_instance = 'elastic_instance_example' # str | elastic_index = 'elastic_index_example' # str | try : api_response = api_instance . get_kibana_saved_queries ( elastic_instance , elastic_index ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_kibana_saved_queries: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes elastic_instance str elastic_index str Return type \u00b6 list[KibanaSavedQueriesResult] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Kibana saved queries - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_indices_from_elastic_instance \u00b6 list[DataCollection] list_indices_from_elastic_instance(index_type, index_domain) List of indices for elastic instance. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) index_type = 'all' # str | (default to 'all') index_domain = 'all' # str | (default to 'all') try : api_response = api_instance . list_indices_from_elastic_instance ( index_type , index_domain ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->list_indices_from_elastic_instance: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes index_type str [default to 'all'] index_domain str [default to 'all'] Return type \u00b6 list[DataCollection] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Elastic Instance Indices - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.ElasticApi"},{"location":"apis/public/ElasticApi/#deepsearchcpsapispublicelasticapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description get_elastic_domains GET /elastic/domains get_elastic_query_max_size GET /elastic/query_max_size get_index_search_results POST /elastic/{elastic_instance}/{elastic_index}/search get_kibana_saved_queries GET /elastic/{elastic_instance}/{elastic_index}/saved_queries list_indices_from_elastic_instance GET /elastic/indices/{index_type}/{index_domain}","title":"deepsearch.cps.apis.public.ElasticApi"},{"location":"apis/public/ElasticApi/#get_elastic_domains","text":"list[str] get_elastic_domains() List system elastic domains.","title":"get_elastic_domains"},{"location":"apis/public/ElasticApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) try : api_response = api_instance . get_elastic_domains () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_elastic_domains: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ElasticApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/ElasticApi/#return-type","text":"list[str]","title":"Return type"},{"location":"apis/public/ElasticApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/ElasticApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ElasticApi/#http-response-details","text":"Status code Description Response headers 200 List of Elastic Domains. - 404 Domains not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticApi/#get_elastic_query_max_size","text":"InlineResponse200 get_elastic_query_max_size() Get the system maximum workable elastic query size.","title":"get_elastic_query_max_size"},{"location":"apis/public/ElasticApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) try : api_response = api_instance . get_elastic_query_max_size () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_elastic_query_max_size: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ElasticApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/ElasticApi/#return-type_1","text":"InlineResponse200","title":"Return type"},{"location":"apis/public/ElasticApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/ElasticApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ElasticApi/#http-response-details_1","text":"Status code Description Response headers 200 Maximum elastic query size. - 404 No maximum workable elastic query size found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticApi/#get_index_search_results","text":"ElasticIndexSearchResults get_index_search_results(elastic_instance, elastic_index, parameters) List elastic index search results.","title":"get_index_search_results"},{"location":"apis/public/ElasticApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) elastic_instance = 'elastic_instance_example' # str | elastic_index = 'elastic_index_example' # str | parameters = None # dict(str, object) | try : api_response = api_instance . get_index_search_results ( elastic_instance , elastic_index , parameters ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_index_search_results: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ElasticApi/#parameters_2","text":"Name Type Description Notes elastic_instance str elastic_index str parameters dict(str, object)","title":"Parameters"},{"location":"apis/public/ElasticApi/#return-type_2","text":"ElasticIndexSearchResults","title":"Return type"},{"location":"apis/public/ElasticApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/ElasticApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ElasticApi/#http-response-details_2","text":"Status code Description Response headers 200 List elastic index search results - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticApi/#get_kibana_saved_queries","text":"list[KibanaSavedQueriesResult] get_kibana_saved_queries(elastic_instance, elastic_index) List Kibana saved queries.","title":"get_kibana_saved_queries"},{"location":"apis/public/ElasticApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) elastic_instance = 'elastic_instance_example' # str | elastic_index = 'elastic_index_example' # str | try : api_response = api_instance . get_kibana_saved_queries ( elastic_instance , elastic_index ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->get_kibana_saved_queries: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ElasticApi/#parameters_3","text":"Name Type Description Notes elastic_instance str elastic_index str","title":"Parameters"},{"location":"apis/public/ElasticApi/#return-type_3","text":"list[KibanaSavedQueriesResult]","title":"Return type"},{"location":"apis/public/ElasticApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/ElasticApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ElasticApi/#http-response-details_3","text":"Status code Description Response headers 200 List of Kibana saved queries - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticApi/#list_indices_from_elastic_instance","text":"list[DataCollection] list_indices_from_elastic_instance(index_type, index_domain) List of indices for elastic instance.","title":"list_indices_from_elastic_instance"},{"location":"apis/public/ElasticApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ElasticApi ( api_client ) index_type = 'all' # str | (default to 'all') index_domain = 'all' # str | (default to 'all') try : api_response = api_instance . list_indices_from_elastic_instance ( index_type , index_domain ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ElasticApi->list_indices_from_elastic_instance: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ElasticApi/#parameters_4","text":"Name Type Description Notes index_type str [default to 'all'] index_domain str [default to 'all']","title":"Parameters"},{"location":"apis/public/ElasticApi/#return-type_4","text":"list[DataCollection]","title":"Return type"},{"location":"apis/public/ElasticApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/ElasticApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ElasticApi/#http-response-details_4","text":"Status code Description Response headers 200 List of Elastic Instance Indices - 404 Instance indices not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ElasticCoordinates/","text":"ElasticCoordinates \u00b6 Properties \u00b6 Name Type Description Notes ca_certificate_base64 str [optional] dangerously_disable_ssl_validation bool [optional] hosts list[str] [Back to Model list] [Back to API list] [Back to README]","title":"ElasticCoordinates"},{"location":"apis/public/ElasticCoordinates/#elasticcoordinates","text":"","title":"ElasticCoordinates"},{"location":"apis/public/ElasticCoordinates/#properties","text":"Name Type Description Notes ca_certificate_base64 str [optional] dangerously_disable_ssl_validation bool [optional] hosts list[str] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ElasticIndexSearchQueryOptions/","text":"ElasticIndexSearchQueryOptions \u00b6 Properties \u00b6 Name Type Description Notes source list[str] [optional] aggs object [optional] _from float [optional] query dict(str, object) [optional] size float [optional] sort list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ElasticIndexSearchQueryOptions"},{"location":"apis/public/ElasticIndexSearchQueryOptions/#elasticindexsearchqueryoptions","text":"","title":"ElasticIndexSearchQueryOptions"},{"location":"apis/public/ElasticIndexSearchQueryOptions/#properties","text":"Name Type Description Notes source list[str] [optional] aggs object [optional] _from float [optional] query dict(str, object) [optional] size float [optional] sort list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ElasticIndexSearchResults/","text":"ElasticIndexSearchResults \u00b6 Properties \u00b6 Name Type Description Notes aggregations object [optional] items list[object] [optional] total float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ElasticIndexSearchResults"},{"location":"apis/public/ElasticIndexSearchResults/#elasticindexsearchresults","text":"","title":"ElasticIndexSearchResults"},{"location":"apis/public/ElasticIndexSearchResults/#properties","text":"Name Type Description Notes aggregations object [optional] items list[object] [optional] total float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/EntityAnnotation/","text":"EntityAnnotation \u00b6 Properties \u00b6 Name Type Description Notes match str range list[int] 2-Tuple representing the low and high indexes of the matching substring subtype str [optional] type str [Back to Model list] [Back to API list] [Back to README]","title":"EntityAnnotation"},{"location":"apis/public/EntityAnnotation/#entityannotation","text":"","title":"EntityAnnotation"},{"location":"apis/public/EntityAnnotation/#properties","text":"Name Type Description Notes match str range list[int] 2-Tuple representing the low and high indexes of the matching substring subtype str [optional] type str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/EntityAnnotationDescriptor/","text":"EntityAnnotationDescriptor \u00b6 Properties \u00b6 Name Type Description Notes data_fields list[str] [optional] description str key str [Back to Model list] [Back to API list] [Back to README]","title":"EntityAnnotationDescriptor"},{"location":"apis/public/EntityAnnotationDescriptor/#entityannotationdescriptor","text":"","title":"EntityAnnotationDescriptor"},{"location":"apis/public/EntityAnnotationDescriptor/#properties","text":"Name Type Description Notes data_fields list[str] [optional] description str key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes error_code str [optional] error_message str [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"apis/public/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"apis/public/ErrorResponse/#properties","text":"Name Type Description Notes error_code str [optional] error_message str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/FlavoursQuota/","text":"FlavoursQuota \u00b6 Properties \u00b6 Name Type Description Notes display_name str name str quota int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FlavoursQuota"},{"location":"apis/public/FlavoursQuota/#flavoursquota","text":"","title":"FlavoursQuota"},{"location":"apis/public/FlavoursQuota/#properties","text":"Name Type Description Notes display_name str name str quota int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/FullyRenderedDataFlow/","text":"FullyRenderedDataFlow \u00b6 Properties \u00b6 Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FullyRenderedDataFlow"},{"location":"apis/public/FullyRenderedDataFlow/#fullyrendereddataflow","text":"","title":"FullyRenderedDataFlow"},{"location":"apis/public/FullyRenderedDataFlow/#properties","text":"Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImageCells/","text":"ImageCells \u00b6 Properties \u00b6 Name Type Description Notes data list[object] A 6-tuple consisting of x1, y1, x2, y2, font, coordinates [Back to Model list] [Back to API list] [Back to README]","title":"ImageCells"},{"location":"apis/public/ImageCells/#imagecells","text":"","title":"ImageCells"},{"location":"apis/public/ImageCells/#properties","text":"Name Type Description Notes data list[object] A 6-tuple consisting of x1, y1, x2, y2, font, coordinates [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImageInfo/","text":"ImageInfo \u00b6 Properties \u00b6 Name Type Description Notes height float width float [Back to Model list] [Back to API list] [Back to README]","title":"ImageInfo"},{"location":"apis/public/ImageInfo/#imageinfo","text":"","title":"ImageInfo"},{"location":"apis/public/ImageInfo/#properties","text":"Name Type Description Notes height float width float [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImageMetadata/","text":"ImageMetadata \u00b6 Properties \u00b6 Name Type Description Notes cells ImageCells info ImageInfo [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImageMetadata"},{"location":"apis/public/ImageMetadata/#imagemetadata","text":"","title":"ImageMetadata"},{"location":"apis/public/ImageMetadata/#properties","text":"Name Type Description Notes cells ImageCells info ImageInfo [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImageSource/","text":"ImageSource \u00b6 Properties \u00b6 Name Type Description Notes proj_key str [optional] scratch_id str [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImageSource"},{"location":"apis/public/ImageSource/#imagesource","text":"","title":"ImageSource"},{"location":"apis/public/ImageSource/#properties","text":"Name Type Description Notes proj_key str [optional] scratch_id str [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportFromElasticToDataCatalogOptions/","text":"ImportFromElasticToDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes coordinates ElasticCoordinates [optional] elastic_id str [optional] parameters ImportFromElasticToDataCatalogOptionsParameters [Back to Model list] [Back to API list] [Back to README]","title":"ImportFromElasticToDataCatalogOptions"},{"location":"apis/public/ImportFromElasticToDataCatalogOptions/#importfromelastictodatacatalogoptions","text":"","title":"ImportFromElasticToDataCatalogOptions"},{"location":"apis/public/ImportFromElasticToDataCatalogOptions/#properties","text":"Name Type Description Notes coordinates ElasticCoordinates [optional] elastic_id str [optional] parameters ImportFromElasticToDataCatalogOptionsParameters [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParameters/","text":"ImportFromElasticToDataCatalogOptionsParameters \u00b6 Properties \u00b6 Name Type Description Notes import_s3_data bool [optional] index str page_size float [optional] query_options ImportFromElasticToDataCatalogOptionsParametersQueryOptions s3 ImportFromElasticToDataCatalogS3Coords [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImportFromElasticToDataCatalogOptionsParameters"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParameters/#importfromelastictodatacatalogoptionsparameters","text":"","title":"ImportFromElasticToDataCatalogOptionsParameters"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParameters/#properties","text":"Name Type Description Notes import_s3_data bool [optional] index str page_size float [optional] query_options ImportFromElasticToDataCatalogOptionsParametersQueryOptions s3 ImportFromElasticToDataCatalogS3Coords [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParametersQueryOptions/","text":"ImportFromElasticToDataCatalogOptionsParametersQueryOptions \u00b6 Properties \u00b6 Name Type Description Notes source list[str] [optional] query dict(str, object) [optional] size float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImportFromElasticToDataCatalogOptionsParametersQueryOptions"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParametersQueryOptions/#importfromelastictodatacatalogoptionsparametersqueryoptions","text":"","title":"ImportFromElasticToDataCatalogOptionsParametersQueryOptions"},{"location":"apis/public/ImportFromElasticToDataCatalogOptionsParametersQueryOptions/#properties","text":"Name Type Description Notes source list[str] [optional] query dict(str, object) [optional] size float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportFromElasticToDataCatalogS3Coords/","text":"ImportFromElasticToDataCatalogS3Coords \u00b6 Properties \u00b6 Name Type Description Notes access_key str bucket str host str key_prefix str location str port int secret_key str ssl bool verify_ssl bool [Back to Model list] [Back to API list] [Back to README]","title":"ImportFromElasticToDataCatalogS3Coords"},{"location":"apis/public/ImportFromElasticToDataCatalogS3Coords/#importfromelastictodatacatalogs3coords","text":"","title":"ImportFromElasticToDataCatalogS3Coords"},{"location":"apis/public/ImportFromElasticToDataCatalogS3Coords/#properties","text":"Name Type Description Notes access_key str bucket str host str key_prefix str location str port int secret_key str ssl bool verify_ssl bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportToDataCatalogCollectionOptions/","text":"ImportToDataCatalogCollectionOptions \u00b6 Properties \u00b6 Name Type Description Notes ccs ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs [optional] elastic ImportFromElasticToDataCatalogOptions [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImportToDataCatalogCollectionOptions"},{"location":"apis/public/ImportToDataCatalogCollectionOptions/#importtodatacatalogcollectionoptions","text":"","title":"ImportToDataCatalogCollectionOptions"},{"location":"apis/public/ImportToDataCatalogCollectionOptions/#properties","text":"Name Type Description Notes ccs ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs [optional] elastic ImportFromElasticToDataCatalogOptions [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ImportToDataCatalogOptions/","text":"ImportToDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes coordinates MongoS3CoordinatesWithCollectionList [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ImportToDataCatalogOptions"},{"location":"apis/public/ImportToDataCatalogOptions/#importtodatacatalogoptions","text":"","title":"ImportToDataCatalogOptions"},{"location":"apis/public/ImportToDataCatalogOptions/#properties","text":"Name Type Description Notes coordinates MongoS3CoordinatesWithCollectionList [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InferProjectDataCatalogCategorySchema/","text":"InferProjectDataCatalogCategorySchema \u00b6 Properties \u00b6 Name Type Description Notes sample_size int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InferProjectDataCatalogCategorySchema"},{"location":"apis/public/InferProjectDataCatalogCategorySchema/#inferprojectdatacatalogcategoryschema","text":"","title":"InferProjectDataCatalogCategorySchema"},{"location":"apis/public/InferProjectDataCatalogCategorySchema/#properties","text":"Name Type Description Notes sample_size int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineObject/","text":"InlineObject \u00b6 Properties \u00b6 Name Type Description Notes snapshot TakeSnapshotSettingsBackendAware [Back to Model list] [Back to API list] [Back to README]","title":"InlineObject"},{"location":"apis/public/InlineObject/#inlineobject","text":"","title":"InlineObject"},{"location":"apis/public/InlineObject/#properties","text":"Name Type Description Notes snapshot TakeSnapshotSettingsBackendAware [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineObject1/","text":"InlineObject1 \u00b6 Properties \u00b6 Name Type Description Notes access_token str catalog_document_collections list[CatalogReference] ccs_document_collections list[CcsCollectionReference] data_catalogs list[CatalogReference] [optional] entity_mappings dict(str, str) [optional] models list[CpsModelReference] [Back to Model list] [Back to API list] [Back to README]","title":"InlineObject1"},{"location":"apis/public/InlineObject1/#inlineobject1","text":"","title":"InlineObject1"},{"location":"apis/public/InlineObject1/#properties","text":"Name Type Description Notes access_token str catalog_document_collections list[CatalogReference] ccs_document_collections list[CcsCollectionReference] data_catalogs list[CatalogReference] [optional] entity_mappings dict(str, str) [optional] models list[CpsModelReference] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineObject2/","text":"InlineObject2 \u00b6 Properties \u00b6 Name Type Description Notes snapshot TakeSnapshotSettings [Back to Model list] [Back to API list] [Back to README]","title":"InlineObject2"},{"location":"apis/public/InlineObject2/#inlineobject2","text":"","title":"InlineObject2"},{"location":"apis/public/InlineObject2/#properties","text":"Name Type Description Notes snapshot TakeSnapshotSettings [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineObject3/","text":"InlineObject3 \u00b6 Properties \u00b6 Name Type Description Notes info ProjectProjKeyBagsBagKeyTasksExportDatasetInfo [Back to Model list] [Back to API list] [Back to README]","title":"InlineObject3"},{"location":"apis/public/InlineObject3/#inlineobject3","text":"","title":"InlineObject3"},{"location":"apis/public/InlineObject3/#properties","text":"Name Type Description Notes info ProjectProjKeyBagsBagKeyTasksExportDatasetInfo [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineResponse200/","text":"InlineResponse200 \u00b6 Properties \u00b6 Name Type Description Notes elastic_query_max_size float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InlineResponse200"},{"location":"apis/public/InlineResponse200/#inlineresponse200","text":"","title":"InlineResponse200"},{"location":"apis/public/InlineResponse200/#properties","text":"Name Type Description Notes elastic_query_max_size float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineResponse2001/","text":"InlineResponse2001 \u00b6 Properties \u00b6 Name Type Description Notes processing_models list[ProcessingModelDescription] [Back to Model list] [Back to API list] [Back to README]","title":"InlineResponse2001"},{"location":"apis/public/InlineResponse2001/#inlineresponse2001","text":"","title":"InlineResponse2001"},{"location":"apis/public/InlineResponse2001/#properties","text":"Name Type Description Notes processing_models list[ProcessingModelDescription] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineResponse2002/","text":"InlineResponse2002 \u00b6 Properties \u00b6 Name Type Description Notes done bool result object task_id str task_status str [Back to Model list] [Back to API list] [Back to README]","title":"InlineResponse2002"},{"location":"apis/public/InlineResponse2002/#inlineresponse2002","text":"","title":"InlineResponse2002"},{"location":"apis/public/InlineResponse2002/#properties","text":"Name Type Description Notes done bool result object task_id str task_status str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/InlineResponse2003/","text":"InlineResponse2003 \u00b6 Properties \u00b6 Name Type Description Notes avail_cpu_slots int [optional] avail_mem_slots int [optional] avail_slots int [optional] name str [optional] num_nodes int [optional] number_kgs int [optional] running_kgs int [optional] workers_pool str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InlineResponse2003"},{"location":"apis/public/InlineResponse2003/#inlineresponse2003","text":"","title":"InlineResponse2003"},{"location":"apis/public/InlineResponse2003/#properties","text":"Name Type Description Notes avail_cpu_slots int [optional] avail_mem_slots int [optional] avail_slots int [optional] name str [optional] num_nodes int [optional] number_kgs int [optional] running_kgs int [optional] workers_pool str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KgSnapshot/","text":"KgSnapshot \u00b6 Properties \u00b6 Name Type Description Notes data_flow object [optional] is_current bool [optional] name str [optional] project_task_id str [optional] task_type str [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"KgSnapshot"},{"location":"apis/public/KgSnapshot/#kgsnapshot","text":"","title":"KgSnapshot"},{"location":"apis/public/KgSnapshot/#properties","text":"Name Type Description Notes data_flow object [optional] is_current bool [optional] name str [optional] project_task_id str [optional] task_type str [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KgcDataInput/","text":"KgcDataInput \u00b6 Properties \u00b6 Name Type Description Notes config object data_flow list[dict(str, object)] [Back to Model list] [Back to API list] [Back to README]","title":"KgcDataInput"},{"location":"apis/public/KgcDataInput/#kgcdatainput","text":"","title":"KgcDataInput"},{"location":"apis/public/KgcDataInput/#properties","text":"Name Type Description Notes config object data_flow list[dict(str, object)] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KibanaSavedQueriesResult/","text":"KibanaSavedQueriesResult \u00b6 Properties \u00b6 Name Type Description Notes description str [optional] fields list[str] [optional] query str [optional] title str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"KibanaSavedQueriesResult"},{"location":"apis/public/KibanaSavedQueriesResult/#kibanasavedqueriesresult","text":"","title":"KibanaSavedQueriesResult"},{"location":"apis/public/KibanaSavedQueriesResult/#properties","text":"Name Type Description Notes description str [optional] fields list[str] [optional] query str [optional] title str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphAuthenticationCallback/","text":"KnowledgeGraphAuthenticationCallback \u00b6 Properties \u00b6 Name Type Description Notes callback_url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"KnowledgeGraphAuthenticationCallback"},{"location":"apis/public/KnowledgeGraphAuthenticationCallback/#knowledgegraphauthenticationcallback","text":"","title":"KnowledgeGraphAuthenticationCallback"},{"location":"apis/public/KnowledgeGraphAuthenticationCallback/#properties","text":"Name Type Description Notes callback_url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphChartUpgradeOptions/","text":"KnowledgeGraphChartUpgradeOptions \u00b6 Properties \u00b6 Name Type Description Notes chart str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"KnowledgeGraphChartUpgradeOptions"},{"location":"apis/public/KnowledgeGraphChartUpgradeOptions/#knowledgegraphchartupgradeoptions","text":"","title":"KnowledgeGraphChartUpgradeOptions"},{"location":"apis/public/KnowledgeGraphChartUpgradeOptions/#properties","text":"Name Type Description Notes chart str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphDeploymentRecreationOptions/","text":"KnowledgeGraphDeploymentRecreationOptions \u00b6 Properties \u00b6 Name Type Description Notes force bool [Back to Model list] [Back to API list] [Back to README]","title":"KnowledgeGraphDeploymentRecreationOptions"},{"location":"apis/public/KnowledgeGraphDeploymentRecreationOptions/#knowledgegraphdeploymentrecreationoptions","text":"","title":"KnowledgeGraphDeploymentRecreationOptions"},{"location":"apis/public/KnowledgeGraphDeploymentRecreationOptions/#properties","text":"Name Type Description Notes force bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphSnapshotOptions/","text":"KnowledgeGraphSnapshotOptions \u00b6 Properties \u00b6 Name Type Description Notes name str [Back to Model list] [Back to API list] [Back to README]","title":"KnowledgeGraphSnapshotOptions"},{"location":"apis/public/KnowledgeGraphSnapshotOptions/#knowledgegraphsnapshotoptions","text":"","title":"KnowledgeGraphSnapshotOptions"},{"location":"apis/public/KnowledgeGraphSnapshotOptions/#properties","text":"Name Type Description Notes name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphSystemInformation/","text":"KnowledgeGraphSystemInformation \u00b6 Properties \u00b6 Name Type Description Notes backend dict(str, SystemKgsBackend) [optional] bag_domain str [optional] bag_key str [optional] bag_url str [optional] name str [optional] proj_key str [optional] project_name str [optional] public bool [optional] slug str [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"KnowledgeGraphSystemInformation"},{"location":"apis/public/KnowledgeGraphSystemInformation/#knowledgegraphsysteminformation","text":"","title":"KnowledgeGraphSystemInformation"},{"location":"apis/public/KnowledgeGraphSystemInformation/#properties","text":"Name Type Description Notes backend dict(str, SystemKgsBackend) [optional] bag_domain str [optional] bag_key str [optional] bag_url str [optional] name str [optional] proj_key str [optional] project_name str [optional] public bool [optional] slug str [optional] timestamp float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/KnowledgeGraphsApi/","text":"deepsearch.cps.apis.public.KnowledgeGraphsApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description assemble_project_knowledge_graph_data_flow POST /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow backend_assemble_project_kg_data_flow POST /backend/project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow backend_create_project_kg POST /backend/project/{proj_key}/bags backend_create_project_kg_snapshot_from_data_flow_assembly POST /backend/project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow/latest/snapshots backend_get_project_kg_status GET /backend/project/{proj_key}/bags/{bag_key}/status backend_list_project_kgs GET /backend/project/{proj_key}/bags backend_update_project_kg_metadata PATCH /backend/project/{proj_key}/bags/{bag_key} create_project_knowledge_graph POST /project/{proj_key}/bags create_project_knowledge_graph_authentication_token GET /project/{proj_key}/bags/{bag_key}/auth_token create_project_knowledge_graph_backup POST /project/{proj_key}/bags/{bag_key}/tasks/backup create_project_knowledge_graph_delete_token POST /project/{proj_key}/bags/{bag_key}/delete_token create_project_knowledge_graph_snapshot POST /project/{proj_key}/bags/{bag_key}/snapshots create_project_knowledge_graph_snapshot_from_data_flow_assembly POST /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow/latest/snapshots delete_project_knowledge_graph DELETE /project/{proj_key}/bags/{bag_key} delete_project_knowledge_graph_snapshot DELETE /project/{proj_key}/bags/{bag_key}/snapshots/{execution_id} get_project_knowledge_graph_authentication_callback GET /project/{proj_key}/bags/{bag_key}/auth_callback get_project_knowledge_graph_status GET /project/{proj_key}/bags/{bag_key}/status get_project_knowledge_graph_usage_stats GET /project/{proj_key}/bags/{bag_key}/usage_stats list_project_knowledge_graph_assemble_tasks GET /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow list_project_knowledge_graph_load_tasks GET /project/{proj_key}/bags/{bag_key}/tasks/load_dataflow list_project_knowledge_graph_snapshots GET /project/{proj_key}/bags/{bag_key}/snapshots list_project_knowledge_graphs GET /project/{proj_key}/bags list_public_knowledge_graphs GET /project/public/bags load_project_knowledge_graph_data_flow POST /project/{proj_key}/bags/{bag_key}/tasks/load_dataflow load_project_knowledge_graph_snapshot POST /project/{proj_key}/bags/{bag_key}/snapshots/{execution_id}/actions/load recreate_project_knowledge_graph_deployment POST /project/{proj_key}/bags/{bag_key}/tasks/recreate_deployment restore_project_knowledge_graph_backup POST /project/{proj_key}/bags/{bag_key}/tasks/restore resume_project_knowledge_graph POST /project/{proj_key}/bags/{bag_key}/tasks/resume suspend_project_knowledge_graph POST /project/{proj_key}/bags/{bag_key}/tasks/suspend update_project_knowledge_graph_metadata PATCH /project/{proj_key}/bags/{bag_key} upgrade_project_knowledge_graph_deployment POST /project/{proj_key}/bags/{bag_key}/tasks/upgrade assemble_project_knowledge_graph_data_flow \u00b6 ProjectTask assemble_project_knowledge_graph_data_flow(proj_key, bag_key, options) Assemble a data flow on a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . AssembleDataFlowIntoKnowledgeGraphOptions1 () # AssembleDataFlowIntoKnowledgeGraphOptions1 | try : api_response = api_instance . assemble_project_knowledge_graph_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->assemble_project_knowledge_graph_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options AssembleDataFlowIntoKnowledgeGraphOptions1 Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_assemble_project_kg_data_flow \u00b6 ProjectTask backend_assemble_project_kg_data_flow(proj_key, bag_key, options) Assemble a data flow on a Knowledge Graph, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . AssembleDataFlowIntoKnowledgeGraphOptions () # AssembleDataFlowIntoKnowledgeGraphOptions | try : api_response = api_instance . backend_assemble_project_kg_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_assemble_project_kg_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options AssembleDataFlowIntoKnowledgeGraphOptions Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_create_project_kg \u00b6 BagBackendAware backend_create_project_kg(proj_key, data) Create new BAG, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | data = deepsearch . cps . apis . public . CreateKnowledgeGraphOptions () # CreateKnowledgeGraphOptions | try : api_response = api_instance . backend_create_project_kg ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_create_project_kg: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str data CreateKnowledgeGraphOptions Return type \u00b6 BagBackendAware Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 OK - 400 Invalid parameters. - 403 Create knowledge graphs is disabled. - 409 Cannot create BAG because one already exists with that name. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_create_project_kg_snapshot_from_data_flow_assembly \u00b6 ProjectTask backend_create_project_kg_snapshot_from_data_flow_assembly(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph from the last data flow assembly task, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . InlineObject () # InlineObject | try : api_response = api_instance . backend_create_project_kg_snapshot_from_data_flow_assembly ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_create_project_kg_snapshot_from_data_flow_assembly: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body InlineObject Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 404 KG/BAG/Data Flow Assembly not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_get_project_kg_status \u00b6 BagStatusBackendAware backend_get_project_kg_status(proj_key, bag_key, details=details) Get the status of a Knowledge Graph, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | details = False # bool | (optional) (default to False) try : api_response = api_instance . backend_get_project_kg_status ( proj_key , bag_key , details = details ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_get_project_kg_status: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str details bool [optional] [default to False] Return type \u00b6 BagStatusBackendAware Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Knowledge Graph status. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_list_project_kgs \u00b6 list[BagBackendAware] backend_list_project_kgs(proj_key, term=term) List all bags in the project, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | term = 'term_example' # str | (optional) try : api_response = api_instance . backend_list_project_kgs ( proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_list_project_kgs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str term str [optional] Return type \u00b6 list[BagBackendAware] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] backend_update_project_kg_metadata \u00b6 BagBackendAware backend_update_project_kg_metadata(proj_key, bag_key, data) Update the metadata of a Knowledge graph, backend-aware Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . PatchKnowledgeGraphOptions () # PatchKnowledgeGraphOptions | try : api_response = api_instance . backend_update_project_kg_metadata ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_update_project_kg_metadata: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str data PatchKnowledgeGraphOptions Return type \u00b6 BagBackendAware Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Knowledge graph metadata updated. - 404 Knowledge graph not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph \u00b6 Bag create_project_knowledge_graph(proj_key, data) Create new BAG Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | data = deepsearch . cps . apis . public . CreateKnowledgeGraphOptions1 () # CreateKnowledgeGraphOptions1 | try : api_response = api_instance . create_project_knowledge_graph ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str data CreateKnowledgeGraphOptions1 Return type \u00b6 Bag Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 OK - 400 Invalid parameters. - 403 Create knowledge graphs is disabled. - 409 Cannot create BAG because one already exists with that name. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_authentication_token \u00b6 TokenResponse create_project_knowledge_graph_authentication_token(proj_key, bag_key) Get a token used to authenticate in the Erlenmeyer / KG APIs of a BAG. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . create_project_knowledge_graph_authentication_token ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_authentication_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 BAG auth token. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_backup \u00b6 Task create_project_knowledge_graph_backup(proj_key, bag_key, options) Back up a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . BackupKnowledgeGraphOptions () # BackupKnowledgeGraphOptions | try : api_response = api_instance . create_project_knowledge_graph_backup ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_backup: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options BackupKnowledgeGraphOptions Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 OK - 400 Invalid parameters. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_delete_token \u00b6 TokenResponse create_project_knowledge_graph_delete_token(proj_key, bag_key) Get a token used to confirm the deletion of a BAG. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . create_project_knowledge_graph_delete_token ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_delete_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 BAG deletion token. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_snapshot \u00b6 ProjectTask create_project_knowledge_graph_snapshot(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph, with its current state. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphSnapshotOptions () # KnowledgeGraphSnapshotOptions | try : api_response = api_instance . create_project_knowledge_graph_snapshot ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_snapshot: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body KnowledgeGraphSnapshotOptions Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 403 Feature is disabled on this instance. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_project_knowledge_graph_snapshot_from_data_flow_assembly \u00b6 ProjectTask create_project_knowledge_graph_snapshot_from_data_flow_assembly(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph from the last data flow assembly task. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . InlineObject2 () # InlineObject2 | try : api_response = api_instance . create_project_knowledge_graph_snapshot_from_data_flow_assembly ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_snapshot_from_data_flow_assembly: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body InlineObject2 Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 404 KG/BAG/Data Flow Assembly not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_knowledge_graph \u00b6 delete_project_knowledge_graph(proj_key, bag_key, confirmation_token) Delete a BAG Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_knowledge_graph ( proj_key , bag_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->delete_project_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str confirmation_token str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 BAG deleted. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_knowledge_graph_snapshot \u00b6 delete_project_knowledge_graph_snapshot(proj_key, bag_key, execution_id) Delete a snapshot resulting from an assembled data flow. The execution log itself is not deleted. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | execution_id = 'execution_id_example' # str | try : api_instance . delete_project_knowledge_graph_snapshot ( proj_key , bag_key , execution_id ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->delete_project_knowledge_graph_snapshot: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str execution_id str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 OK - 400 Invalid parameters. - 404 KG/BAG/Snapshot not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_knowledge_graph_authentication_callback \u00b6 KnowledgeGraphAuthenticationCallback get_project_knowledge_graph_authentication_callback(proj_key, bag_key, bag_token) Final step of redirection for authentication on a BAG. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | bag_token = 'bag_token_example' # str | try : api_response = api_instance . get_project_knowledge_graph_authentication_callback ( proj_key , bag_key , bag_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_authentication_callback: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str bag_token str Return type \u00b6 KnowledgeGraphAuthenticationCallback Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 BAG auth redirect URL. - 401 Unauthorized. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_knowledge_graph_status \u00b6 BagStatus get_project_knowledge_graph_status(proj_key, bag_key, details=details) Get the status of a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | details = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_knowledge_graph_status ( proj_key , bag_key , details = details ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_status: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str details bool [optional] [default to False] Return type \u00b6 BagStatus Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Knowledge Graph status. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_knowledge_graph_usage_stats \u00b6 UsageStats get_project_knowledge_graph_usage_stats(proj_key, bag_key) Get the usage stats of a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . get_project_knowledge_graph_usage_stats ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_usage_stats: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str Return type \u00b6 UsageStats Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Knowledge Graph usage stats. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_knowledge_graph_assemble_tasks \u00b6 list[DataFlowAssembleIntoKnowledgeGraphTask] list_project_knowledge_graph_assemble_tasks(proj_key, bag_key, limit=limit, skip=skip) List assemble tasks for a Knowledge Graph. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) try : api_response = api_instance . list_project_knowledge_graph_assemble_tasks ( proj_key , bag_key , limit = limit , skip = skip ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_assemble_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str limit int [optional] [default to 50] skip int [optional] [default to 0] Return type \u00b6 list[DataFlowAssembleIntoKnowledgeGraphTask] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_knowledge_graph_load_tasks \u00b6 list[DataFlowLoadIntoKnowledgeGraphTask] list_project_knowledge_graph_load_tasks(proj_key, bag_key, limit=limit, skip=skip) List load tasks for a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) try : api_response = api_instance . list_project_knowledge_graph_load_tasks ( proj_key , bag_key , limit = limit , skip = skip ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_load_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str limit int [optional] [default to 50] skip int [optional] [default to 0] Return type \u00b6 list[DataFlowLoadIntoKnowledgeGraphTask] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_knowledge_graph_snapshots \u00b6 list[KgSnapshot] list_project_knowledge_graph_snapshots(proj_key, bag_key) List snapshots for a knowledge graph from assembled data flows. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . list_project_knowledge_graph_snapshots ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_snapshots: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str Return type \u00b6 list[KgSnapshot] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Snapshots - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_knowledge_graphs \u00b6 list[Bag] list_project_knowledge_graphs(proj_key, term=term) List all bags in the project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | term = 'term_example' # str | (optional) try : api_response = api_instance . list_project_knowledge_graphs ( proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graphs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str term str [optional] Return type \u00b6 list[Bag] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_knowledge_graphs \u00b6 list[Bag] list_public_knowledge_graphs(term=term) List all public BAGs Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) term = 'term_example' # str | (optional) try : api_response = api_instance . list_public_knowledge_graphs ( term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_public_knowledge_graphs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes term str [optional] Return type \u00b6 list[Bag] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] load_project_knowledge_graph_data_flow \u00b6 ProjectTask load_project_knowledge_graph_data_flow(proj_key, bag_key, options) Load a data flow onto a Knowledge Graph. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . LoadDataFlowIntoKnowledgeGraphOptions () # LoadDataFlowIntoKnowledgeGraphOptions | try : api_response = api_instance . load_project_knowledge_graph_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->load_project_knowledge_graph_data_flow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options LoadDataFlowIntoKnowledgeGraphOptions Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] load_project_knowledge_graph_snapshot \u00b6 Task load_project_knowledge_graph_snapshot(proj_key, bag_key, execution_id) Load a snapshot resulting from an assembled data flow Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | execution_id = 'execution_id_example' # str | try : api_response = api_instance . load_project_knowledge_graph_snapshot ( proj_key , bag_key , execution_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->load_project_knowledge_graph_snapshot: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str execution_id str Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Snapshot is being loaded. - 400 Invalid parameters. - 403 Feature is disabled on this instance. - 404 KG/BAG/Snapshot not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] recreate_project_knowledge_graph_deployment \u00b6 recreate_project_knowledge_graph_deployment(proj_key, bag_key, body) (Re)create the deployment for a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphDeploymentRecreationOptions () # KnowledgeGraphDeploymentRecreationOptions | try : api_instance . recreate_project_knowledge_graph_deployment ( proj_key , bag_key , body ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->recreate_project_knowledge_graph_deployment: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body KnowledgeGraphDeploymentRecreationOptions Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Deployment upgrading. - 404 Knowledge Graph doesn't exist. - 409 Refused to recreate the deployment since it already exists and the `force` flag is not `true`. - [Back to top] [Back to API list] [Back to Model list] [Back to README] restore_project_knowledge_graph_backup \u00b6 Task restore_project_knowledge_graph_backup(proj_key, bag_key, options) Restore a back up of a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . RestoreKnowledgeGraphBackupOptions () # RestoreKnowledgeGraphBackupOptions | try : api_response = api_instance . restore_project_knowledge_graph_backup ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->restore_project_knowledge_graph_backup: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options RestoreKnowledgeGraphBackupOptions Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 OK - 400 Invalid parameters. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] resume_project_knowledge_graph \u00b6 ProjectTask resume_project_knowledge_graph(proj_key, bag_key, body) Resume a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . ResumeKnowledgeGraphOptions () # ResumeKnowledgeGraphOptions | try : api_response = api_instance . resume_project_knowledge_graph ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->resume_project_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body ResumeKnowledgeGraphOptions Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 403 Feature is disabled on this instance. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] suspend_project_knowledge_graph \u00b6 ProjectTask suspend_project_knowledge_graph(proj_key, bag_key, options) Suspend a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . SuspendKnowledgeGraphOptions () # SuspendKnowledgeGraphOptions | try : api_response = api_instance . suspend_project_knowledge_graph ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->suspend_project_knowledge_graph: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str options SuspendKnowledgeGraphOptions Return type \u00b6 ProjectTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_knowledge_graph_metadata \u00b6 Bag update_project_knowledge_graph_metadata(proj_key, bag_key, data) Update the metadata of a Knowledge graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . PatchKnowledgeGraphOptions1 () # PatchKnowledgeGraphOptions1 | try : api_response = api_instance . update_project_knowledge_graph_metadata ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->update_project_knowledge_graph_metadata: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str data PatchKnowledgeGraphOptions1 Return type \u00b6 Bag Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Knowledge graph metadata updated. - 404 Knowledge graph not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upgrade_project_knowledge_graph_deployment \u00b6 upgrade_project_knowledge_graph_deployment(proj_key, bag_key, body) Upgrade the deployment chart of a Knowledge Graph Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphChartUpgradeOptions () # KnowledgeGraphChartUpgradeOptions | try : api_instance . upgrade_project_knowledge_graph_deployment ( proj_key , bag_key , body ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->upgrade_project_knowledge_graph_deployment: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str bag_key str body KnowledgeGraphChartUpgradeOptions Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Chart upgrading. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"Public API"},{"location":"apis/public/KnowledgeGraphsApi/#deepsearchcpsapispublicknowledgegraphsapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description assemble_project_knowledge_graph_data_flow POST /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow backend_assemble_project_kg_data_flow POST /backend/project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow backend_create_project_kg POST /backend/project/{proj_key}/bags backend_create_project_kg_snapshot_from_data_flow_assembly POST /backend/project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow/latest/snapshots backend_get_project_kg_status GET /backend/project/{proj_key}/bags/{bag_key}/status backend_list_project_kgs GET /backend/project/{proj_key}/bags backend_update_project_kg_metadata PATCH /backend/project/{proj_key}/bags/{bag_key} create_project_knowledge_graph POST /project/{proj_key}/bags create_project_knowledge_graph_authentication_token GET /project/{proj_key}/bags/{bag_key}/auth_token create_project_knowledge_graph_backup POST /project/{proj_key}/bags/{bag_key}/tasks/backup create_project_knowledge_graph_delete_token POST /project/{proj_key}/bags/{bag_key}/delete_token create_project_knowledge_graph_snapshot POST /project/{proj_key}/bags/{bag_key}/snapshots create_project_knowledge_graph_snapshot_from_data_flow_assembly POST /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow/latest/snapshots delete_project_knowledge_graph DELETE /project/{proj_key}/bags/{bag_key} delete_project_knowledge_graph_snapshot DELETE /project/{proj_key}/bags/{bag_key}/snapshots/{execution_id} get_project_knowledge_graph_authentication_callback GET /project/{proj_key}/bags/{bag_key}/auth_callback get_project_knowledge_graph_status GET /project/{proj_key}/bags/{bag_key}/status get_project_knowledge_graph_usage_stats GET /project/{proj_key}/bags/{bag_key}/usage_stats list_project_knowledge_graph_assemble_tasks GET /project/{proj_key}/bags/{bag_key}/tasks/assemble_dataflow list_project_knowledge_graph_load_tasks GET /project/{proj_key}/bags/{bag_key}/tasks/load_dataflow list_project_knowledge_graph_snapshots GET /project/{proj_key}/bags/{bag_key}/snapshots list_project_knowledge_graphs GET /project/{proj_key}/bags list_public_knowledge_graphs GET /project/public/bags load_project_knowledge_graph_data_flow POST /project/{proj_key}/bags/{bag_key}/tasks/load_dataflow load_project_knowledge_graph_snapshot POST /project/{proj_key}/bags/{bag_key}/snapshots/{execution_id}/actions/load recreate_project_knowledge_graph_deployment POST /project/{proj_key}/bags/{bag_key}/tasks/recreate_deployment restore_project_knowledge_graph_backup POST /project/{proj_key}/bags/{bag_key}/tasks/restore resume_project_knowledge_graph POST /project/{proj_key}/bags/{bag_key}/tasks/resume suspend_project_knowledge_graph POST /project/{proj_key}/bags/{bag_key}/tasks/suspend update_project_knowledge_graph_metadata PATCH /project/{proj_key}/bags/{bag_key} upgrade_project_knowledge_graph_deployment POST /project/{proj_key}/bags/{bag_key}/tasks/upgrade","title":"deepsearch.cps.apis.public.KnowledgeGraphsApi"},{"location":"apis/public/KnowledgeGraphsApi/#assemble_project_knowledge_graph_data_flow","text":"ProjectTask assemble_project_knowledge_graph_data_flow(proj_key, bag_key, options) Assemble a data flow on a Knowledge Graph","title":"assemble_project_knowledge_graph_data_flow"},{"location":"apis/public/KnowledgeGraphsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . AssembleDataFlowIntoKnowledgeGraphOptions1 () # AssembleDataFlowIntoKnowledgeGraphOptions1 | try : api_response = api_instance . assemble_project_knowledge_graph_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->assemble_project_knowledge_graph_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters","text":"Name Type Description Notes proj_key str bag_key str options AssembleDataFlowIntoKnowledgeGraphOptions1","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_assemble_project_kg_data_flow","text":"ProjectTask backend_assemble_project_kg_data_flow(proj_key, bag_key, options) Assemble a data flow on a Knowledge Graph, backend-aware","title":"backend_assemble_project_kg_data_flow"},{"location":"apis/public/KnowledgeGraphsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . AssembleDataFlowIntoKnowledgeGraphOptions () # AssembleDataFlowIntoKnowledgeGraphOptions | try : api_response = api_instance . backend_assemble_project_kg_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_assemble_project_kg_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_1","text":"Name Type Description Notes proj_key str bag_key str options AssembleDataFlowIntoKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_1","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_1","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_create_project_kg","text":"BagBackendAware backend_create_project_kg(proj_key, data) Create new BAG, backend-aware","title":"backend_create_project_kg"},{"location":"apis/public/KnowledgeGraphsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | data = deepsearch . cps . apis . public . CreateKnowledgeGraphOptions () # CreateKnowledgeGraphOptions | try : api_response = api_instance . backend_create_project_kg ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_create_project_kg: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_2","text":"Name Type Description Notes proj_key str data CreateKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_2","text":"BagBackendAware","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_2","text":"Status code Description Response headers 201 OK - 400 Invalid parameters. - 403 Create knowledge graphs is disabled. - 409 Cannot create BAG because one already exists with that name. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_create_project_kg_snapshot_from_data_flow_assembly","text":"ProjectTask backend_create_project_kg_snapshot_from_data_flow_assembly(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph from the last data flow assembly task, backend-aware","title":"backend_create_project_kg_snapshot_from_data_flow_assembly"},{"location":"apis/public/KnowledgeGraphsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . InlineObject () # InlineObject | try : api_response = api_instance . backend_create_project_kg_snapshot_from_data_flow_assembly ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_create_project_kg_snapshot_from_data_flow_assembly: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_3","text":"Name Type Description Notes proj_key str bag_key str body InlineObject","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_3","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_3","text":"Status code Description Response headers 200 Task started. - 404 KG/BAG/Data Flow Assembly not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_get_project_kg_status","text":"BagStatusBackendAware backend_get_project_kg_status(proj_key, bag_key, details=details) Get the status of a Knowledge Graph, backend-aware","title":"backend_get_project_kg_status"},{"location":"apis/public/KnowledgeGraphsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | details = False # bool | (optional) (default to False) try : api_response = api_instance . backend_get_project_kg_status ( proj_key , bag_key , details = details ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_get_project_kg_status: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_4","text":"Name Type Description Notes proj_key str bag_key str details bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_4","text":"BagStatusBackendAware","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_4","text":"Status code Description Response headers 200 Knowledge Graph status. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_list_project_kgs","text":"list[BagBackendAware] backend_list_project_kgs(proj_key, term=term) List all bags in the project, backend-aware","title":"backend_list_project_kgs"},{"location":"apis/public/KnowledgeGraphsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | term = 'term_example' # str | (optional) try : api_response = api_instance . backend_list_project_kgs ( proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_list_project_kgs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_5","text":"Name Type Description Notes proj_key str term str [optional]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_5","text":"list[BagBackendAware]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_5","text":"Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#backend_update_project_kg_metadata","text":"BagBackendAware backend_update_project_kg_metadata(proj_key, bag_key, data) Update the metadata of a Knowledge graph, backend-aware","title":"backend_update_project_kg_metadata"},{"location":"apis/public/KnowledgeGraphsApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . PatchKnowledgeGraphOptions () # PatchKnowledgeGraphOptions | try : api_response = api_instance . backend_update_project_kg_metadata ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->backend_update_project_kg_metadata: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_6","text":"Name Type Description Notes proj_key str bag_key str data PatchKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_6","text":"BagBackendAware","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_6","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_6","text":"Status code Description Response headers 200 Knowledge graph metadata updated. - 404 Knowledge graph not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph","text":"Bag create_project_knowledge_graph(proj_key, data) Create new BAG","title":"create_project_knowledge_graph"},{"location":"apis/public/KnowledgeGraphsApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | data = deepsearch . cps . apis . public . CreateKnowledgeGraphOptions1 () # CreateKnowledgeGraphOptions1 | try : api_response = api_instance . create_project_knowledge_graph ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_7","text":"Name Type Description Notes proj_key str data CreateKnowledgeGraphOptions1","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_7","text":"Bag","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_7","text":"Status code Description Response headers 201 OK - 400 Invalid parameters. - 403 Create knowledge graphs is disabled. - 409 Cannot create BAG because one already exists with that name. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph_authentication_token","text":"TokenResponse create_project_knowledge_graph_authentication_token(proj_key, bag_key) Get a token used to authenticate in the Erlenmeyer / KG APIs of a BAG.","title":"create_project_knowledge_graph_authentication_token"},{"location":"apis/public/KnowledgeGraphsApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . create_project_knowledge_graph_authentication_token ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_authentication_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_8","text":"Name Type Description Notes proj_key str bag_key str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_8","text":"TokenResponse","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_8","text":"Status code Description Response headers 200 BAG auth token. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph_backup","text":"Task create_project_knowledge_graph_backup(proj_key, bag_key, options) Back up a Knowledge Graph","title":"create_project_knowledge_graph_backup"},{"location":"apis/public/KnowledgeGraphsApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . BackupKnowledgeGraphOptions () # BackupKnowledgeGraphOptions | try : api_response = api_instance . create_project_knowledge_graph_backup ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_backup: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_9","text":"Name Type Description Notes proj_key str bag_key str options BackupKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_9","text":"Task","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_9","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_9","text":"Status code Description Response headers 201 OK - 400 Invalid parameters. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph_delete_token","text":"TokenResponse create_project_knowledge_graph_delete_token(proj_key, bag_key) Get a token used to confirm the deletion of a BAG.","title":"create_project_knowledge_graph_delete_token"},{"location":"apis/public/KnowledgeGraphsApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . create_project_knowledge_graph_delete_token ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_delete_token: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_10","text":"Name Type Description Notes proj_key str bag_key str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_10","text":"TokenResponse","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_10","text":"Status code Description Response headers 200 BAG deletion token. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph_snapshot","text":"ProjectTask create_project_knowledge_graph_snapshot(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph, with its current state.","title":"create_project_knowledge_graph_snapshot"},{"location":"apis/public/KnowledgeGraphsApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphSnapshotOptions () # KnowledgeGraphSnapshotOptions | try : api_response = api_instance . create_project_knowledge_graph_snapshot ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_snapshot: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_11","text":"Name Type Description Notes proj_key str bag_key str body KnowledgeGraphSnapshotOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_11","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_11","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_11","text":"Status code Description Response headers 200 Task started. - 403 Feature is disabled on this instance. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#create_project_knowledge_graph_snapshot_from_data_flow_assembly","text":"ProjectTask create_project_knowledge_graph_snapshot_from_data_flow_assembly(proj_key, bag_key, body) Create a snapshot of a Knowledge Graph from the last data flow assembly task.","title":"create_project_knowledge_graph_snapshot_from_data_flow_assembly"},{"location":"apis/public/KnowledgeGraphsApi/#example_12","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . InlineObject2 () # InlineObject2 | try : api_response = api_instance . create_project_knowledge_graph_snapshot_from_data_flow_assembly ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->create_project_knowledge_graph_snapshot_from_data_flow_assembly: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_12","text":"Name Type Description Notes proj_key str bag_key str body InlineObject2","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_12","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_12","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_12","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_12","text":"Status code Description Response headers 200 Task started. - 404 KG/BAG/Data Flow Assembly not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#delete_project_knowledge_graph","text":"delete_project_knowledge_graph(proj_key, bag_key, confirmation_token) Delete a BAG","title":"delete_project_knowledge_graph"},{"location":"apis/public/KnowledgeGraphsApi/#example_13","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | confirmation_token = 'confirmation_token_example' # str | try : api_instance . delete_project_knowledge_graph ( proj_key , bag_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->delete_project_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_13","text":"Name Type Description Notes proj_key str bag_key str confirmation_token str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_13","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_13","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_13","text":"Status code Description Response headers 204 BAG deleted. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#delete_project_knowledge_graph_snapshot","text":"delete_project_knowledge_graph_snapshot(proj_key, bag_key, execution_id) Delete a snapshot resulting from an assembled data flow. The execution log itself is not deleted.","title":"delete_project_knowledge_graph_snapshot"},{"location":"apis/public/KnowledgeGraphsApi/#example_14","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | execution_id = 'execution_id_example' # str | try : api_instance . delete_project_knowledge_graph_snapshot ( proj_key , bag_key , execution_id ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->delete_project_knowledge_graph_snapshot: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_14","text":"Name Type Description Notes proj_key str bag_key str execution_id str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_14","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_14","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_14","text":"Status code Description Response headers 204 OK - 400 Invalid parameters. - 404 KG/BAG/Snapshot not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#get_project_knowledge_graph_authentication_callback","text":"KnowledgeGraphAuthenticationCallback get_project_knowledge_graph_authentication_callback(proj_key, bag_key, bag_token) Final step of redirection for authentication on a BAG.","title":"get_project_knowledge_graph_authentication_callback"},{"location":"apis/public/KnowledgeGraphsApi/#example_15","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | bag_token = 'bag_token_example' # str | try : api_response = api_instance . get_project_knowledge_graph_authentication_callback ( proj_key , bag_key , bag_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_authentication_callback: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_15","text":"Name Type Description Notes proj_key str bag_key str bag_token str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_15","text":"KnowledgeGraphAuthenticationCallback","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_15","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_15","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_15","text":"Status code Description Response headers 200 BAG auth redirect URL. - 401 Unauthorized. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#get_project_knowledge_graph_status","text":"BagStatus get_project_knowledge_graph_status(proj_key, bag_key, details=details) Get the status of a Knowledge Graph","title":"get_project_knowledge_graph_status"},{"location":"apis/public/KnowledgeGraphsApi/#example_16","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | details = False # bool | (optional) (default to False) try : api_response = api_instance . get_project_knowledge_graph_status ( proj_key , bag_key , details = details ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_status: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_16","text":"Name Type Description Notes proj_key str bag_key str details bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_16","text":"BagStatus","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_16","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_16","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_16","text":"Status code Description Response headers 200 Knowledge Graph status. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#get_project_knowledge_graph_usage_stats","text":"UsageStats get_project_knowledge_graph_usage_stats(proj_key, bag_key) Get the usage stats of a Knowledge Graph","title":"get_project_knowledge_graph_usage_stats"},{"location":"apis/public/KnowledgeGraphsApi/#example_17","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . get_project_knowledge_graph_usage_stats ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->get_project_knowledge_graph_usage_stats: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_17","text":"Name Type Description Notes proj_key str bag_key str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_17","text":"UsageStats","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_17","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_17","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_17","text":"Status code Description Response headers 200 Knowledge Graph usage stats. - 404 BAG not found. - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#list_project_knowledge_graph_assemble_tasks","text":"list[DataFlowAssembleIntoKnowledgeGraphTask] list_project_knowledge_graph_assemble_tasks(proj_key, bag_key, limit=limit, skip=skip) List assemble tasks for a Knowledge Graph.","title":"list_project_knowledge_graph_assemble_tasks"},{"location":"apis/public/KnowledgeGraphsApi/#example_18","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) try : api_response = api_instance . list_project_knowledge_graph_assemble_tasks ( proj_key , bag_key , limit = limit , skip = skip ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_assemble_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_18","text":"Name Type Description Notes proj_key str bag_key str limit int [optional] [default to 50] skip int [optional] [default to 0]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_18","text":"list[DataFlowAssembleIntoKnowledgeGraphTask]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_18","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_18","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_18","text":"Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#list_project_knowledge_graph_load_tasks","text":"list[DataFlowLoadIntoKnowledgeGraphTask] list_project_knowledge_graph_load_tasks(proj_key, bag_key, limit=limit, skip=skip) List load tasks for a Knowledge Graph","title":"list_project_knowledge_graph_load_tasks"},{"location":"apis/public/KnowledgeGraphsApi/#example_19","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) try : api_response = api_instance . list_project_knowledge_graph_load_tasks ( proj_key , bag_key , limit = limit , skip = skip ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_load_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_19","text":"Name Type Description Notes proj_key str bag_key str limit int [optional] [default to 50] skip int [optional] [default to 0]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_19","text":"list[DataFlowLoadIntoKnowledgeGraphTask]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_19","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_19","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_19","text":"Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#list_project_knowledge_graph_snapshots","text":"list[KgSnapshot] list_project_knowledge_graph_snapshots(proj_key, bag_key) List snapshots for a knowledge graph from assembled data flows.","title":"list_project_knowledge_graph_snapshots"},{"location":"apis/public/KnowledgeGraphsApi/#example_20","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | try : api_response = api_instance . list_project_knowledge_graph_snapshots ( proj_key , bag_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graph_snapshots: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_20","text":"Name Type Description Notes proj_key str bag_key str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_20","text":"list[KgSnapshot]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_20","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_20","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_20","text":"Status code Description Response headers 200 Snapshots - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#list_project_knowledge_graphs","text":"list[Bag] list_project_knowledge_graphs(proj_key, term=term) List all bags in the project","title":"list_project_knowledge_graphs"},{"location":"apis/public/KnowledgeGraphsApi/#example_21","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | term = 'term_example' # str | (optional) try : api_response = api_instance . list_project_knowledge_graphs ( proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_project_knowledge_graphs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_21","text":"Name Type Description Notes proj_key str term str [optional]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_21","text":"list[Bag]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_21","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_21","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_21","text":"Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#list_public_knowledge_graphs","text":"list[Bag] list_public_knowledge_graphs(term=term) List all public BAGs","title":"list_public_knowledge_graphs"},{"location":"apis/public/KnowledgeGraphsApi/#example_22","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) term = 'term_example' # str | (optional) try : api_response = api_instance . list_public_knowledge_graphs ( term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->list_public_knowledge_graphs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_22","text":"Name Type Description Notes term str [optional]","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_22","text":"list[Bag]","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_22","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_22","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_22","text":"Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#load_project_knowledge_graph_data_flow","text":"ProjectTask load_project_knowledge_graph_data_flow(proj_key, bag_key, options) Load a data flow onto a Knowledge Graph.","title":"load_project_knowledge_graph_data_flow"},{"location":"apis/public/KnowledgeGraphsApi/#example_23","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . LoadDataFlowIntoKnowledgeGraphOptions () # LoadDataFlowIntoKnowledgeGraphOptions | try : api_response = api_instance . load_project_knowledge_graph_data_flow ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->load_project_knowledge_graph_data_flow: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_23","text":"Name Type Description Notes proj_key str bag_key str options LoadDataFlowIntoKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_23","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_23","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_23","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_23","text":"Status code Description Response headers 200 Task started. - 400 Invalid dataflow. - 404 Data flow template doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#load_project_knowledge_graph_snapshot","text":"Task load_project_knowledge_graph_snapshot(proj_key, bag_key, execution_id) Load a snapshot resulting from an assembled data flow","title":"load_project_knowledge_graph_snapshot"},{"location":"apis/public/KnowledgeGraphsApi/#example_24","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | execution_id = 'execution_id_example' # str | try : api_response = api_instance . load_project_knowledge_graph_snapshot ( proj_key , bag_key , execution_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->load_project_knowledge_graph_snapshot: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_24","text":"Name Type Description Notes proj_key str bag_key str execution_id str","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_24","text":"Task","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_24","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_24","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_24","text":"Status code Description Response headers 200 Snapshot is being loaded. - 400 Invalid parameters. - 403 Feature is disabled on this instance. - 404 KG/BAG/Snapshot not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#recreate_project_knowledge_graph_deployment","text":"recreate_project_knowledge_graph_deployment(proj_key, bag_key, body) (Re)create the deployment for a Knowledge Graph","title":"recreate_project_knowledge_graph_deployment"},{"location":"apis/public/KnowledgeGraphsApi/#example_25","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphDeploymentRecreationOptions () # KnowledgeGraphDeploymentRecreationOptions | try : api_instance . recreate_project_knowledge_graph_deployment ( proj_key , bag_key , body ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->recreate_project_knowledge_graph_deployment: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_25","text":"Name Type Description Notes proj_key str bag_key str body KnowledgeGraphDeploymentRecreationOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_25","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_25","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_25","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_25","text":"Status code Description Response headers 200 Deployment upgrading. - 404 Knowledge Graph doesn't exist. - 409 Refused to recreate the deployment since it already exists and the `force` flag is not `true`. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#restore_project_knowledge_graph_backup","text":"Task restore_project_knowledge_graph_backup(proj_key, bag_key, options) Restore a back up of a Knowledge Graph","title":"restore_project_knowledge_graph_backup"},{"location":"apis/public/KnowledgeGraphsApi/#example_26","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . RestoreKnowledgeGraphBackupOptions () # RestoreKnowledgeGraphBackupOptions | try : api_response = api_instance . restore_project_knowledge_graph_backup ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->restore_project_knowledge_graph_backup: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_26","text":"Name Type Description Notes proj_key str bag_key str options RestoreKnowledgeGraphBackupOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_26","text":"Task","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_26","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_26","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_26","text":"Status code Description Response headers 201 OK - 400 Invalid parameters. - 404 KG/BAG not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#resume_project_knowledge_graph","text":"ProjectTask resume_project_knowledge_graph(proj_key, bag_key, body) Resume a Knowledge Graph","title":"resume_project_knowledge_graph"},{"location":"apis/public/KnowledgeGraphsApi/#example_27","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . ResumeKnowledgeGraphOptions () # ResumeKnowledgeGraphOptions | try : api_response = api_instance . resume_project_knowledge_graph ( proj_key , bag_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->resume_project_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_27","text":"Name Type Description Notes proj_key str bag_key str body ResumeKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_27","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_27","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_27","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_27","text":"Status code Description Response headers 200 Task started. - 403 Feature is disabled on this instance. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#suspend_project_knowledge_graph","text":"ProjectTask suspend_project_knowledge_graph(proj_key, bag_key, options) Suspend a Knowledge Graph","title":"suspend_project_knowledge_graph"},{"location":"apis/public/KnowledgeGraphsApi/#example_28","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | options = deepsearch . cps . apis . public . SuspendKnowledgeGraphOptions () # SuspendKnowledgeGraphOptions | try : api_response = api_instance . suspend_project_knowledge_graph ( proj_key , bag_key , options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->suspend_project_knowledge_graph: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_28","text":"Name Type Description Notes proj_key str bag_key str options SuspendKnowledgeGraphOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_28","text":"ProjectTask","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_28","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_28","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_28","text":"Status code Description Response headers 200 Task started. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#update_project_knowledge_graph_metadata","text":"Bag update_project_knowledge_graph_metadata(proj_key, bag_key, data) Update the metadata of a Knowledge graph","title":"update_project_knowledge_graph_metadata"},{"location":"apis/public/KnowledgeGraphsApi/#example_29","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | data = deepsearch . cps . apis . public . PatchKnowledgeGraphOptions1 () # PatchKnowledgeGraphOptions1 | try : api_response = api_instance . update_project_knowledge_graph_metadata ( proj_key , bag_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->update_project_knowledge_graph_metadata: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_29","text":"Name Type Description Notes proj_key str bag_key str data PatchKnowledgeGraphOptions1","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_29","text":"Bag","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_29","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_29","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_29","text":"Status code Description Response headers 200 Knowledge graph metadata updated. - 404 Knowledge graph not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/KnowledgeGraphsApi/#upgrade_project_knowledge_graph_deployment","text":"upgrade_project_knowledge_graph_deployment(proj_key, bag_key, body) Upgrade the deployment chart of a Knowledge Graph","title":"upgrade_project_knowledge_graph_deployment"},{"location":"apis/public/KnowledgeGraphsApi/#example_30","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . KnowledgeGraphsApi ( api_client ) proj_key = 'proj_key_example' # str | bag_key = 'bag_key_example' # str | body = deepsearch . cps . apis . public . KnowledgeGraphChartUpgradeOptions () # KnowledgeGraphChartUpgradeOptions | try : api_instance . upgrade_project_knowledge_graph_deployment ( proj_key , bag_key , body ) except ApiException as e : print ( \"Exception when calling KnowledgeGraphsApi->upgrade_project_knowledge_graph_deployment: %s \\n \" % e )","title":"Example"},{"location":"apis/public/KnowledgeGraphsApi/#parameters_30","text":"Name Type Description Notes proj_key str bag_key str body KnowledgeGraphChartUpgradeOptions","title":"Parameters"},{"location":"apis/public/KnowledgeGraphsApi/#return-type_30","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/KnowledgeGraphsApi/#authorization_30","text":"Bearer","title":"Authorization"},{"location":"apis/public/KnowledgeGraphsApi/#http-request-headers_30","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/KnowledgeGraphsApi/#http-response-details_30","text":"Status code Description Response headers 200 Chart upgrading. - 404 Knowledge Graph doesn't exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/LinkedCcsInstances/","text":"LinkedCcsInstances \u00b6 Properties \u00b6 Name Type Description Notes description str id str [Back to Model list] [Back to API list] [Back to README]","title":"LinkedCcsInstances"},{"location":"apis/public/LinkedCcsInstances/#linkedccsinstances","text":"","title":"LinkedCcsInstances"},{"location":"apis/public/LinkedCcsInstances/#properties","text":"Name Type Description Notes description str id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions/","text":"LoadDataFlowIntoKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender save object [Back to Model list] [Back to API list] [Back to README]","title":"LoadDataFlowIntoKnowledgeGraphOptions"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions/#loaddataflowintoknowledgegraphoptions","text":"","title":"LoadDataFlowIntoKnowledgeGraphOptions"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions/#properties","text":"Name Type Description Notes data_flow BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow render BackendProjectProjKeyBagsBagKeyTasksAssembleDataflowRender save object [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions1/","text":"LoadDataFlowIntoKnowledgeGraphOptions1 \u00b6 Properties \u00b6 Name Type Description Notes render ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender [optional] target ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LoadDataFlowIntoKnowledgeGraphOptions1"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions1/#loaddataflowintoknowledgegraphoptions1","text":"","title":"LoadDataFlowIntoKnowledgeGraphOptions1"},{"location":"apis/public/LoadDataFlowIntoKnowledgeGraphOptions1/#properties","text":"Name Type Description Notes render ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender [optional] target ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/LoadKgcDataInput/","text":"LoadKgcDataInput \u00b6 Properties \u00b6 Name Type Description Notes dataflow LoadKgcDataInputDataflow target LoadKgcDataInputTarget [Back to Model list] [Back to API list] [Back to README]","title":"LoadKgcDataInput"},{"location":"apis/public/LoadKgcDataInput/#loadkgcdatainput","text":"","title":"LoadKgcDataInput"},{"location":"apis/public/LoadKgcDataInput/#properties","text":"Name Type Description Notes dataflow LoadKgcDataInputDataflow target LoadKgcDataInputTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/LoadKgcDataInputDataflow/","text":"LoadKgcDataInputDataflow \u00b6 Properties \u00b6 Name Type Description Notes config object [optional] data_flow list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LoadKgcDataInputDataflow"},{"location":"apis/public/LoadKgcDataInputDataflow/#loadkgcdatainputdataflow","text":"","title":"LoadKgcDataInputDataflow"},{"location":"apis/public/LoadKgcDataInputDataflow/#properties","text":"Name Type Description Notes config object [optional] data_flow list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/LoadKgcDataInputTarget/","text":"LoadKgcDataInputTarget \u00b6 Properties \u00b6 Name Type Description Notes bag_key str save object [Back to Model list] [Back to API list] [Back to README]","title":"LoadKgcDataInputTarget"},{"location":"apis/public/LoadKgcDataInputTarget/#loadkgcdatainputtarget","text":"","title":"LoadKgcDataInputTarget"},{"location":"apis/public/LoadKgcDataInputTarget/#properties","text":"Name Type Description Notes bag_key str save object [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ModelConfiguration/","text":"ModelConfiguration \u00b6 Properties \u00b6 Name Type Description Notes configurations dict(str, object) [optional] created_at float created_by str description str model_config_key str name str proj_key str public bool supported_annotations object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ModelConfiguration"},{"location":"apis/public/ModelConfiguration/#modelconfiguration","text":"","title":"ModelConfiguration"},{"location":"apis/public/ModelConfiguration/#properties","text":"Name Type Description Notes configurations dict(str, object) [optional] created_at float created_by str description str model_config_key str name str proj_key str public bool supported_annotations object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ModelConfigurationsApi/","text":"deepsearch.cps.apis.public.ModelConfigurationsApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_project_model_config POST /project/{proj_key}/model_configs delete_project_model_config DELETE /project/{proj_key}/model_configs/{model_config_key} get_project_models_with_supported_annotations GET /project/{proj_key}/models list_project_model_configs GET /project/{proj_key}/model_configs list_public_model_configs GET /project/public/model_configs read_project_model_config GET /project/{proj_key}/model_configs/{model_config_key} read_public_model_config GET /project/public/model_configs/{model_config_key} update_project_model_config PATCH /project/{proj_key}/model_configs/{model_config_key} create_project_model_config \u00b6 ModelConfiguration create_project_model_config(proj_key, body) Create a Model Configuration Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . CreateProjectModelConfigOptions () # CreateProjectModelConfigOptions | try : api_response = api_instance . create_project_model_config ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->create_project_model_config: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body CreateProjectModelConfigOptions Return type \u00b6 ModelConfiguration Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Model Configuration created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_project_model_config \u00b6 delete_project_model_config(proj_key, model_config_key) Delete a single Model Configuration Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | try : api_instance . delete_project_model_config ( proj_key , model_config_key ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->delete_project_model_config: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str model_config_key str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Model Configuration deleted. - 404 Model Configuration doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_models_with_supported_annotations \u00b6 list[ModelConfiguration] get_project_models_with_supported_annotations(proj_key) List models with the supported annotations for a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_models_with_supported_annotations ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->get_project_models_with_supported_annotations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 list[ModelConfiguration] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Models with the supported annotations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_model_configs \u00b6 list[ModelConfiguration] list_project_model_configs(proj_key) List Model Configurations for a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . list_project_model_configs ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->list_project_model_configs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 list[ModelConfiguration] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of Model Configurations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_public_model_configs \u00b6 list[ModelConfiguration] list_public_model_configs() List public Model Configurations Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) try : api_response = api_instance . list_public_model_configs () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->list_public_model_configs: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[ModelConfiguration] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of public Model Configurations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] read_project_model_config \u00b6 ModelConfiguration read_project_model_config(proj_key, model_config_key, include_collections=include_collections) Get a single Model Configuration Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . read_project_model_config ( proj_key , model_config_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->read_project_model_config: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str model_config_key str include_collections bool [optional] [default to False] Return type \u00b6 ModelConfiguration Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Model Configuration - 404 Model Configuration not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] read_public_model_config \u00b6 ModelConfiguration read_public_model_config(model_config_key, include_collections=include_collections) Get a single Model Configuration that was made public Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) model_config_key = 'model_config_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . read_public_model_config ( model_config_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->read_public_model_config: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes model_config_key str include_collections bool [optional] [default to False] Return type \u00b6 ModelConfiguration Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Model configuration - 404 Model configuration not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_model_config \u00b6 update_project_model_config(proj_key, model_config_key, body) Update a single Model Configuration Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | body = deepsearch . cps . apis . public . UpdateProjectModelConfigOptions () # UpdateProjectModelConfigOptions | try : api_instance . update_project_model_config ( proj_key , model_config_key , body ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->update_project_model_config: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str model_config_key str body UpdateProjectModelConfigOptions Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Model Configuration updated. - 404 Model Configuration doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.ModelConfigurationsApi"},{"location":"apis/public/ModelConfigurationsApi/#deepsearchcpsapispublicmodelconfigurationsapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_project_model_config POST /project/{proj_key}/model_configs delete_project_model_config DELETE /project/{proj_key}/model_configs/{model_config_key} get_project_models_with_supported_annotations GET /project/{proj_key}/models list_project_model_configs GET /project/{proj_key}/model_configs list_public_model_configs GET /project/public/model_configs read_project_model_config GET /project/{proj_key}/model_configs/{model_config_key} read_public_model_config GET /project/public/model_configs/{model_config_key} update_project_model_config PATCH /project/{proj_key}/model_configs/{model_config_key}","title":"deepsearch.cps.apis.public.ModelConfigurationsApi"},{"location":"apis/public/ModelConfigurationsApi/#create_project_model_config","text":"ModelConfiguration create_project_model_config(proj_key, body) Create a Model Configuration","title":"create_project_model_config"},{"location":"apis/public/ModelConfigurationsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . CreateProjectModelConfigOptions () # CreateProjectModelConfigOptions | try : api_response = api_instance . create_project_model_config ( proj_key , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->create_project_model_config: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters","text":"Name Type Description Notes proj_key str body CreateProjectModelConfigOptions","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type","text":"ModelConfiguration","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details","text":"Status code Description Response headers 200 Model Configuration created. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#delete_project_model_config","text":"delete_project_model_config(proj_key, model_config_key) Delete a single Model Configuration","title":"delete_project_model_config"},{"location":"apis/public/ModelConfigurationsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | try : api_instance . delete_project_model_config ( proj_key , model_config_key ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->delete_project_model_config: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_1","text":"Name Type Description Notes proj_key str model_config_key str","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_1","text":"Status code Description Response headers 204 Model Configuration deleted. - 404 Model Configuration doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#get_project_models_with_supported_annotations","text":"list[ModelConfiguration] get_project_models_with_supported_annotations(proj_key) List models with the supported annotations for a project","title":"get_project_models_with_supported_annotations"},{"location":"apis/public/ModelConfigurationsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_models_with_supported_annotations ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->get_project_models_with_supported_annotations: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_2","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_2","text":"list[ModelConfiguration]","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_2","text":"Status code Description Response headers 200 List of Models with the supported annotations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#list_project_model_configs","text":"list[ModelConfiguration] list_project_model_configs(proj_key) List Model Configurations for a project","title":"list_project_model_configs"},{"location":"apis/public/ModelConfigurationsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . list_project_model_configs ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->list_project_model_configs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_3","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_3","text":"list[ModelConfiguration]","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_3","text":"Status code Description Response headers 200 List of Model Configurations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#list_public_model_configs","text":"list[ModelConfiguration] list_public_model_configs() List public Model Configurations","title":"list_public_model_configs"},{"location":"apis/public/ModelConfigurationsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) try : api_response = api_instance . list_public_model_configs () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->list_public_model_configs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_4","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_4","text":"list[ModelConfiguration]","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_4","text":"Status code Description Response headers 200 List of public Model Configurations - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#read_project_model_config","text":"ModelConfiguration read_project_model_config(proj_key, model_config_key, include_collections=include_collections) Get a single Model Configuration","title":"read_project_model_config"},{"location":"apis/public/ModelConfigurationsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . read_project_model_config ( proj_key , model_config_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->read_project_model_config: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_5","text":"Name Type Description Notes proj_key str model_config_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_5","text":"ModelConfiguration","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_5","text":"Status code Description Response headers 200 Model Configuration - 404 Model Configuration not found - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#read_public_model_config","text":"ModelConfiguration read_public_model_config(model_config_key, include_collections=include_collections) Get a single Model Configuration that was made public","title":"read_public_model_config"},{"location":"apis/public/ModelConfigurationsApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) model_config_key = 'model_config_key_example' # str | include_collections = False # bool | (optional) (default to False) try : api_response = api_instance . read_public_model_config ( model_config_key , include_collections = include_collections ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->read_public_model_config: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_6","text":"Name Type Description Notes model_config_key str include_collections bool [optional] [default to False]","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_6","text":"ModelConfiguration","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_6","text":"Status code Description Response headers 200 Model configuration - 404 Model configuration not found or is not public - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelConfigurationsApi/#update_project_model_config","text":"update_project_model_config(proj_key, model_config_key, body) Update a single Model Configuration","title":"update_project_model_config"},{"location":"apis/public/ModelConfigurationsApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ModelConfigurationsApi ( api_client ) proj_key = 'proj_key_example' # str | model_config_key = 'model_config_key_example' # str | body = deepsearch . cps . apis . public . UpdateProjectModelConfigOptions () # UpdateProjectModelConfigOptions | try : api_instance . update_project_model_config ( proj_key , model_config_key , body ) except ApiException as e : print ( \"Exception when calling ModelConfigurationsApi->update_project_model_config: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ModelConfigurationsApi/#parameters_7","text":"Name Type Description Notes proj_key str model_config_key str body UpdateProjectModelConfigOptions","title":"Parameters"},{"location":"apis/public/ModelConfigurationsApi/#return-type_7","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/ModelConfigurationsApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/public/ModelConfigurationsApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ModelConfigurationsApi/#http-response-details_7","text":"Status code Description Response headers 204 Model Configuration updated. - 404 Model Configuration doesn't exist. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ModelSupportedAnnotationsParameters/","text":"ModelSupportedAnnotationsParameters \u00b6 Properties \u00b6 Name Type Description Notes model_config_key str proj_key str public bool [Back to Model list] [Back to API list] [Back to README]","title":"ModelSupportedAnnotationsParameters"},{"location":"apis/public/ModelSupportedAnnotationsParameters/#modelsupportedannotationsparameters","text":"","title":"ModelSupportedAnnotationsParameters"},{"location":"apis/public/ModelSupportedAnnotationsParameters/#properties","text":"Name Type Description Notes model_config_key str proj_key str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/MongoCoordinates/","text":"MongoCoordinates \u00b6 Properties \u00b6 Name Type Description Notes database str uri str [Back to Model list] [Back to API list] [Back to README]","title":"MongoCoordinates"},{"location":"apis/public/MongoCoordinates/#mongocoordinates","text":"","title":"MongoCoordinates"},{"location":"apis/public/MongoCoordinates/#properties","text":"Name Type Description Notes database str uri str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/MongoS3Coordinates/","text":"MongoS3Coordinates \u00b6 Properties \u00b6 Name Type Description Notes mongo MongoCoordinates [optional] s3 S3Coordinates [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MongoS3Coordinates"},{"location":"apis/public/MongoS3Coordinates/#mongos3coordinates","text":"","title":"MongoS3Coordinates"},{"location":"apis/public/MongoS3Coordinates/#properties","text":"Name Type Description Notes mongo MongoCoordinates [optional] s3 S3Coordinates [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/MongoS3CoordinatesWithCollectionList/","text":"MongoS3CoordinatesWithCollectionList \u00b6 Properties \u00b6 Name Type Description Notes mongo MongoCoordinates [optional] s3 S3Coordinates [optional] collections list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MongoS3CoordinatesWithCollectionList"},{"location":"apis/public/MongoS3CoordinatesWithCollectionList/#mongos3coordinateswithcollectionlist","text":"","title":"MongoS3CoordinatesWithCollectionList"},{"location":"apis/public/MongoS3CoordinatesWithCollectionList/#properties","text":"Name Type Description Notes mongo MongoCoordinates [optional] s3 S3Coordinates [optional] collections list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/PatchDataCatalogOptions/","text":"PatchDataCatalogOptions \u00b6 Properties \u00b6 Name Type Description Notes category_schemas list[DataCatalogCategorySchema] [optional] collections_data_flows list[DataCatalogDataFlow] [optional] description str [optional] name str [optional] public bool [optional] topology DataCatalogTopology [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PatchDataCatalogOptions"},{"location":"apis/public/PatchDataCatalogOptions/#patchdatacatalogoptions","text":"","title":"PatchDataCatalogOptions"},{"location":"apis/public/PatchDataCatalogOptions/#properties","text":"Name Type Description Notes category_schemas list[DataCatalogCategorySchema] [optional] collections_data_flows list[DataCatalogDataFlow] [optional] description str [optional] name str [optional] public bool [optional] topology DataCatalogTopology [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/PatchDictionaryOptions/","text":"PatchDictionaryOptions \u00b6 Properties \u00b6 Name Type Description Notes description str [optional] name str [optional] public bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PatchDictionaryOptions"},{"location":"apis/public/PatchDictionaryOptions/#patchdictionaryoptions","text":"","title":"PatchDictionaryOptions"},{"location":"apis/public/PatchDictionaryOptions/#properties","text":"Name Type Description Notes description str [optional] name str [optional] public bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/PatchKnowledgeGraphOptions/","text":"PatchKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"PatchKnowledgeGraphOptions"},{"location":"apis/public/PatchKnowledgeGraphOptions/#patchknowledgegraphoptions","text":"","title":"PatchKnowledgeGraphOptions"},{"location":"apis/public/PatchKnowledgeGraphOptions/#properties","text":"Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/PatchKnowledgeGraphOptions1/","text":"PatchKnowledgeGraphOptions1 \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"PatchKnowledgeGraphOptions1"},{"location":"apis/public/PatchKnowledgeGraphOptions1/#patchknowledgegraphoptions1","text":"","title":"PatchKnowledgeGraphOptions1"},{"location":"apis/public/PatchKnowledgeGraphOptions1/#properties","text":"Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/Problem/","text":"Problem \u00b6 Properties \u00b6 Name Type Description Notes detail str [optional] status int [optional] title str [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Problem"},{"location":"apis/public/Problem/#problem","text":"","title":"Problem"},{"location":"apis/public/Problem/#properties","text":"Name Type Description Notes detail str [optional] status int [optional] title str [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProcessingModel/","text":"ProcessingModel \u00b6 Properties \u00b6 Name Type Description Notes dataflow ProcessingModelDataFlow variables dict(str, ProjectProjKeyModelConfigsConfigurations) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProcessingModel"},{"location":"apis/public/ProcessingModel/#processingmodel","text":"","title":"ProcessingModel"},{"location":"apis/public/ProcessingModel/#properties","text":"Name Type Description Notes dataflow ProcessingModelDataFlow variables dict(str, ProjectProjKeyModelConfigsConfigurations) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProcessingModelApi/","text":"deepsearch.cps.apis.public.ProcessingModelApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_data_flow_from_df_wizard POST /processing_models/docs_graph_with_databases get_processing_models GET /processing_models create_data_flow_from_df_wizard \u00b6 ProcessingModel create_data_flow_from_df_wizard(body) Create a Data Flow from a list of CCS Collections and CPS Models. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProcessingModelApi ( api_client ) body = deepsearch . cps . apis . public . InlineObject1 () # InlineObject1 | try : api_response = api_instance . create_data_flow_from_df_wizard ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProcessingModelApi->create_data_flow_from_df_wizard: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body InlineObject1 Return type \u00b6 ProcessingModel Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Processing model generated successfully - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_processing_models \u00b6 InlineResponse2001 get_processing_models() List the available processing models. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProcessingModelApi ( api_client ) try : api_response = api_instance . get_processing_models () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProcessingModelApi->get_processing_models: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 InlineResponse2001 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of processing models and their description - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.ProcessingModelApi"},{"location":"apis/public/ProcessingModelApi/#deepsearchcpsapispublicprocessingmodelapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_data_flow_from_df_wizard POST /processing_models/docs_graph_with_databases get_processing_models GET /processing_models","title":"deepsearch.cps.apis.public.ProcessingModelApi"},{"location":"apis/public/ProcessingModelApi/#create_data_flow_from_df_wizard","text":"ProcessingModel create_data_flow_from_df_wizard(body) Create a Data Flow from a list of CCS Collections and CPS Models.","title":"create_data_flow_from_df_wizard"},{"location":"apis/public/ProcessingModelApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProcessingModelApi ( api_client ) body = deepsearch . cps . apis . public . InlineObject1 () # InlineObject1 | try : api_response = api_instance . create_data_flow_from_df_wizard ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProcessingModelApi->create_data_flow_from_df_wizard: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ProcessingModelApi/#parameters","text":"Name Type Description Notes body InlineObject1","title":"Parameters"},{"location":"apis/public/ProcessingModelApi/#return-type","text":"ProcessingModel","title":"Return type"},{"location":"apis/public/ProcessingModelApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/ProcessingModelApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ProcessingModelApi/#http-response-details","text":"Status code Description Response headers 200 Processing model generated successfully - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ProcessingModelApi/#get_processing_models","text":"InlineResponse2001 get_processing_models() List the available processing models.","title":"get_processing_models"},{"location":"apis/public/ProcessingModelApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProcessingModelApi ( api_client ) try : api_response = api_instance . get_processing_models () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProcessingModelApi->get_processing_models: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ProcessingModelApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/ProcessingModelApi/#return-type_1","text":"InlineResponse2001","title":"Return type"},{"location":"apis/public/ProcessingModelApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/ProcessingModelApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ProcessingModelApi/#http-response-details_1","text":"Status code Description Response headers 200 List of processing models and their description - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ProcessingModelDataFlow/","text":"ProcessingModelDataFlow \u00b6 Properties \u00b6 Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"ProcessingModelDataFlow"},{"location":"apis/public/ProcessingModelDataFlow/#processingmodeldataflow","text":"","title":"ProcessingModelDataFlow"},{"location":"apis/public/ProcessingModelDataFlow/#properties","text":"Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProcessingModelDescription/","text":"ProcessingModelDescription \u00b6 Properties \u00b6 Name Type Description Notes description str display_name str name str [Back to Model list] [Back to API list] [Back to README]","title":"ProcessingModelDescription"},{"location":"apis/public/ProcessingModelDescription/#processingmodeldescription","text":"","title":"ProcessingModelDescription"},{"location":"apis/public/ProcessingModelDescription/#properties","text":"Name Type Description Notes description str display_name str name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectApi/","text":"deepsearch.cps.apis.public.ProjectApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description get_project_default_values GET /project/{proj_key}/default_values provision_project_packages POST /project/{proj_key}/packages update_project_default_values POST /project/{proj_key}/default_values get_project_default_values \u00b6 ProjectDefaultValues get_project_default_values(proj_key) List project's default values Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_default_values ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectApi->get_project_default_values: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 ProjectDefaultValues Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] provision_project_packages \u00b6 Task provision_project_packages(proj_key, body=body) Install packages on a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . ProjectPackageInstalationManifest () # ProjectPackageInstalationManifest | (optional) try : api_response = api_instance . provision_project_packages ( proj_key , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectApi->provision_project_packages: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str body ProjectPackageInstalationManifest [optional] Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task started. It can be found in the tasks endpoint for the project. - 404 Package not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_default_values \u00b6 update_project_default_values(proj_key, default_values) List project's default values Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | default_values = deepsearch . cps . apis . public . ProjectDefaultValues () # ProjectDefaultValues | try : api_instance . update_project_default_values ( proj_key , default_values ) except ApiException as e : print ( \"Exception when calling ProjectApi->update_project_default_values: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str default_values ProjectDefaultValues Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.ProjectApi"},{"location":"apis/public/ProjectApi/#deepsearchcpsapispublicprojectapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description get_project_default_values GET /project/{proj_key}/default_values provision_project_packages POST /project/{proj_key}/packages update_project_default_values POST /project/{proj_key}/default_values","title":"deepsearch.cps.apis.public.ProjectApi"},{"location":"apis/public/ProjectApi/#get_project_default_values","text":"ProjectDefaultValues get_project_default_values(proj_key) List project's default values","title":"get_project_default_values"},{"location":"apis/public/ProjectApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_default_values ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectApi->get_project_default_values: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ProjectApi/#parameters","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/ProjectApi/#return-type","text":"ProjectDefaultValues","title":"Return type"},{"location":"apis/public/ProjectApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/ProjectApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ProjectApi/#http-response-details","text":"Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ProjectApi/#provision_project_packages","text":"Task provision_project_packages(proj_key, body=body) Install packages on a project","title":"provision_project_packages"},{"location":"apis/public/ProjectApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | body = deepsearch . cps . apis . public . ProjectPackageInstalationManifest () # ProjectPackageInstalationManifest | (optional) try : api_response = api_instance . provision_project_packages ( proj_key , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectApi->provision_project_packages: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ProjectApi/#parameters_1","text":"Name Type Description Notes proj_key str body ProjectPackageInstalationManifest [optional]","title":"Parameters"},{"location":"apis/public/ProjectApi/#return-type_1","text":"Task","title":"Return type"},{"location":"apis/public/ProjectApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/ProjectApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ProjectApi/#http-response-details_1","text":"Status code Description Response headers 200 Task started. It can be found in the tasks endpoint for the project. - 404 Package not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ProjectApi/#update_project_default_values","text":"update_project_default_values(proj_key, default_values) List project's default values","title":"update_project_default_values"},{"location":"apis/public/ProjectApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . ProjectApi ( api_client ) proj_key = 'proj_key_example' # str | default_values = deepsearch . cps . apis . public . ProjectDefaultValues () # ProjectDefaultValues | try : api_instance . update_project_default_values ( proj_key , default_values ) except ApiException as e : print ( \"Exception when calling ProjectApi->update_project_default_values: %s \\n \" % e )","title":"Example"},{"location":"apis/public/ProjectApi/#parameters_2","text":"Name Type Description Notes proj_key str default_values ProjectDefaultValues","title":"Parameters"},{"location":"apis/public/ProjectApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/ProjectApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/ProjectApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/ProjectApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/ProjectDataIndexNonView/","text":"ProjectDataIndexNonView \u00b6 Object to create a project data index Properties \u00b6 Name Type Description Notes description str Description of the Index [optional] name str Name of the data index schema_key str Schema key [optional] [default to 'generic'] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexNonView"},{"location":"apis/public/ProjectDataIndexNonView/#projectdataindexnonview","text":"Object to create a project data index","title":"ProjectDataIndexNonView"},{"location":"apis/public/ProjectDataIndexNonView/#properties","text":"Name Type Description Notes description str Description of the Index [optional] name str Name of the data index schema_key str Schema key [optional] [default to 'generic'] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDataIndexSource/","text":"ProjectDataIndexSource \u00b6 Properties \u00b6 Name Type Description Notes index_key str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexSource"},{"location":"apis/public/ProjectDataIndexSource/#projectdataindexsource","text":"","title":"ProjectDataIndexSource"},{"location":"apis/public/ProjectDataIndexSource/#properties","text":"Name Type Description Notes index_key str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDataIndexView/","text":"ProjectDataIndexView \u00b6 Object to create a project data index view Properties \u00b6 Name Type Description Notes description str Description of the index view [optional] name str Name of the data index view view_of ProjectDataIndexViewOf [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexView"},{"location":"apis/public/ProjectDataIndexView/#projectdataindexview","text":"Object to create a project data index view","title":"ProjectDataIndexView"},{"location":"apis/public/ProjectDataIndexView/#properties","text":"Name Type Description Notes description str Description of the index view [optional] name str Name of the data index view view_of ProjectDataIndexViewOf [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDataIndexViewOf/","text":"ProjectDataIndexViewOf \u00b6 Properties \u00b6 Name Type Description Notes index_key str Data index key instance_id str Instance id key, if the source is a data asset [optional] proj_key str Project id key, if the source is a project data index [optional] query_options ElasticIndexSearchQueryOptions [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexViewOf"},{"location":"apis/public/ProjectDataIndexViewOf/#projectdataindexviewof","text":"","title":"ProjectDataIndexViewOf"},{"location":"apis/public/ProjectDataIndexViewOf/#properties","text":"Name Type Description Notes index_key str Data index key instance_id str Instance id key, if the source is a data asset [optional] proj_key str Project id key, if the source is a project data index [optional] query_options ElasticIndexSearchQueryOptions [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDataIndexWithStatus/","text":"ProjectDataIndexWithStatus \u00b6 Project data index with elastic status Properties \u00b6 Name Type Description Notes creation_date str description str documents float health str name str schema_key str Index's schema key [optional] source ProjectDataIndexSource status str type str Index type, user friendly format view_of ProjectDataIndexWithStatusViewOf [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexWithStatus"},{"location":"apis/public/ProjectDataIndexWithStatus/#projectdataindexwithstatus","text":"Project data index with elastic status","title":"ProjectDataIndexWithStatus"},{"location":"apis/public/ProjectDataIndexWithStatus/#properties","text":"Name Type Description Notes creation_date str description str documents float health str name str schema_key str Index's schema key [optional] source ProjectDataIndexSource status str type str Index type, user friendly format view_of ProjectDataIndexWithStatusViewOf [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDataIndexWithStatusViewOf/","text":"ProjectDataIndexWithStatusViewOf \u00b6 Properties \u00b6 Name Type Description Notes elastic_id str [optional] index_key str proj_key str [optional] query_options ElasticIndexSearchQueryOptions [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataIndexWithStatusViewOf"},{"location":"apis/public/ProjectDataIndexWithStatusViewOf/#projectdataindexwithstatusviewof","text":"","title":"ProjectDataIndexWithStatusViewOf"},{"location":"apis/public/ProjectDataIndexWithStatusViewOf/#properties","text":"Name Type Description Notes elastic_id str [optional] index_key str proj_key str [optional] query_options ElasticIndexSearchQueryOptions [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDefaultValues/","text":"ProjectDefaultValues \u00b6 Properties \u00b6 Name Type Description Notes ccs_project ProjectDefaultValuesCcsProject [optional] dataflow ProjectDefaultValuesDataflow [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDefaultValues"},{"location":"apis/public/ProjectDefaultValues/#projectdefaultvalues","text":"","title":"ProjectDefaultValues"},{"location":"apis/public/ProjectDefaultValues/#properties","text":"Name Type Description Notes ccs_project ProjectDefaultValuesCcsProject [optional] dataflow ProjectDefaultValuesDataflow [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDefaultValuesCcsProject/","text":"ProjectDefaultValuesCcsProject \u00b6 Properties \u00b6 Name Type Description Notes collection_name str [optional] name str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDefaultValuesCcsProject"},{"location":"apis/public/ProjectDefaultValuesCcsProject/#projectdefaultvaluesccsproject","text":"","title":"ProjectDefaultValuesCcsProject"},{"location":"apis/public/ProjectDefaultValuesCcsProject/#properties","text":"Name Type Description Notes collection_name str [optional] name str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectDefaultValuesDataflow/","text":"ProjectDefaultValuesDataflow \u00b6 Properties \u00b6 Name Type Description Notes df_tpl_key str name str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDefaultValuesDataflow"},{"location":"apis/public/ProjectDefaultValuesDataflow/#projectdefaultvaluesdataflow","text":"","title":"ProjectDefaultValuesDataflow"},{"location":"apis/public/ProjectDefaultValuesDataflow/#properties","text":"Name Type Description Notes df_tpl_key str name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectFlavourTotalKgs/","text":"ProjectFlavourTotalKgs \u00b6 Properties \u00b6 Name Type Description Notes flavour_name str proj_key str total_kgs int [Back to Model list] [Back to API list] [Back to README]","title":"ProjectFlavourTotalKgs"},{"location":"apis/public/ProjectFlavourTotalKgs/#projectflavourtotalkgs","text":"","title":"ProjectFlavourTotalKgs"},{"location":"apis/public/ProjectFlavourTotalKgs/#properties","text":"Name Type Description Notes flavour_name str proj_key str total_kgs int [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectFlavours/","text":"ProjectFlavours \u00b6 Properties \u00b6 Name Type Description Notes flavours list[BagFlavourFullData] proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectFlavours"},{"location":"apis/public/ProjectFlavours/#projectflavours","text":"","title":"ProjectFlavours"},{"location":"apis/public/ProjectFlavours/#properties","text":"Name Type Description Notes flavours list[BagFlavourFullData] proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectPackageInstalationManifest/","text":"ProjectPackageInstalationManifest \u00b6 Properties \u00b6 Name Type Description Notes packages list[ProjectProjKeyPackagesPackages] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPackageInstalationManifest"},{"location":"apis/public/ProjectPackageInstalationManifest/#projectpackageinstalationmanifest","text":"","title":"ProjectPackageInstalationManifest"},{"location":"apis/public/ProjectPackageInstalationManifest/#properties","text":"Name Type Description Notes packages list[ProjectProjKeyPackagesPackages] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportDocument/","text":"ProjectProjKeyAnnotateDocumentReportDocument \u00b6 Properties \u00b6 Name Type Description Notes input_scratch_id str output_scratch_id str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyAnnotateDocumentReportDocument"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportDocument/#projectprojkeyannotatedocumentreportdocument","text":"","title":"ProjectProjKeyAnnotateDocumentReportDocument"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportDocument/#properties","text":"Name Type Description Notes input_scratch_id str output_scratch_id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportReport/","text":"ProjectProjKeyAnnotateDocumentReportReport \u00b6 Properties \u00b6 Name Type Description Notes description str [optional] review_consent bool [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyAnnotateDocumentReportReport"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportReport/#projectprojkeyannotatedocumentreportreport","text":"","title":"ProjectProjKeyAnnotateDocumentReportReport"},{"location":"apis/public/ProjectProjKeyAnnotateDocumentReportReport/#properties","text":"Name Type Description Notes description str [optional] review_consent bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/","text":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow \u00b6 Properties \u00b6 Name Type Description Notes render_options ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions [optional] template str [optional] variables object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/#projectprojkeybagsbagkeytasksassembledataflowdataflow","text":"","title":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlow/#properties","text":"Name Type Description Notes render_options ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions [optional] template str [optional] variables object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions/","text":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions \u00b6 Properties \u00b6 Name Type Description Notes target_bag object [optional] variables object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions/#projectprojkeybagsbagkeytasksassembledataflowdataflowrenderoptions","text":"","title":"ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksAssembleDataflowDataFlowRenderOptions/#properties","text":"Name Type Description Notes target_bag object [optional] variables object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfo/","text":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfo \u00b6 Properties \u00b6 Name Type Description Notes collection_key str [optional] coords ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords include_s3_data bool [optional] [default to False] node_list list[ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList] [optional] projection object A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}). [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfo"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfo/#projectprojkeybagsbagkeytasksexportdatasetinfo","text":"","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfo"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfo/#properties","text":"Name Type Description Notes collection_key str [optional] coords ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords include_s3_data bool [optional] [default to False] node_list list[ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList] [optional] projection object A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}). [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords/","text":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords \u00b6 Properties \u00b6 Name Type Description Notes databases object node_collection ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords/#projectprojkeybagsbagkeytasksexportdatasetinfocoords","text":"","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords/#properties","text":"Name Type Description Notes databases object node_collection ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection/","text":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection \u00b6 Properties \u00b6 Name Type Description Notes collection str collection_name_prefix str database str uri str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection/#projectprojkeybagsbagkeytasksexportdatasetinfocoordsnodecollection","text":"","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection/#properties","text":"Name Type Description Notes collection str collection_name_prefix str database str uri str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList/","text":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList \u00b6 Properties \u00b6 Name Type Description Notes db str id str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList/#projectprojkeybagsbagkeytasksexportdatasetinfonodelist","text":"","title":"ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList/#properties","text":"Name Type Description Notes db str id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksSuspendSnapshot/","text":"ProjectProjKeyBagsBagKeyTasksSuspendSnapshot \u00b6 Properties \u00b6 Name Type Description Notes name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyBagsBagKeyTasksSuspendSnapshot"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksSuspendSnapshot/#projectprojkeybagsbagkeytaskssuspendsnapshot","text":"","title":"ProjectProjKeyBagsBagKeyTasksSuspendSnapshot"},{"location":"apis/public/ProjectProjKeyBagsBagKeyTasksSuspendSnapshot/#properties","text":"Name Type Description Notes name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs \u00b6 Properties \u00b6 Name Type Description Notes auth_token str [optional] export_package_mongo_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions [optional] proj_key str source_collection_name str [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccs","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcs/#properties","text":"Name Type Description Notes auth_token str [optional] export_package_mongo_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions [optional] proj_key str source_collection_name str [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions \u00b6 Properties \u00b6 Name Type Description Notes assemble_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions incremental bool inputs ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs [optional] package_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptions","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptions/#properties","text":"Name Type Description Notes assemble_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions incremental bool inputs ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs [optional] package_options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions \u00b6 Properties \u00b6 Name Type Description Notes mode ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptionsassembleoptions","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptions/#properties","text":"Name Type Description Notes mode ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode options ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode \u00b6 Properties \u00b6 Name Type Description Notes page_elements list[str] Which type of annotations to filter for the page elements: H (human annotations), M (model generated) tables list[str] Which type of annotations to filter for the tables: H (human annotations), M (model generated) [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptionsassembleoptionsmode","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsMode/#properties","text":"Name Type Description Notes page_elements list[str] Which type of annotations to filter for the page elements: H (human annotations), M (model generated) tables list[str] Which type of annotations to filter for the tables: H (human annotations), M (model generated) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions \u00b6 Properties \u00b6 Name Type Description Notes include_incomplete_documents bool Include documents with missing pages? (e.g. no annotations for some pages) [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptionsassembleoptionsoptions","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsAssembleOptionsOptions/#properties","text":"Name Type Description Notes include_incomplete_documents bool Include documents with missing pages? (e.g. no annotations for some pages) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs \u00b6 Properties \u00b6 Name Type Description Notes document_hashes list[str] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptionsinputs","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsInputs/#properties","text":"Name Type Description Notes document_hashes list[str] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions/","text":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions \u00b6 Properties \u00b6 Name Type Description Notes match_mode str [optional] [default to 'document_hash'] redirect_keys_to_s3 list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions/#projectprojkeydatacataloguesdckeycollectionscollectionnameactionsimportccsexportpackagemongooptionspackageoptions","text":"","title":"ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesDcKeyCollectionsCollectionNameActionsImportCcsExportPackageMongoOptionsPackageOptions/#properties","text":"Name Type Description Notes match_mode str [optional] [default to 'document_hash'] redirect_keys_to_s3 list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoOptions/","text":"ProjectProjKeyDataCataloguesFromMongoOptions \u00b6 Properties \u00b6 Name Type Description Notes coordinates MongoS3CoordinatesWithCollectionList [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesFromMongoOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoOptions/#projectprojkeydatacataloguesfrommongooptions","text":"","title":"ProjectProjKeyDataCataloguesFromMongoOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoOptions/#properties","text":"Name Type Description Notes coordinates MongoS3CoordinatesWithCollectionList [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoTarget/","text":"ProjectProjKeyDataCataloguesFromMongoTarget \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesFromMongoTarget"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoTarget/#projectprojkeydatacataloguesfrommongotarget","text":"","title":"ProjectProjKeyDataCataloguesFromMongoTarget"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromMongoTarget/#properties","text":"Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromUrlOptions/","text":"ProjectProjKeyDataCataloguesFromUrlOptions \u00b6 Properties \u00b6 Name Type Description Notes url str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDataCataloguesFromUrlOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromUrlOptions/#projectprojkeydatacataloguesfromurloptions","text":"","title":"ProjectProjKeyDataCataloguesFromUrlOptions"},{"location":"apis/public/ProjectProjKeyDataCataloguesFromUrlOptions/#properties","text":"Name Type Description Notes url str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyDictionariesFromMongoTarget/","text":"ProjectProjKeyDictionariesFromMongoTarget \u00b6 Properties \u00b6 Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyDictionariesFromMongoTarget"},{"location":"apis/public/ProjectProjKeyDictionariesFromMongoTarget/#projectprojkeydictionariesfrommongotarget","text":"","title":"ProjectProjKeyDictionariesFromMongoTarget"},{"location":"apis/public/ProjectProjKeyDictionariesFromMongoTarget/#properties","text":"Name Type Description Notes description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag/","text":"ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag \u00b6 Properties \u00b6 Name Type Description Notes bag_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag/#projectprojkeykgcdataflowtemplatesdebugdftplkeytargetbag","text":"","title":"ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDebugDfTplKeyTargetBag/#properties","text":"Name Type Description Notes bag_key str proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender/","text":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender \u00b6 Properties \u00b6 Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender/#projectprojkeykgcdataflowtemplatesdftplkeyactionsloadrender","text":"","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRender/#properties","text":"Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag/","text":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag \u00b6 Properties \u00b6 Name Type Description Notes bag_key str proj_key str If set, this will override the 'proj_key' parameter in the path, allowing cross-project KGs to be used. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag/#projectprojkeykgcdataflowtemplatesdftplkeyactionsloadrendertargetbag","text":"","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag/#properties","text":"Name Type Description Notes bag_key str proj_key str If set, this will override the 'proj_key' parameter in the path, allowing cross-project KGs to be used. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget/","text":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget \u00b6 Properties \u00b6 Name Type Description Notes save object [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget/#projectprojkeykgcdataflowtemplatesdftplkeyactionsloadtarget","text":"","title":"ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadTarget/#properties","text":"Name Type Description Notes save object [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesVariables/","text":"ProjectProjKeyKgcDataflowTemplatesVariables \u00b6 Properties \u00b6 Name Type Description Notes default_value object [optional] type DataFlowTemplateVariable [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcDataflowTemplatesVariables"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesVariables/#projectprojkeykgcdataflowtemplatesvariables","text":"","title":"ProjectProjKeyKgcDataflowTemplatesVariables"},{"location":"apis/public/ProjectProjKeyKgcDataflowTemplatesVariables/#properties","text":"Name Type Description Notes default_value object [optional] type DataFlowTemplateVariable [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow/","text":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow \u00b6 Properties \u00b6 Name Type Description Notes template ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow/#projectprojkeykgcrawdataflowtemplatesactionsrundataflow","text":"","title":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow/#properties","text":"Name Type Description Notes template ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate/","text":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate \u00b6 Properties \u00b6 Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate/#projectprojkeykgcrawdataflowtemplatesactionsrundataflowtemplate","text":"","title":"ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate"},{"location":"apis/public/ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlowTemplate/#properties","text":"Name Type Description Notes config object data_flow list[object] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyModelConfigsConfigurations/","text":"ProjectProjKeyModelConfigsConfigurations \u00b6 Properties \u00b6 Name Type Description Notes type str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyModelConfigsConfigurations"},{"location":"apis/public/ProjectProjKeyModelConfigsConfigurations/#projectprojkeymodelconfigsconfigurations","text":"","title":"ProjectProjKeyModelConfigsConfigurations"},{"location":"apis/public/ProjectProjKeyModelConfigsConfigurations/#properties","text":"Name Type Description Notes type str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectProjKeyPackagesPackages/","text":"ProjectProjKeyPackagesPackages \u00b6 Properties \u00b6 Name Type Description Notes overrides object [optional] package_id str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectProjKeyPackagesPackages"},{"location":"apis/public/ProjectProjKeyPackagesPackages/#projectprojkeypackagespackages","text":"","title":"ProjectProjKeyPackagesPackages"},{"location":"apis/public/ProjectProjKeyPackagesPackages/#properties","text":"Name Type Description Notes overrides object [optional] package_id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectTask/","text":"ProjectTask \u00b6 Properties \u00b6 Name Type Description Notes completed_at float [optional] created_at float [optional] meta object [optional] progress float [optional] proj_key str [optional] started_at float [optional] task_id str [optional] task_status str [optional] task_type str [optional] user_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectTask"},{"location":"apis/public/ProjectTask/#projecttask","text":"","title":"ProjectTask"},{"location":"apis/public/ProjectTask/#properties","text":"Name Type Description Notes completed_at float [optional] created_at float [optional] meta object [optional] progress float [optional] proj_key str [optional] started_at float [optional] task_id str [optional] task_status str [optional] task_type str [optional] user_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectsFlavours/","text":"ProjectsFlavours \u00b6 Properties \u00b6 Name Type Description Notes flavours list[ProjectsFlavoursFlavours] name str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectsFlavours"},{"location":"apis/public/ProjectsFlavours/#projectsflavours","text":"","title":"ProjectsFlavours"},{"location":"apis/public/ProjectsFlavours/#properties","text":"Name Type Description Notes flavours list[ProjectsFlavoursFlavours] name str proj_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectsFlavoursFlavours/","text":"ProjectsFlavoursFlavours \u00b6 Properties \u00b6 Name Type Description Notes display_name str [optional] name str [Back to Model list] [Back to API list] [Back to README]","title":"ProjectsFlavoursFlavours"},{"location":"apis/public/ProjectsFlavoursFlavours/#projectsflavoursflavours","text":"","title":"ProjectsFlavoursFlavours"},{"location":"apis/public/ProjectsFlavoursFlavours/#properties","text":"Name Type Description Notes display_name str [optional] name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ProjectsFlavoursQuota/","text":"ProjectsFlavoursQuota \u00b6 Properties \u00b6 Name Type Description Notes name str proj_key str quotas list[FlavoursQuota] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectsFlavoursQuota"},{"location":"apis/public/ProjectsFlavoursQuota/#projectsflavoursquota","text":"","title":"ProjectsFlavoursQuota"},{"location":"apis/public/ProjectsFlavoursQuota/#properties","text":"Name Type Description Notes name str proj_key str quotas list[FlavoursQuota] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RelatedTask/","text":"RelatedTask \u00b6 Properties \u00b6 Name Type Description Notes task_id str task_type str [Back to Model list] [Back to API list] [Back to README]","title":"RelatedTask"},{"location":"apis/public/RelatedTask/#relatedtask","text":"","title":"RelatedTask"},{"location":"apis/public/RelatedTask/#properties","text":"Name Type Description Notes task_id str task_type str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RelationshipAnnotationColumn/","text":"RelationshipAnnotationColumn \u00b6 Properties \u00b6 Name Type Description Notes entities list[str] key str [Back to Model list] [Back to API list] [Back to README]","title":"RelationshipAnnotationColumn"},{"location":"apis/public/RelationshipAnnotationColumn/#relationshipannotationcolumn","text":"","title":"RelationshipAnnotationColumn"},{"location":"apis/public/RelationshipAnnotationColumn/#properties","text":"Name Type Description Notes entities list[str] key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RelationshipAnnotationDescriptor/","text":"RelationshipAnnotationDescriptor \u00b6 Properties \u00b6 Name Type Description Notes columns list[RelationshipAnnotationColumn] description str key str [Back to Model list] [Back to API list] [Back to README]","title":"RelationshipAnnotationDescriptor"},{"location":"apis/public/RelationshipAnnotationDescriptor/#relationshipannotationdescriptor","text":"","title":"RelationshipAnnotationDescriptor"},{"location":"apis/public/RelationshipAnnotationDescriptor/#properties","text":"Name Type Description Notes columns list[RelationshipAnnotationColumn] description str key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RenderDataFlowTemplateOptions/","text":"RenderDataFlowTemplateOptions \u00b6 Properties \u00b6 Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"RenderDataFlowTemplateOptions"},{"location":"apis/public/RenderDataFlowTemplateOptions/#renderdataflowtemplateoptions","text":"","title":"RenderDataFlowTemplateOptions"},{"location":"apis/public/RenderDataFlowTemplateOptions/#properties","text":"Name Type Description Notes target_bag ProjectProjKeyKgcDataflowTemplatesDfTplKeyActionsLoadRenderTargetBag variables dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RestoreKnowledgeGraphBackupOptions/","text":"RestoreKnowledgeGraphBackupOptions \u00b6 Properties \u00b6 Name Type Description Notes coordinates S3CoordinatesWithBackupKey [optional] [Back to Model list] [Back to API list] [Back to README]","title":"RestoreKnowledgeGraphBackupOptions"},{"location":"apis/public/RestoreKnowledgeGraphBackupOptions/#restoreknowledgegraphbackupoptions","text":"","title":"RestoreKnowledgeGraphBackupOptions"},{"location":"apis/public/RestoreKnowledgeGraphBackupOptions/#properties","text":"Name Type Description Notes coordinates S3CoordinatesWithBackupKey [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/ResumeKnowledgeGraphOptions/","text":"ResumeKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes reset bool [optional] snapshot_to_restore_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ResumeKnowledgeGraphOptions"},{"location":"apis/public/ResumeKnowledgeGraphOptions/#resumeknowledgegraphoptions","text":"","title":"ResumeKnowledgeGraphOptions"},{"location":"apis/public/ResumeKnowledgeGraphOptions/#properties","text":"Name Type Description Notes reset bool [optional] snapshot_to_restore_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RunDataFlowTemplateOptions/","text":"RunDataFlowTemplateOptions \u00b6 Properties \u00b6 Name Type Description Notes target_bag_key str [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"RunDataFlowTemplateOptions"},{"location":"apis/public/RunDataFlowTemplateOptions/#rundataflowtemplateoptions","text":"","title":"RunDataFlowTemplateOptions"},{"location":"apis/public/RunDataFlowTemplateOptions/#properties","text":"Name Type Description Notes target_bag_key str [optional] variables dict(str, object) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/RunDataFlowTemplateOptions1/","text":"RunDataFlowTemplateOptions1 \u00b6 Properties \u00b6 Name Type Description Notes data_flow ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow log_task bool [default to True] variable_values dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"RunDataFlowTemplateOptions1"},{"location":"apis/public/RunDataFlowTemplateOptions1/#rundataflowtemplateoptions1","text":"","title":"RunDataFlowTemplateOptions1"},{"location":"apis/public/RunDataFlowTemplateOptions1/#properties","text":"Name Type Description Notes data_flow ProjectProjKeyKgcRawDataflowTemplatesActionsRunDataFlow log_task bool [default to True] variable_values dict(str, object) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/S3Coordinates/","text":"S3Coordinates \u00b6 If provided, the S3 data will be copied Properties \u00b6 Name Type Description Notes access_key str bucket str host str key_prefix str location str port int secret_key str ssl bool verify_ssl bool [Back to Model list] [Back to API list] [Back to README]","title":"S3Coordinates"},{"location":"apis/public/S3Coordinates/#s3coordinates","text":"If provided, the S3 data will be copied","title":"S3Coordinates"},{"location":"apis/public/S3Coordinates/#properties","text":"Name Type Description Notes access_key str bucket str host str key_prefix str location str port int secret_key str ssl bool verify_ssl bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/S3CoordinatesWithBackupKey/","text":"S3CoordinatesWithBackupKey \u00b6 Properties \u00b6 Name Type Description Notes access_key str [optional] backup_key str bucket str host str [optional] location str [optional] port int [optional] presigned S3CoordinatesWithBackupKeyPresigned [optional] secret_key str [optional] ssl bool [optional] verify_ssl bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"S3CoordinatesWithBackupKey"},{"location":"apis/public/S3CoordinatesWithBackupKey/#s3coordinateswithbackupkey","text":"","title":"S3CoordinatesWithBackupKey"},{"location":"apis/public/S3CoordinatesWithBackupKey/#properties","text":"Name Type Description Notes access_key str [optional] backup_key str bucket str host str [optional] location str [optional] port int [optional] presigned S3CoordinatesWithBackupKeyPresigned [optional] secret_key str [optional] ssl bool [optional] verify_ssl bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/S3CoordinatesWithBackupKeyPresigned/","text":"S3CoordinatesWithBackupKeyPresigned \u00b6 Properties \u00b6 Name Type Description Notes fields dict(str, object) url str [Back to Model list] [Back to API list] [Back to README]","title":"S3CoordinatesWithBackupKeyPresigned"},{"location":"apis/public/S3CoordinatesWithBackupKeyPresigned/#s3coordinateswithbackupkeypresigned","text":"","title":"S3CoordinatesWithBackupKeyPresigned"},{"location":"apis/public/S3CoordinatesWithBackupKeyPresigned/#properties","text":"Name Type Description Notes fields dict(str, object) url str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/StorageSummaryDC/","text":"StorageSummaryDC \u00b6 Properties \u00b6 Name Type Description Notes dc_key str name str size_bytes_db float size_bytes_s3 float size_converted_db str size_converted_s3 str [Back to Model list] [Back to API list] [Back to README]","title":"StorageSummaryDC"},{"location":"apis/public/StorageSummaryDC/#storagesummarydc","text":"","title":"StorageSummaryDC"},{"location":"apis/public/StorageSummaryDC/#properties","text":"Name Type Description Notes dc_key str name str size_bytes_db float size_bytes_s3 float size_converted_db str size_converted_s3 str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/StorageSummaryKG/","text":"StorageSummaryKG \u00b6 Properties \u00b6 Name Type Description Notes bag_key str categories_fraction list[StorageSummaryKGCategoriesFraction] name str size_bytes_db float size_bytes_s3 float size_converted_db str size_converted_s3 str [Back to Model list] [Back to API list] [Back to README]","title":"StorageSummaryKG"},{"location":"apis/public/StorageSummaryKG/#storagesummarykg","text":"","title":"StorageSummaryKG"},{"location":"apis/public/StorageSummaryKG/#properties","text":"Name Type Description Notes bag_key str categories_fraction list[StorageSummaryKGCategoriesFraction] name str size_bytes_db float size_bytes_s3 float size_converted_db str size_converted_s3 str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/StorageSummaryKGCategoriesFraction/","text":"StorageSummaryKGCategoriesFraction \u00b6 Properties \u00b6 Name Type Description Notes color str [optional] name str percentage float size_bytes_db float size_converted_db str [Back to Model list] [Back to API list] [Back to README]","title":"StorageSummaryKGCategoriesFraction"},{"location":"apis/public/StorageSummaryKGCategoriesFraction/#storagesummarykgcategoriesfraction","text":"","title":"StorageSummaryKGCategoriesFraction"},{"location":"apis/public/StorageSummaryKGCategoriesFraction/#properties","text":"Name Type Description Notes color str [optional] name str percentage float size_bytes_db float size_converted_db str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/StorageSummaryTask/","text":"StorageSummaryTask \u00b6 Properties \u00b6 Name Type Description Notes dc_key str [optional] kg_key str [optional] kind str proj_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"StorageSummaryTask"},{"location":"apis/public/StorageSummaryTask/#storagesummarytask","text":"","title":"StorageSummaryTask"},{"location":"apis/public/StorageSummaryTask/#properties","text":"Name Type Description Notes dc_key str [optional] kg_key str [optional] kind str proj_key str task_id str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SupportedAnnotatorAnnotations/","text":"SupportedAnnotatorAnnotations \u00b6 Properties \u00b6 Name Type Description Notes entities list[EntityAnnotationDescriptor] relationships list[RelationshipAnnotationDescriptor] supported_object_types list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SupportedAnnotatorAnnotations"},{"location":"apis/public/SupportedAnnotatorAnnotations/#supportedannotatorannotations","text":"","title":"SupportedAnnotatorAnnotations"},{"location":"apis/public/SupportedAnnotatorAnnotations/#properties","text":"Name Type Description Notes entities list[EntityAnnotationDescriptor] relationships list[RelationshipAnnotationDescriptor] supported_object_types list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SuspendKnowledgeGraphOptions/","text":"SuspendKnowledgeGraphOptions \u00b6 Properties \u00b6 Name Type Description Notes force bool If true, the KG will be suspended even if it's busy snapshot ProjectProjKeyBagsBagKeyTasksSuspendSnapshot [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SuspendKnowledgeGraphOptions"},{"location":"apis/public/SuspendKnowledgeGraphOptions/#suspendknowledgegraphoptions","text":"","title":"SuspendKnowledgeGraphOptions"},{"location":"apis/public/SuspendKnowledgeGraphOptions/#properties","text":"Name Type Description Notes force bool If true, the KG will be suspended even if it's busy snapshot ProjectProjKeyBagsBagKeyTasksSuspendSnapshot [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemApi/","text":"deepsearch.cps.apis.public.SystemApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description delete_flavour DELETE /system/admin/delete_flavour/{flavour_name} get_flavour GET /system/admin/get_flavour/{flavour_name} get_flavours_default_quotas GET /system/admin/get_flavours_default_quota get_project_flavour_total_kgs GET /system/admin/get_project_flavour_total_kgs/{proj_key}/{flavour_name} get_project_flavours_quota GET /system/admin/get_project_flavours_quota/{proj_key} get_projects_flavours_quota GET /system/admin/get_projects_flavours_quota get_system_information GET /system/info get_system_modules_configuration GET /system/modules/configuration get_system_modules_tasks GET /system/modules/tasks get_version_report GET /deployment/info list_all_flavours GET /system/admin/list_all_flavours list_flavours_by_project GET /system/admin/get_project_flavours/{proj_key} list_packages GET /system/packages list_projects_flavours GET /system/admin/list_projects_flavours list_system_knowledge_graphs GET /system/kgs save_flavour PUT /system/admin/save_flavour save_flavours_default_quotas PUT /system/admin/save_flavours_default_quota save_project_flavours PUT /system/admin/save_project_flavours save_project_flavours_quota PUT /system/admin/save_project_flavours_quota system_get_all_dcs_admin GET /system/admin/get_all_dcs system_get_all_kgs_admin GET /system/admin/get_all_kgs system_get_cps_summary GET /system/admin/summary system_get_dc_storage_summary_async GET /system/admin/dc_storage_summary/{dc_key} system_get_kg_storage_summary_async GET /system/admin/kg_storage_summary/{kg_key} delete_flavour \u00b6 delete_flavour(flavour_name) Delete flavour from db Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavour_name = 'flavour_name_example' # str | try : api_instance . delete_flavour ( flavour_name ) except ApiException as e : print ( \"Exception when calling SystemApi->delete_flavour: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes flavour_name str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Deleted flavour successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_flavour \u00b6 BagFlavourFullData get_flavour(flavour_name) Get flavour from db Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavour_name = 'flavour_name_example' # str | try : api_response = api_instance . get_flavour ( flavour_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_flavour: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes flavour_name str Return type \u00b6 BagFlavourFullData Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Get flavour successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_flavours_default_quotas \u00b6 list[BagFlavourDefaultQuota] get_flavours_default_quotas() Get flavours default values Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_flavours_default_quotas () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_flavours_default_quotas: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[BagFlavourDefaultQuota] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Flavours default values - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_flavour_total_kgs \u00b6 ProjectFlavourTotalKgs get_project_flavour_total_kgs(proj_key, flavour_name) Gets kg total number by proj_key and flavour_key Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | flavour_name = 'flavour_name_example' # str | try : api_response = api_instance . get_project_flavour_total_kgs ( proj_key , flavour_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_project_flavour_total_kgs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str flavour_name str Return type \u00b6 ProjectFlavourTotalKgs Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project flavours total kg number - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_flavours_quota \u00b6 list[FlavoursQuota] get_project_flavours_quota(proj_key) Get project flavours quota Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_flavours_quota ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_project_flavours_quota: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 list[FlavoursQuota] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Project flavours quota - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_projects_flavours_quota \u00b6 list[ProjectsFlavoursQuota] get_projects_flavours_quota() Get projects flavours quotas Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_projects_flavours_quota () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_projects_flavours_quota: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[ProjectsFlavoursQuota] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Projects flavours quotas - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_system_information \u00b6 SystemInfo get_system_information() Get system info Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_information () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_information: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 SystemInfo Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_system_modules_configuration \u00b6 SystemModulesConfiguration get_system_modules_configuration() Get modules configuration Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_modules_configuration () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_modules_configuration: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 SystemModulesConfiguration Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Modules configuration - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_system_modules_tasks \u00b6 SystemModulesTasks get_system_modules_tasks() Get modules tasks Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_modules_tasks () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_modules_tasks: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 SystemModulesTasks Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Modules tasks - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_version_report \u00b6 get_version_report() Get deployment version report Example \u00b6 Api Key Authentication (ManagementKey): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ManagementKey configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_instance . get_version_report () except ApiException as e : print ( \"Exception when calling SystemApi->get_version_report: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 void (empty response body) Authorization \u00b6 ManagementKey HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Authentication failed, management api token is invalid or doesn't match - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_all_flavours \u00b6 list[BagFlavourFullData] list_all_flavours() Get all KG flavours storage on db Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_all_flavours () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_all_flavours: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[BagFlavourFullData] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Flavours storage on db - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_flavours_by_project \u00b6 ProjectFlavours list_flavours_by_project(proj_key) Get project assignment flavours Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . list_flavours_by_project ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_flavours_by_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str Return type \u00b6 ProjectFlavours Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Ok - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_packages \u00b6 list[CpsPackage] list_packages() Get packages available in this CPS installation for installing in a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_packages () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_packages: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[CpsPackage] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Packages available to this CPS installation - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_projects_flavours \u00b6 list[ProjectsFlavours] list_projects_flavours() Get all projects and their flavours Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_projects_flavours () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_projects_flavours: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[ProjectsFlavours] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Flavours storage on db - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_system_knowledge_graphs \u00b6 list[KnowledgeGraphSystemInformation] list_system_knowledge_graphs(proj_key=proj_key, term=term) List all Knowledge Graphs in the system Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | (optional) term = 'term_example' # str | (optional) try : api_response = api_instance . list_system_knowledge_graphs ( proj_key = proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_system_knowledge_graphs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str [optional] term str [optional] Return type \u00b6 list[KnowledgeGraphSystemInformation] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 0 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] save_flavour \u00b6 save_flavour(new_flavour, body) Save flavour on db Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) new_flavour = True # bool | body = deepsearch . cps . apis . public . BagFlavourFullData () # BagFlavourFullData | try : api_instance . save_flavour ( new_flavour , body ) except ApiException as e : print ( \"Exception when calling SystemApi->save_flavour: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes new_flavour bool body BagFlavourFullData Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Save flavour successful - 409 Flavour name already taken - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] save_flavours_default_quotas \u00b6 list[BagFlavourDefaultQuota] save_flavours_default_quotas(flavours) Save flavours default quota Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavours = [ deepsearch . cps . apis . public . BagFlavourDefaultQuota ()] # list[BagFlavourDefaultQuota] | try : api_response = api_instance . save_flavours_default_quotas ( flavours ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->save_flavours_default_quotas: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes flavours list[BagFlavourDefaultQuota] Return type \u00b6 list[BagFlavourDefaultQuota] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Save flavours default quotas successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] save_project_flavours \u00b6 save_project_flavours(body) Save project flavours assignment on db Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) body = deepsearch . cps . apis . public . ProjectsFlavours () # ProjectsFlavours | try : api_instance . save_project_flavours ( body ) except ApiException as e : print ( \"Exception when calling SystemApi->save_project_flavours: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body ProjectsFlavours Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Save project flavours successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] save_project_flavours_quota \u00b6 save_project_flavours_quota(projects_flavours_quotas) Save project flavours quota Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) projects_flavours_quotas = deepsearch . cps . apis . public . ProjectsFlavoursQuota () # ProjectsFlavoursQuota | try : api_instance . save_project_flavours_quota ( projects_flavours_quotas ) except ApiException as e : print ( \"Exception when calling SystemApi->save_project_flavours_quota: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes projects_flavours_quotas ProjectsFlavoursQuota Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Save project flavours quota successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] system_get_all_dcs_admin \u00b6 list[str] system_get_all_dcs_admin() Get all data catalogs (only dc_key) for admin use Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_all_dcs_admin () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_all_dcs_admin: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[str] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Array with all dcs's key - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] system_get_all_kgs_admin \u00b6 list[str] system_get_all_kgs_admin() Get all kgs (only bag_key) for admin use Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_all_kgs_admin () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_all_kgs_admin: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[str] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Array with all kgs's key - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] system_get_cps_summary \u00b6 list[InlineResponse2003] system_get_cps_summary() Get cps summary data. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_cps_summary () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_cps_summary: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[InlineResponse2003] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Cps summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] system_get_dc_storage_summary_async \u00b6 StorageSummaryTask system_get_dc_storage_summary_async(dc_key) Get dc storage summary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) dc_key = 'dc_key_example' # str | Data catalog key try : api_response = api_instance . system_get_dc_storage_summary_async ( dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_dc_storage_summary_async: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes dc_key str Data catalog key Return type \u00b6 StorageSummaryTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 DC storage summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README] system_get_kg_storage_summary_async \u00b6 StorageSummaryTask system_get_kg_storage_summary_async(kg_key) Get kg storage summary Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) kg_key = 'kg_key_example' # str | Knowledge graph key try : api_response = api_instance . system_get_kg_storage_summary_async ( kg_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_kg_storage_summary_async: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes kg_key str Knowledge graph key Return type \u00b6 StorageSummaryTask Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Kg storage summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.SystemApi"},{"location":"apis/public/SystemApi/#deepsearchcpsapispublicsystemapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description delete_flavour DELETE /system/admin/delete_flavour/{flavour_name} get_flavour GET /system/admin/get_flavour/{flavour_name} get_flavours_default_quotas GET /system/admin/get_flavours_default_quota get_project_flavour_total_kgs GET /system/admin/get_project_flavour_total_kgs/{proj_key}/{flavour_name} get_project_flavours_quota GET /system/admin/get_project_flavours_quota/{proj_key} get_projects_flavours_quota GET /system/admin/get_projects_flavours_quota get_system_information GET /system/info get_system_modules_configuration GET /system/modules/configuration get_system_modules_tasks GET /system/modules/tasks get_version_report GET /deployment/info list_all_flavours GET /system/admin/list_all_flavours list_flavours_by_project GET /system/admin/get_project_flavours/{proj_key} list_packages GET /system/packages list_projects_flavours GET /system/admin/list_projects_flavours list_system_knowledge_graphs GET /system/kgs save_flavour PUT /system/admin/save_flavour save_flavours_default_quotas PUT /system/admin/save_flavours_default_quota save_project_flavours PUT /system/admin/save_project_flavours save_project_flavours_quota PUT /system/admin/save_project_flavours_quota system_get_all_dcs_admin GET /system/admin/get_all_dcs system_get_all_kgs_admin GET /system/admin/get_all_kgs system_get_cps_summary GET /system/admin/summary system_get_dc_storage_summary_async GET /system/admin/dc_storage_summary/{dc_key} system_get_kg_storage_summary_async GET /system/admin/kg_storage_summary/{kg_key}","title":"deepsearch.cps.apis.public.SystemApi"},{"location":"apis/public/SystemApi/#delete_flavour","text":"delete_flavour(flavour_name) Delete flavour from db","title":"delete_flavour"},{"location":"apis/public/SystemApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavour_name = 'flavour_name_example' # str | try : api_instance . delete_flavour ( flavour_name ) except ApiException as e : print ( \"Exception when calling SystemApi->delete_flavour: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters","text":"Name Type Description Notes flavour_name str","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/SystemApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details","text":"Status code Description Response headers 200 Deleted flavour successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_flavour","text":"BagFlavourFullData get_flavour(flavour_name) Get flavour from db","title":"get_flavour"},{"location":"apis/public/SystemApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavour_name = 'flavour_name_example' # str | try : api_response = api_instance . get_flavour ( flavour_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_flavour: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_1","text":"Name Type Description Notes flavour_name str","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_1","text":"BagFlavourFullData","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_1","text":"Status code Description Response headers 200 Get flavour successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_flavours_default_quotas","text":"list[BagFlavourDefaultQuota] get_flavours_default_quotas() Get flavours default values","title":"get_flavours_default_quotas"},{"location":"apis/public/SystemApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_flavours_default_quotas () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_flavours_default_quotas: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_2","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_2","text":"list[BagFlavourDefaultQuota]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_2","text":"Status code Description Response headers 200 Flavours default values - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_project_flavour_total_kgs","text":"ProjectFlavourTotalKgs get_project_flavour_total_kgs(proj_key, flavour_name) Gets kg total number by proj_key and flavour_key","title":"get_project_flavour_total_kgs"},{"location":"apis/public/SystemApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | flavour_name = 'flavour_name_example' # str | try : api_response = api_instance . get_project_flavour_total_kgs ( proj_key , flavour_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_project_flavour_total_kgs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_3","text":"Name Type Description Notes proj_key str flavour_name str","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_3","text":"ProjectFlavourTotalKgs","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_3","text":"Status code Description Response headers 200 Project flavours total kg number - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_project_flavours_quota","text":"list[FlavoursQuota] get_project_flavours_quota(proj_key) Get project flavours quota","title":"get_project_flavours_quota"},{"location":"apis/public/SystemApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . get_project_flavours_quota ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_project_flavours_quota: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_4","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_4","text":"list[FlavoursQuota]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_4","text":"Status code Description Response headers 200 Project flavours quota - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_projects_flavours_quota","text":"list[ProjectsFlavoursQuota] get_projects_flavours_quota() Get projects flavours quotas","title":"get_projects_flavours_quota"},{"location":"apis/public/SystemApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_projects_flavours_quota () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_projects_flavours_quota: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_5","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_5","text":"list[ProjectsFlavoursQuota]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_5","text":"Status code Description Response headers 200 Projects flavours quotas - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_system_information","text":"SystemInfo get_system_information() Get system info","title":"get_system_information"},{"location":"apis/public/SystemApi/#example_6","text":"from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_information () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_information: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_6","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_6","text":"SystemInfo","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_6","text":"No authorization required","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_6","text":"Status code Description Response headers 201 OK - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_system_modules_configuration","text":"SystemModulesConfiguration get_system_modules_configuration() Get modules configuration","title":"get_system_modules_configuration"},{"location":"apis/public/SystemApi/#example_7","text":"from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_modules_configuration () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_modules_configuration: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_7","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_7","text":"SystemModulesConfiguration","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_7","text":"No authorization required","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_7","text":"Status code Description Response headers 201 Modules configuration - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_system_modules_tasks","text":"SystemModulesTasks get_system_modules_tasks() Get modules tasks","title":"get_system_modules_tasks"},{"location":"apis/public/SystemApi/#example_8","text":"from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . get_system_modules_tasks () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->get_system_modules_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_8","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_8","text":"SystemModulesTasks","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_8","text":"No authorization required","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_8","text":"Status code Description Response headers 201 Modules tasks - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#get_version_report","text":"get_version_report() Get deployment version report","title":"get_version_report"},{"location":"apis/public/SystemApi/#example_9","text":"Api Key Authentication (ManagementKey): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ManagementKey configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_instance . get_version_report () except ApiException as e : print ( \"Exception when calling SystemApi->get_version_report: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_9","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_9","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_9","text":"ManagementKey","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_9","text":"Status code Description Response headers 200 OK - 401 Authentication failed, management api token is invalid or doesn't match - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#list_all_flavours","text":"list[BagFlavourFullData] list_all_flavours() Get all KG flavours storage on db","title":"list_all_flavours"},{"location":"apis/public/SystemApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_all_flavours () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_all_flavours: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_10","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_10","text":"list[BagFlavourFullData]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_10","text":"Status code Description Response headers 200 Flavours storage on db - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#list_flavours_by_project","text":"ProjectFlavours list_flavours_by_project(proj_key) Get project assignment flavours","title":"list_flavours_by_project"},{"location":"apis/public/SystemApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | try : api_response = api_instance . list_flavours_by_project ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_flavours_by_project: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_11","text":"Name Type Description Notes proj_key str","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_11","text":"ProjectFlavours","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_11","text":"Status code Description Response headers 200 Ok - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#list_packages","text":"list[CpsPackage] list_packages() Get packages available in this CPS installation for installing in a project.","title":"list_packages"},{"location":"apis/public/SystemApi/#example_12","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_packages () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_packages: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_12","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_12","text":"list[CpsPackage]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_12","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_12","text":"Status code Description Response headers 200 Packages available to this CPS installation - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#list_projects_flavours","text":"list[ProjectsFlavours] list_projects_flavours() Get all projects and their flavours","title":"list_projects_flavours"},{"location":"apis/public/SystemApi/#example_13","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . list_projects_flavours () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_projects_flavours: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_13","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_13","text":"list[ProjectsFlavours]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_13","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_13","text":"Status code Description Response headers 200 Flavours storage on db - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#list_system_knowledge_graphs","text":"list[KnowledgeGraphSystemInformation] list_system_knowledge_graphs(proj_key=proj_key, term=term) List all Knowledge Graphs in the system","title":"list_system_knowledge_graphs"},{"location":"apis/public/SystemApi/#example_14","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) proj_key = 'proj_key_example' # str | (optional) term = 'term_example' # str | (optional) try : api_response = api_instance . list_system_knowledge_graphs ( proj_key = proj_key , term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->list_system_knowledge_graphs: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_14","text":"Name Type Description Notes proj_key str [optional] term str [optional]","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_14","text":"list[KnowledgeGraphSystemInformation]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_14","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_14","text":"Status code Description Response headers 200 OK - 0 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#save_flavour","text":"save_flavour(new_flavour, body) Save flavour on db","title":"save_flavour"},{"location":"apis/public/SystemApi/#example_15","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) new_flavour = True # bool | body = deepsearch . cps . apis . public . BagFlavourFullData () # BagFlavourFullData | try : api_instance . save_flavour ( new_flavour , body ) except ApiException as e : print ( \"Exception when calling SystemApi->save_flavour: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_15","text":"Name Type Description Notes new_flavour bool body BagFlavourFullData","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_15","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_15","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_15","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_15","text":"Status code Description Response headers 200 Save flavour successful - 409 Flavour name already taken - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#save_flavours_default_quotas","text":"list[BagFlavourDefaultQuota] save_flavours_default_quotas(flavours) Save flavours default quota","title":"save_flavours_default_quotas"},{"location":"apis/public/SystemApi/#example_16","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) flavours = [ deepsearch . cps . apis . public . BagFlavourDefaultQuota ()] # list[BagFlavourDefaultQuota] | try : api_response = api_instance . save_flavours_default_quotas ( flavours ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->save_flavours_default_quotas: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_16","text":"Name Type Description Notes flavours list[BagFlavourDefaultQuota]","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_16","text":"list[BagFlavourDefaultQuota]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_16","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_16","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_16","text":"Status code Description Response headers 200 Save flavours default quotas successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#save_project_flavours","text":"save_project_flavours(body) Save project flavours assignment on db","title":"save_project_flavours"},{"location":"apis/public/SystemApi/#example_17","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) body = deepsearch . cps . apis . public . ProjectsFlavours () # ProjectsFlavours | try : api_instance . save_project_flavours ( body ) except ApiException as e : print ( \"Exception when calling SystemApi->save_project_flavours: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_17","text":"Name Type Description Notes body ProjectsFlavours","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_17","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_17","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_17","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_17","text":"Status code Description Response headers 200 Save project flavours successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#save_project_flavours_quota","text":"save_project_flavours_quota(projects_flavours_quotas) Save project flavours quota","title":"save_project_flavours_quota"},{"location":"apis/public/SystemApi/#example_18","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) projects_flavours_quotas = deepsearch . cps . apis . public . ProjectsFlavoursQuota () # ProjectsFlavoursQuota | try : api_instance . save_project_flavours_quota ( projects_flavours_quotas ) except ApiException as e : print ( \"Exception when calling SystemApi->save_project_flavours_quota: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_18","text":"Name Type Description Notes projects_flavours_quotas ProjectsFlavoursQuota","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_18","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_18","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_18","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_18","text":"Status code Description Response headers 200 Save project flavours quota successful - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#system_get_all_dcs_admin","text":"list[str] system_get_all_dcs_admin() Get all data catalogs (only dc_key) for admin use","title":"system_get_all_dcs_admin"},{"location":"apis/public/SystemApi/#example_19","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_all_dcs_admin () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_all_dcs_admin: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_19","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_19","text":"list[str]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_19","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_19","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_19","text":"Status code Description Response headers 200 Array with all dcs's key - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#system_get_all_kgs_admin","text":"list[str] system_get_all_kgs_admin() Get all kgs (only bag_key) for admin use","title":"system_get_all_kgs_admin"},{"location":"apis/public/SystemApi/#example_20","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_all_kgs_admin () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_all_kgs_admin: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_20","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_20","text":"list[str]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_20","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_20","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_20","text":"Status code Description Response headers 200 Array with all kgs's key - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#system_get_cps_summary","text":"list[InlineResponse2003] system_get_cps_summary() Get cps summary data.","title":"system_get_cps_summary"},{"location":"apis/public/SystemApi/#example_21","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) try : api_response = api_instance . system_get_cps_summary () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_cps_summary: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_21","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_21","text":"list[InlineResponse2003]","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_21","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_21","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_21","text":"Status code Description Response headers 200 Cps summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#system_get_dc_storage_summary_async","text":"StorageSummaryTask system_get_dc_storage_summary_async(dc_key) Get dc storage summary","title":"system_get_dc_storage_summary_async"},{"location":"apis/public/SystemApi/#example_22","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) dc_key = 'dc_key_example' # str | Data catalog key try : api_response = api_instance . system_get_dc_storage_summary_async ( dc_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_dc_storage_summary_async: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_22","text":"Name Type Description Notes dc_key str Data catalog key","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_22","text":"StorageSummaryTask","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_22","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_22","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_22","text":"Status code Description Response headers 200 DC storage summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemApi/#system_get_kg_storage_summary_async","text":"StorageSummaryTask system_get_kg_storage_summary_async(kg_key) Get kg storage summary","title":"system_get_kg_storage_summary_async"},{"location":"apis/public/SystemApi/#example_23","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . SystemApi ( api_client ) kg_key = 'kg_key_example' # str | Knowledge graph key try : api_response = api_instance . system_get_kg_storage_summary_async ( kg_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SystemApi->system_get_kg_storage_summary_async: %s \\n \" % e )","title":"Example"},{"location":"apis/public/SystemApi/#parameters_23","text":"Name Type Description Notes kg_key str Knowledge graph key","title":"Parameters"},{"location":"apis/public/SystemApi/#return-type_23","text":"StorageSummaryTask","title":"Return type"},{"location":"apis/public/SystemApi/#authorization_23","text":"Bearer","title":"Authorization"},{"location":"apis/public/SystemApi/#http-request-headers_23","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/SystemApi/#http-response-details_23","text":"Status code Description Response headers 200 Kg storage summary - 500 Error occured on the server - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/SystemCeleryTasksFailureFailures/","text":"SystemCeleryTasksFailureFailures \u00b6 Properties \u00b6 Name Type Description Notes logs dict(str, object) [optional] meta dict(str, object) [optional] task_id str [optional] worker_name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemCeleryTasksFailureFailures"},{"location":"apis/public/SystemCeleryTasksFailureFailures/#systemcelerytasksfailurefailures","text":"","title":"SystemCeleryTasksFailureFailures"},{"location":"apis/public/SystemCeleryTasksFailureFailures/#properties","text":"Name Type Description Notes logs dict(str, object) [optional] meta dict(str, object) [optional] task_id str [optional] worker_name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemInfo/","text":"SystemInfo \u00b6 Properties \u00b6 Name Type Description Notes allow_non_admins_to_make_resources_public bool [optional] api SystemInfoApi [optional] deployment SystemInfoDeployment [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemInfo"},{"location":"apis/public/SystemInfo/#systeminfo","text":"","title":"SystemInfo"},{"location":"apis/public/SystemInfo/#properties","text":"Name Type Description Notes allow_non_admins_to_make_resources_public bool [optional] api SystemInfoApi [optional] deployment SystemInfoDeployment [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemInfoApi/","text":"SystemInfoApi \u00b6 Properties \u00b6 Name Type Description Notes build_date int [optional] commit_hash str [optional] version str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemInfoApi"},{"location":"apis/public/SystemInfoApi/#systeminfoapi","text":"","title":"SystemInfoApi"},{"location":"apis/public/SystemInfoApi/#properties","text":"Name Type Description Notes build_date int [optional] commit_hash str [optional] version str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemInfoDeployment/","text":"SystemInfoDeployment \u00b6 Properties \u00b6 Name Type Description Notes disable_kg_actions bool [optional] disclaimer str [optional] linked_ccs_api SystemInfoDeploymentLinkedCcsApi [optional] name str [optional] should_show_warning bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemInfoDeployment"},{"location":"apis/public/SystemInfoDeployment/#systeminfodeployment","text":"","title":"SystemInfoDeployment"},{"location":"apis/public/SystemInfoDeployment/#properties","text":"Name Type Description Notes disable_kg_actions bool [optional] disclaimer str [optional] linked_ccs_api SystemInfoDeploymentLinkedCcsApi [optional] name str [optional] should_show_warning bool [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemInfoDeploymentLinkedCcsApi/","text":"SystemInfoDeploymentLinkedCcsApi \u00b6 Properties \u00b6 Name Type Description Notes project_sync bool [optional] uri str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemInfoDeploymentLinkedCcsApi"},{"location":"apis/public/SystemInfoDeploymentLinkedCcsApi/#systeminfodeploymentlinkedccsapi","text":"","title":"SystemInfoDeploymentLinkedCcsApi"},{"location":"apis/public/SystemInfoDeploymentLinkedCcsApi/#properties","text":"Name Type Description Notes project_sync bool [optional] uri str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemKgsBackend/","text":"SystemKgsBackend \u00b6 Properties \u00b6 Name Type Description Notes deployment SystemKgsDeployment [optional] flavour str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemKgsBackend"},{"location":"apis/public/SystemKgsBackend/#systemkgsbackend","text":"","title":"SystemKgsBackend"},{"location":"apis/public/SystemKgsBackend/#properties","text":"Name Type Description Notes deployment SystemKgsDeployment [optional] flavour str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemKgsDeployment/","text":"SystemKgsDeployment \u00b6 Properties \u00b6 Name Type Description Notes chart str [optional] flavour str [optional] name str [optional] resources dict(str, SystemKgsDeploymentResources) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemKgsDeployment"},{"location":"apis/public/SystemKgsDeployment/#systemkgsdeployment","text":"","title":"SystemKgsDeployment"},{"location":"apis/public/SystemKgsDeployment/#properties","text":"Name Type Description Notes chart str [optional] flavour str [optional] name str [optional] resources dict(str, SystemKgsDeploymentResources) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemKgsDeploymentResources/","text":"SystemKgsDeploymentResources \u00b6 Properties \u00b6 Name Type Description Notes limits object [optional] requests object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemKgsDeploymentResources"},{"location":"apis/public/SystemKgsDeploymentResources/#systemkgsdeploymentresources","text":"","title":"SystemKgsDeploymentResources"},{"location":"apis/public/SystemKgsDeploymentResources/#properties","text":"Name Type Description Notes limits object [optional] requests object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemModulesConfiguration/","text":"SystemModulesConfiguration \u00b6 Properties \u00b6 Name Type Description Notes df_template_variables list[WellKnownDfTemplateVariable] linked_ccs_instances list[LinkedCcsInstances] linked_elastic_instances list[LinkedCcsInstances] [Back to Model list] [Back to API list] [Back to README]","title":"SystemModulesConfiguration"},{"location":"apis/public/SystemModulesConfiguration/#systemmodulesconfiguration","text":"","title":"SystemModulesConfiguration"},{"location":"apis/public/SystemModulesConfiguration/#properties","text":"Name Type Description Notes df_template_variables list[WellKnownDfTemplateVariable] linked_ccs_instances list[LinkedCcsInstances] linked_elastic_instances list[LinkedCcsInstances] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemModulesTasks/","text":"SystemModulesTasks \u00b6 Properties \u00b6 Name Type Description Notes tasks dict(str, SystemModulesTasksTasks) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemModulesTasks"},{"location":"apis/public/SystemModulesTasks/#systemmodulestasks","text":"","title":"SystemModulesTasks"},{"location":"apis/public/SystemModulesTasks/#properties","text":"Name Type Description Notes tasks dict(str, SystemModulesTasksTasks) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/SystemModulesTasksTasks/","text":"SystemModulesTasksTasks \u00b6 Properties \u00b6 Name Type Description Notes schema object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemModulesTasksTasks"},{"location":"apis/public/SystemModulesTasksTasks/#systemmodulestaskstasks","text":"","title":"SystemModulesTasksTasks"},{"location":"apis/public/SystemModulesTasksTasks/#properties","text":"Name Type Description Notes schema object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TakeSnapshotSettings/","text":"TakeSnapshotSettings \u00b6 Properties \u00b6 Name Type Description Notes flavour str load_into_kg_after_created bool [optional] [default to False] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TakeSnapshotSettings"},{"location":"apis/public/TakeSnapshotSettings/#takesnapshotsettings","text":"","title":"TakeSnapshotSettings"},{"location":"apis/public/TakeSnapshotSettings/#properties","text":"Name Type Description Notes flavour str load_into_kg_after_created bool [optional] [default to False] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TakeSnapshotSettingsBackendAware/","text":"TakeSnapshotSettingsBackendAware \u00b6 Properties \u00b6 Name Type Description Notes backend_flavours BackendFlavour load_into_kg_after_created bool [optional] [default to False] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TakeSnapshotSettingsBackendAware"},{"location":"apis/public/TakeSnapshotSettingsBackendAware/#takesnapshotsettingsbackendaware","text":"","title":"TakeSnapshotSettingsBackendAware"},{"location":"apis/public/TakeSnapshotSettingsBackendAware/#properties","text":"Name Type Description Notes backend_flavours BackendFlavour load_into_kg_after_created bool [optional] [default to False] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/Task/","text":"Task \u00b6 Properties \u00b6 Name Type Description Notes error_reason str kind str proj_key str related_tasks list[RelatedTask] [optional] task_id str task_status str task_type str [Back to Model list] [Back to API list] [Back to README]","title":"Task"},{"location":"apis/public/Task/#task","text":"","title":"Task"},{"location":"apis/public/Task/#properties","text":"Name Type Description Notes error_reason str kind str proj_key str related_tasks list[RelatedTask] [optional] task_id str task_status str task_type str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TasksApi/","text":"deepsearch.cps.apis.public.TasksApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description abort_project_task POST /project/{proj_key}/tasks/{task_id}/actions/abort get_project_celery_task GET /project/{proj_key}/celery_tasks/{task_id} get_project_task GET /project/{proj_key}/tasks/{task_id} list_failure_celery_tasks GET /system/celery_tasks/failure list_project_tasks GET /project/{proj_key}/tasks list_system_celery_tasks GET /system/celery_tasks/status abort_project_task \u00b6 abort_project_task(proj_key, task_id) Abort a task. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_instance . abort_project_task ( proj_key , task_id ) except ApiException as e : print ( \"Exception when calling TasksApi->abort_project_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Task aborted. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_celery_task \u00b6 CeleryTaskPromise get_project_celery_task(proj_key, task_id) Get a celery task for a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_celery_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_celery_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str Return type \u00b6 CeleryTaskPromise Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_task \u00b6 ProjectTask get_project_task(proj_key, task_id) Get a task for a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_task: %s \\n \" % e ) Api Key Authentication (KGAuth): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str Return type \u00b6 ProjectTask Authorization \u00b6 Bearer , KGAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_failure_celery_tasks \u00b6 list[CeleryTask] list_failure_celery_tasks(proj_key, task_id) Get celery tasks that failed. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . list_failure_celery_tasks ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_failure_celery_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_id str Return type \u00b6 list[CeleryTask] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Celery tasks - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_tasks \u00b6 list[ProjectTask] list_project_tasks(proj_key, task_type=task_type, limit=limit, skip=skip, sort_by=sort_by, sort_order=sort_order) List tasks for a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_type = 'task_type_example' # str | (optional) limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) sort_by = 'sort_by_example' # str | (optional) sort_order = 'asc' # str | (optional) (default to 'asc') try : api_response = api_instance . list_project_tasks ( proj_key , task_type = task_type , limit = limit , skip = skip , sort_by = sort_by , sort_order = sort_order ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_project_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str task_type str [optional] limit int [optional] [default to 50] skip int [optional] [default to 0] sort_by str [optional] sort_order str [optional] [default to 'asc'] Return type \u00b6 list[ProjectTask] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_system_celery_tasks \u00b6 list[CeleryTask1] list_system_celery_tasks(proj_key=proj_key, project_task_id=project_task_id, started_since=started_since, task_status=task_status, limit=limit) Get the status of Celery tasks. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | (optional) project_task_id = 'project_task_id_example' # str | (optional) started_since = 3.4 # float | If set, return the tasks created at or after this timestamp. Otherwise, return the tasks created up to 60 minutes of the system's date, if `project_task_id` is not set. (optional) task_status = 3.4 # float | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_system_celery_tasks ( proj_key = proj_key , project_task_id = project_task_id , started_since = started_since , task_status = task_status , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_system_celery_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str [optional] project_task_id str [optional] started_since float If set, return the tasks created at or after this timestamp. Otherwise, return the tasks created up to 60 minutes of the system's date, if `project_task_id` is not set. [optional] task_status float [optional] limit int [optional] [default to 50] Return type \u00b6 list[CeleryTask1] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Celery tasks - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.TasksApi"},{"location":"apis/public/TasksApi/#deepsearchcpsapispublictasksapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description abort_project_task POST /project/{proj_key}/tasks/{task_id}/actions/abort get_project_celery_task GET /project/{proj_key}/celery_tasks/{task_id} get_project_task GET /project/{proj_key}/tasks/{task_id} list_failure_celery_tasks GET /system/celery_tasks/failure list_project_tasks GET /project/{proj_key}/tasks list_system_celery_tasks GET /system/celery_tasks/status","title":"deepsearch.cps.apis.public.TasksApi"},{"location":"apis/public/TasksApi/#abort_project_task","text":"abort_project_task(proj_key, task_id) Abort a task.","title":"abort_project_task"},{"location":"apis/public/TasksApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_instance . abort_project_task ( proj_key , task_id ) except ApiException as e : print ( \"Exception when calling TasksApi->abort_project_task: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters","text":"Name Type Description Notes proj_key str task_id str","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"apis/public/TasksApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details","text":"Status code Description Response headers 204 Task aborted. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TasksApi/#get_project_celery_task","text":"CeleryTaskPromise get_project_celery_task(proj_key, task_id) Get a celery task for a project.","title":"get_project_celery_task"},{"location":"apis/public/TasksApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_celery_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_celery_task: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters_1","text":"Name Type Description Notes proj_key str task_id str","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type_1","text":"CeleryTaskPromise","title":"Return type"},{"location":"apis/public/TasksApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details_1","text":"Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TasksApi/#get_project_task","text":"ProjectTask get_project_task(proj_key, task_id) Get a task for a project.","title":"get_project_task"},{"location":"apis/public/TasksApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_task: %s \\n \" % e ) Api Key Authentication (KGAuth): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure API key authorization: KGAuth configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'X-CPS-KG-Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['X-CPS-KG-Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . get_project_task ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_project_task: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters_2","text":"Name Type Description Notes proj_key str task_id str","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type_2","text":"ProjectTask","title":"Return type"},{"location":"apis/public/TasksApi/#authorization_2","text":"Bearer , KGAuth","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details_2","text":"Status code Description Response headers 200 Task - 404 Task not found. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TasksApi/#list_failure_celery_tasks","text":"list[CeleryTask] list_failure_celery_tasks(proj_key, task_id) Get celery tasks that failed.","title":"list_failure_celery_tasks"},{"location":"apis/public/TasksApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_id = 'task_id_example' # str | try : api_response = api_instance . list_failure_celery_tasks ( proj_key , task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_failure_celery_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters_3","text":"Name Type Description Notes proj_key str task_id str","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type_3","text":"list[CeleryTask]","title":"Return type"},{"location":"apis/public/TasksApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details_3","text":"Status code Description Response headers 200 Celery tasks - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TasksApi/#list_project_tasks","text":"list[ProjectTask] list_project_tasks(proj_key, task_type=task_type, limit=limit, skip=skip, sort_by=sort_by, sort_order=sort_order) List tasks for a project.","title":"list_project_tasks"},{"location":"apis/public/TasksApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | task_type = 'task_type_example' # str | (optional) limit = 50 # int | (optional) (default to 50) skip = 0 # int | (optional) (default to 0) sort_by = 'sort_by_example' # str | (optional) sort_order = 'asc' # str | (optional) (default to 'asc') try : api_response = api_instance . list_project_tasks ( proj_key , task_type = task_type , limit = limit , skip = skip , sort_by = sort_by , sort_order = sort_order ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_project_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters_4","text":"Name Type Description Notes proj_key str task_type str [optional] limit int [optional] [default to 50] skip int [optional] [default to 0] sort_by str [optional] sort_order str [optional] [default to 'asc']","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type_4","text":"list[ProjectTask]","title":"Return type"},{"location":"apis/public/TasksApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details_4","text":"Status code Description Response headers 200 List of tasks. - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TasksApi/#list_system_celery_tasks","text":"list[CeleryTask1] list_system_celery_tasks(proj_key=proj_key, project_task_id=project_task_id, started_since=started_since, task_status=task_status, limit=limit) Get the status of Celery tasks.","title":"list_system_celery_tasks"},{"location":"apis/public/TasksApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . TasksApi ( api_client ) proj_key = 'proj_key_example' # str | (optional) project_task_id = 'project_task_id_example' # str | (optional) started_since = 3.4 # float | If set, return the tasks created at or after this timestamp. Otherwise, return the tasks created up to 60 minutes of the system's date, if `project_task_id` is not set. (optional) task_status = 3.4 # float | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_system_celery_tasks ( proj_key = proj_key , project_task_id = project_task_id , started_since = started_since , task_status = task_status , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_system_celery_tasks: %s \\n \" % e )","title":"Example"},{"location":"apis/public/TasksApi/#parameters_5","text":"Name Type Description Notes proj_key str [optional] project_task_id str [optional] started_since float If set, return the tasks created at or after this timestamp. Otherwise, return the tasks created up to 60 minutes of the system's date, if `project_task_id` is not set. [optional] task_status float [optional] limit int [optional] [default to 50]","title":"Parameters"},{"location":"apis/public/TasksApi/#return-type_5","text":"list[CeleryTask1]","title":"Return type"},{"location":"apis/public/TasksApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/public/TasksApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/TasksApi/#http-response-details_5","text":"Status code Description Response headers 200 Celery tasks - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/TemporaryUploadFileResult/","text":"TemporaryUploadFileResult \u00b6 Properties \u00b6 Name Type Description Notes download TemporaryUploadFileResultDownload download_private TemporaryUploadFileResultDownloadPrivate id str ID of the temporary file. metadata TemporaryUploadFileResultMetadata metadata_private TemporaryUploadFileResultMetadataPrivate upload TemporaryUploadFileResultUpload upload_private TemporaryUploadFileResultUploadPrivate [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResult"},{"location":"apis/public/TemporaryUploadFileResult/#temporaryuploadfileresult","text":"","title":"TemporaryUploadFileResult"},{"location":"apis/public/TemporaryUploadFileResult/#properties","text":"Name Type Description Notes download TemporaryUploadFileResultDownload download_private TemporaryUploadFileResultDownloadPrivate id str ID of the temporary file. metadata TemporaryUploadFileResultMetadata metadata_private TemporaryUploadFileResultMetadataPrivate upload TemporaryUploadFileResultUpload upload_private TemporaryUploadFileResultUploadPrivate [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultDownload/","text":"TemporaryUploadFileResultDownload \u00b6 URL to get the temporary file. Properties \u00b6 Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultDownload"},{"location":"apis/public/TemporaryUploadFileResultDownload/#temporaryuploadfileresultdownload","text":"URL to get the temporary file.","title":"TemporaryUploadFileResultDownload"},{"location":"apis/public/TemporaryUploadFileResultDownload/#properties","text":"Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultDownloadPrivate/","text":"TemporaryUploadFileResultDownloadPrivate \u00b6 URL to get the temporary file. (private URL, usable within the infrastracture) Properties \u00b6 Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultDownloadPrivate"},{"location":"apis/public/TemporaryUploadFileResultDownloadPrivate/#temporaryuploadfileresultdownloadprivate","text":"URL to get the temporary file. (private URL, usable within the infrastracture)","title":"TemporaryUploadFileResultDownloadPrivate"},{"location":"apis/public/TemporaryUploadFileResultDownloadPrivate/#properties","text":"Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultMetadata/","text":"TemporaryUploadFileResultMetadata \u00b6 URL to metadata of the temporary file using the HEAD HTTP method. Properties \u00b6 Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultMetadata"},{"location":"apis/public/TemporaryUploadFileResultMetadata/#temporaryuploadfileresultmetadata","text":"URL to metadata of the temporary file using the HEAD HTTP method.","title":"TemporaryUploadFileResultMetadata"},{"location":"apis/public/TemporaryUploadFileResultMetadata/#properties","text":"Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultMetadataPrivate/","text":"TemporaryUploadFileResultMetadataPrivate \u00b6 URL to metadata of the temporary file using the HEAD HTTP method. (private URL, usable within the infrastracture) Properties \u00b6 Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultMetadataPrivate"},{"location":"apis/public/TemporaryUploadFileResultMetadataPrivate/#temporaryuploadfileresultmetadataprivate","text":"URL to metadata of the temporary file using the HEAD HTTP method. (private URL, usable within the infrastracture)","title":"TemporaryUploadFileResultMetadataPrivate"},{"location":"apis/public/TemporaryUploadFileResultMetadataPrivate/#properties","text":"Name Type Description Notes url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultUpload/","text":"TemporaryUploadFileResultUpload \u00b6 URL to upload the temporary file. Properties \u00b6 Name Type Description Notes fields object [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultUpload"},{"location":"apis/public/TemporaryUploadFileResultUpload/#temporaryuploadfileresultupload","text":"URL to upload the temporary file.","title":"TemporaryUploadFileResultUpload"},{"location":"apis/public/TemporaryUploadFileResultUpload/#properties","text":"Name Type Description Notes fields object [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TemporaryUploadFileResultUploadPrivate/","text":"TemporaryUploadFileResultUploadPrivate \u00b6 URL to upload the temporary file. (private URL, usable within the infrastracture) Properties \u00b6 Name Type Description Notes fields object [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TemporaryUploadFileResultUploadPrivate"},{"location":"apis/public/TemporaryUploadFileResultUploadPrivate/#temporaryuploadfileresultuploadprivate","text":"URL to upload the temporary file. (private URL, usable within the infrastracture)","title":"TemporaryUploadFileResultUploadPrivate"},{"location":"apis/public/TemporaryUploadFileResultUploadPrivate/#properties","text":"Name Type Description Notes fields object [optional] url str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TokenResponse/","text":"TokenResponse \u00b6 Properties \u00b6 Name Type Description Notes token str [Back to Model list] [Back to API list] [Back to README]","title":"TokenResponse"},{"location":"apis/public/TokenResponse/#tokenresponse","text":"","title":"TokenResponse"},{"location":"apis/public/TokenResponse/#properties","text":"Name Type Description Notes token str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/Topology/","text":"Topology \u00b6 Properties \u00b6 Name Type Description Notes categories list[TopologyNode] edges list[TopologyEdge] [Back to Model list] [Back to API list] [Back to README]","title":"Topology"},{"location":"apis/public/Topology/#topology","text":"","title":"Topology"},{"location":"apis/public/Topology/#properties","text":"Name Type Description Notes categories list[TopologyNode] edges list[TopologyEdge] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TopologyEdge/","text":"TopologyEdge \u00b6 Properties \u00b6 Name Type Description Notes name str source list[str] target list[str] [Back to Model list] [Back to API list] [Back to README]","title":"TopologyEdge"},{"location":"apis/public/TopologyEdge/#topologyedge","text":"","title":"TopologyEdge"},{"location":"apis/public/TopologyEdge/#properties","text":"Name Type Description Notes name str source list[str] target list[str] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/TopologyNode/","text":"TopologyNode \u00b6 Properties \u00b6 Name Type Description Notes name str [Back to Model list] [Back to API list] [Back to README]","title":"TopologyNode"},{"location":"apis/public/TopologyNode/#topologynode","text":"","title":"TopologyNode"},{"location":"apis/public/TopologyNode/#properties","text":"Name Type Description Notes name str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/UpdateDataFlowOptions/","text":"UpdateDataFlowOptions \u00b6 Properties \u00b6 Name Type Description Notes description str [optional] name str public bool template DataFlowTemplate variables dict(str, ProjectProjKeyKgcDataflowTemplatesVariables) [Back to Model list] [Back to API list] [Back to README]","title":"UpdateDataFlowOptions"},{"location":"apis/public/UpdateDataFlowOptions/#updatedataflowoptions","text":"","title":"UpdateDataFlowOptions"},{"location":"apis/public/UpdateDataFlowOptions/#properties","text":"Name Type Description Notes description str [optional] name str public bool template DataFlowTemplate variables dict(str, ProjectProjKeyKgcDataflowTemplatesVariables) [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/UpdateProjectModelConfigOptions/","text":"UpdateProjectModelConfigOptions \u00b6 Properties \u00b6 Name Type Description Notes configurations ProjectProjKeyModelConfigsConfigurations description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"UpdateProjectModelConfigOptions"},{"location":"apis/public/UpdateProjectModelConfigOptions/#updateprojectmodelconfigoptions","text":"","title":"UpdateProjectModelConfigOptions"},{"location":"apis/public/UpdateProjectModelConfigOptions/#properties","text":"Name Type Description Notes configurations ProjectProjKeyModelConfigsConfigurations description str name str public bool [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/UploadedFile/","text":"UploadedFile \u00b6 Properties \u00b6 Name Type Description Notes filename str id str ID of the temporary file. proj_key str timestamp float user_key str [Back to Model list] [Back to API list] [Back to README]","title":"UploadedFile"},{"location":"apis/public/UploadedFile/#uploadedfile","text":"","title":"UploadedFile"},{"location":"apis/public/UploadedFile/#properties","text":"Name Type Description Notes filename str id str ID of the temporary file. proj_key str timestamp float user_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/UploadedFileResult/","text":"UploadedFileResult \u00b6 Properties \u00b6 Name Type Description Notes id str ID of the temporary file. url str URL to get the temporary file form. [Back to Model list] [Back to API list] [Back to README]","title":"UploadedFileResult"},{"location":"apis/public/UploadedFileResult/#uploadedfileresult","text":"","title":"UploadedFileResult"},{"location":"apis/public/UploadedFileResult/#properties","text":"Name Type Description Notes id str ID of the temporary file. url str URL to get the temporary file form. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/UploadsApi/","text":"deepsearch.cps.apis.public.UploadsApi \u00b6 All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_project_scratch_file POST /project/{proj_key}/scratch/files/upload/{filename} list_project_scratch_files GET /project/{proj_key}/scratch/files upload_project_scratch_file POST /project/{proj_key}/scratch/files create_project_scratch_file \u00b6 TemporaryUploadFileResult create_project_scratch_file(proj_key, filename) Create file pointers for temporary storage Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | filename = 'filename_example' # str | try : api_response = api_instance . create_project_scratch_file ( proj_key , filename ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->create_project_scratch_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str filename str Return type \u00b6 TemporaryUploadFileResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Temporary file details - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_project_scratch_files \u00b6 list[UploadedFile] list_project_scratch_files(proj_key, scratch_ids=scratch_ids) Get temporary files uploaded to a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | scratch_ids = 'scratch_ids_example' # str | (optional) try : api_response = api_instance . list_project_scratch_files ( proj_key , scratch_ids = scratch_ids ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->list_project_scratch_files: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str scratch_ids str [optional] Return type \u00b6 list[UploadedFile] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Files - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README] upload_project_scratch_file \u00b6 UploadedFileResult upload_project_scratch_file(proj_key, file) Upload a file to temporary storage Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_scratch_file ( proj_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->upload_project_scratch_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str file file Return type \u00b6 UploadedFileResult Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 File uploaded - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.public.UploadsApi"},{"location":"apis/public/UploadsApi/#deepsearchcpsapispublicuploadsapi","text":"All URIs are relative to http://localhost/api/cps/public/v1 Method HTTP request Description create_project_scratch_file POST /project/{proj_key}/scratch/files/upload/{filename} list_project_scratch_files GET /project/{proj_key}/scratch/files upload_project_scratch_file POST /project/{proj_key}/scratch/files","title":"deepsearch.cps.apis.public.UploadsApi"},{"location":"apis/public/UploadsApi/#create_project_scratch_file","text":"TemporaryUploadFileResult create_project_scratch_file(proj_key, filename) Create file pointers for temporary storage","title":"create_project_scratch_file"},{"location":"apis/public/UploadsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | filename = 'filename_example' # str | try : api_response = api_instance . create_project_scratch_file ( proj_key , filename ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->create_project_scratch_file: %s \\n \" % e )","title":"Example"},{"location":"apis/public/UploadsApi/#parameters","text":"Name Type Description Notes proj_key str filename str","title":"Parameters"},{"location":"apis/public/UploadsApi/#return-type","text":"TemporaryUploadFileResult","title":"Return type"},{"location":"apis/public/UploadsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/public/UploadsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/UploadsApi/#http-response-details","text":"Status code Description Response headers 201 Temporary file details - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/UploadsApi/#list_project_scratch_files","text":"list[UploadedFile] list_project_scratch_files(proj_key, scratch_ids=scratch_ids) Get temporary files uploaded to a project","title":"list_project_scratch_files"},{"location":"apis/public/UploadsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | scratch_ids = 'scratch_ids_example' # str | (optional) try : api_response = api_instance . list_project_scratch_files ( proj_key , scratch_ids = scratch_ids ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->list_project_scratch_files: %s \\n \" % e )","title":"Example"},{"location":"apis/public/UploadsApi/#parameters_1","text":"Name Type Description Notes proj_key str scratch_ids str [optional]","title":"Parameters"},{"location":"apis/public/UploadsApi/#return-type_1","text":"list[UploadedFile]","title":"Return type"},{"location":"apis/public/UploadsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/public/UploadsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/UploadsApi/#http-response-details_1","text":"Status code Description Response headers 200 Files - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/UploadsApi/#upload_project_scratch_file","text":"UploadedFileResult upload_project_scratch_file(proj_key, file) Upload a file to temporary storage","title":"upload_project_scratch_file"},{"location":"apis/public/UploadsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.public from deepsearch.cps.apis.public.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/public/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . public . Configuration ( host = \"http://localhost/api/cps/public/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . public . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . public . UploadsApi ( api_client ) proj_key = 'proj_key_example' # str | file = '/path/to/file' # file | try : api_response = api_instance . upload_project_scratch_file ( proj_key , file ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UploadsApi->upload_project_scratch_file: %s \\n \" % e )","title":"Example"},{"location":"apis/public/UploadsApi/#parameters_2","text":"Name Type Description Notes proj_key str file file","title":"Parameters"},{"location":"apis/public/UploadsApi/#return-type_2","text":"UploadedFileResult","title":"Return type"},{"location":"apis/public/UploadsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/public/UploadsApi/#http-request-headers_2","text":"Content-Type : multipart/form-data Accept : application/json","title":"HTTP request headers"},{"location":"apis/public/UploadsApi/#http-response-details_2","text":"Status code Description Response headers 200 File uploaded - 0 Unexpected error. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/public/UsageStats/","text":"UsageStats \u00b6 Properties \u00b6 Name Type Description Notes bag_key str [optional] last_command str [optional] proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UsageStats"},{"location":"apis/public/UsageStats/#usagestats","text":"","title":"UsageStats"},{"location":"apis/public/UsageStats/#properties","text":"Name Type Description Notes bag_key str [optional] last_command str [optional] proj_key str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/public/WellKnownDfTemplateVariable/","text":"WellKnownDfTemplateVariable \u00b6 Properties \u00b6 Name Type Description Notes description str id str type DataFlowTemplateVariable [Back to Model list] [Back to API list] [Back to README]","title":"WellKnownDfTemplateVariable"},{"location":"apis/public/WellKnownDfTemplateVariable/#wellknowndftemplatevariable","text":"","title":"WellKnownDfTemplateVariable"},{"location":"apis/public/WellKnownDfTemplateVariable/#properties","text":"Name Type Description Notes description str id str type DataFlowTemplateVariable [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/AccessToken/","text":"AccessToken \u00b6 Properties \u00b6 Name Type Description Notes access_token str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AccessToken"},{"location":"apis/user/AccessToken/#accesstoken","text":"","title":"AccessToken"},{"location":"apis/user/AccessToken/#properties","text":"Name Type Description Notes access_token str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/AdminApi/","text":"deepsearch.cps.apis.user.AdminApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description confirm_user POST /admin/users/{user_key}/confirmation list_all_projects GET /admin/projects/all list_audits GET /admin/audits list_pending_users GET /admin/users/pending confirm_user \u00b6 confirm_user(user_key) Confirm a pending user. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) user_key = 'user_key_example' # str | try : api_instance . confirm_user ( user_key ) except ApiException as e : print ( \"Exception when calling AdminApi->confirm_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_key str Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_all_projects \u00b6 list[Project] list_all_projects() List all projects Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) try : api_response = api_instance . list_all_projects () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_all_projects: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[Project] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_audits \u00b6 InlineResponse200 list_audits(user_key=user_key, type_=type_, search_term=search_term, before=before, after=after, limit=limit) List audits globally Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) user_key = 'user_key_example' # str | (optional) type_ = 'type__example' # str | (optional) search_term = 'search_term_example' # str | (optional) before = 'before_example' # str | (optional) after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_audits ( user_key = user_key , type_ = type_ , search_term = search_term , before = before , after = after , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_audits: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_key str [optional] type_ str [optional] search_term str [optional] before str [optional] after str [optional] limit int [optional] [default to 50] Return type \u00b6 InlineResponse200 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_pending_users \u00b6 list[UserDetails] list_pending_users(term=term) List pending user requests. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) term = 'term_example' # str | (optional) try : api_response = api_instance . list_pending_users ( term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_pending_users: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes term str [optional] Return type \u00b6 list[UserDetails] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.user.AdminApi"},{"location":"apis/user/AdminApi/#deepsearchcpsapisuseradminapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description confirm_user POST /admin/users/{user_key}/confirmation list_all_projects GET /admin/projects/all list_audits GET /admin/audits list_pending_users GET /admin/users/pending","title":"deepsearch.cps.apis.user.AdminApi"},{"location":"apis/user/AdminApi/#confirm_user","text":"confirm_user(user_key) Confirm a pending user.","title":"confirm_user"},{"location":"apis/user/AdminApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) user_key = 'user_key_example' # str | try : api_instance . confirm_user ( user_key ) except ApiException as e : print ( \"Exception when calling AdminApi->confirm_user: %s \\n \" % e )","title":"Example"},{"location":"apis/user/AdminApi/#parameters","text":"Name Type Description Notes user_key str","title":"Parameters"},{"location":"apis/user/AdminApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"apis/user/AdminApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/user/AdminApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/AdminApi/#http-response-details","text":"Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/AdminApi/#list_all_projects","text":"list[Project] list_all_projects() List all projects","title":"list_all_projects"},{"location":"apis/user/AdminApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) try : api_response = api_instance . list_all_projects () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_all_projects: %s \\n \" % e )","title":"Example"},{"location":"apis/user/AdminApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/AdminApi/#return-type_1","text":"list[Project]","title":"Return type"},{"location":"apis/user/AdminApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/user/AdminApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/AdminApi/#http-response-details_1","text":"Status code Description Response headers 200 OK - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/AdminApi/#list_audits","text":"InlineResponse200 list_audits(user_key=user_key, type_=type_, search_term=search_term, before=before, after=after, limit=limit) List audits globally","title":"list_audits"},{"location":"apis/user/AdminApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) user_key = 'user_key_example' # str | (optional) type_ = 'type__example' # str | (optional) search_term = 'search_term_example' # str | (optional) before = 'before_example' # str | (optional) after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_audits ( user_key = user_key , type_ = type_ , search_term = search_term , before = before , after = after , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_audits: %s \\n \" % e )","title":"Example"},{"location":"apis/user/AdminApi/#parameters_2","text":"Name Type Description Notes user_key str [optional] type_ str [optional] search_term str [optional] before str [optional] after str [optional] limit int [optional] [default to 50]","title":"Parameters"},{"location":"apis/user/AdminApi/#return-type_2","text":"InlineResponse200","title":"Return type"},{"location":"apis/user/AdminApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/user/AdminApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/AdminApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/AdminApi/#list_pending_users","text":"list[UserDetails] list_pending_users(term=term) List pending user requests.","title":"list_pending_users"},{"location":"apis/user/AdminApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . AdminApi ( api_client ) term = 'term_example' # str | (optional) try : api_response = api_instance . list_pending_users ( term = term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AdminApi->list_pending_users: %s \\n \" % e )","title":"Example"},{"location":"apis/user/AdminApi/#parameters_3","text":"Name Type Description Notes term str [optional]","title":"Parameters"},{"location":"apis/user/AdminApi/#return-type_3","text":"list[UserDetails]","title":"Return type"},{"location":"apis/user/AdminApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/user/AdminApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/AdminApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ApiKey/","text":"ApiKey \u00b6 Properties \u00b6 Name Type Description Notes api_key str email str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ApiKey"},{"location":"apis/user/ApiKey/#apikey","text":"","title":"ApiKey"},{"location":"apis/user/ApiKey/#properties","text":"Name Type Description Notes api_key str email str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/AuditRecord/","text":"AuditRecord \u00b6 Properties \u00b6 Name Type Description Notes details object id str message str proj_key str timestamp str type str user_key str [Back to Model list] [Back to API list] [Back to README]","title":"AuditRecord"},{"location":"apis/user/AuditRecord/#auditrecord","text":"","title":"AuditRecord"},{"location":"apis/user/AuditRecord/#properties","text":"Name Type Description Notes details object id str message str proj_key str timestamp str type str user_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/CreateProjectRequestBody/","text":"CreateProjectRequestBody \u00b6 Properties \u00b6 Name Type Description Notes name str Name of the project proj_key str Internal project key to use. (use only if you really know what you are doing) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateProjectRequestBody"},{"location":"apis/user/CreateProjectRequestBody/#createprojectrequestbody","text":"","title":"CreateProjectRequestBody"},{"location":"apis/user/CreateProjectRequestBody/#properties","text":"Name Type Description Notes name str Name of the project proj_key str Internal project key to use. (use only if you really know what you are doing) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/CreateTokensRequestBody/","text":"CreateTokensRequestBody \u00b6 Properties \u00b6 Name Type Description Notes code str The oidc code response [optional] refresh_token str The refresh token [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTokensRequestBody"},{"location":"apis/user/CreateTokensRequestBody/#createtokensrequestbody","text":"","title":"CreateTokensRequestBody"},{"location":"apis/user/CreateTokensRequestBody/#properties","text":"Name Type Description Notes code str The oidc code response [optional] refresh_token str The refresh token [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes error str Description of the error. [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"apis/user/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"apis/user/ErrorResponse/#properties","text":"Name Type Description Notes error str Description of the error. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/GetAccessTokenRequestBody/","text":"GetAccessTokenRequestBody \u00b6 Properties \u00b6 Name Type Description Notes admin bool [optional] [default to False] [Back to Model list] [Back to API list] [Back to README]","title":"GetAccessTokenRequestBody"},{"location":"apis/user/GetAccessTokenRequestBody/#getaccesstokenrequestbody","text":"","title":"GetAccessTokenRequestBody"},{"location":"apis/user/GetAccessTokenRequestBody/#properties","text":"Name Type Description Notes admin bool [optional] [default to False] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ImpersonateUserTokenRequestBody/","text":"ImpersonateUserTokenRequestBody \u00b6 Properties \u00b6 Name Type Description Notes impersonate_secret str target_user_key str [Back to Model list] [Back to API list] [Back to README]","title":"ImpersonateUserTokenRequestBody"},{"location":"apis/user/ImpersonateUserTokenRequestBody/#impersonateusertokenrequestbody","text":"","title":"ImpersonateUserTokenRequestBody"},{"location":"apis/user/ImpersonateUserTokenRequestBody/#properties","text":"Name Type Description Notes impersonate_secret str target_user_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/InlineResponse200/","text":"InlineResponse200 \u00b6 Properties \u00b6 Name Type Description Notes audits list[AuditRecord] [Back to Model list] [Back to API list] [Back to README]","title":"InlineResponse200"},{"location":"apis/user/InlineResponse200/#inlineresponse200","text":"","title":"InlineResponse200"},{"location":"apis/user/InlineResponse200/#properties","text":"Name Type Description Notes audits list[AuditRecord] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/OidcApi/","text":"deepsearch.cps.apis.user.OidcApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description authenticate GET /oidc/authenticate create_tokens POST /oidc/token register_user POST /oidc/register_user token GET /oidc/token authenticate \u00b6 authenticate() Redirect to the OIDC authenticate endpoint. Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) try : api_instance . authenticate () except ApiException as e : print ( \"Exception when calling OidcApi->authenticate: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 void (empty response body) Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : Not defined HTTP response details \u00b6 Status code Description Response headers 302 Redirect to the OIDC authenticate endpoint - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_tokens \u00b6 OidcTokenResponse create_tokens(body=body) Retrieve the user access and identity tokens using either the code or the refresh_token. Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) body = deepsearch . cps . apis . user . CreateTokensRequestBody () # CreateTokensRequestBody | (optional) try : api_response = api_instance . create_tokens ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->create_tokens: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateTokensRequestBody [optional] Return type \u00b6 OidcTokenResponse Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] register_user \u00b6 UserDetails register_user(data) Register a new user, provided a valid access_token and id_token from the oidc provider. Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) data = deepsearch . cps . apis . user . RegisterUserRequestBody () # RegisterUserRequestBody | try : api_response = api_instance . register_user ( data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->register_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes data RegisterUserRequestBody Return type \u00b6 UserDetails Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] token \u00b6 OidcTokenResponse token(code=code, refresh_token=refresh_token) Retrieve the user access and identity tokens using either the code or the refresh_token. Example \u00b6 from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) code = 'code_example' # str | The oidc code response (optional) refresh_token = 'refresh_token_example' # str | The oidc code response (optional) try : api_response = api_instance . token ( code = code , refresh_token = refresh_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes code str The oidc code response [optional] refresh_token str The oidc code response [optional] Return type \u00b6 OidcTokenResponse Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.user.OidcApi"},{"location":"apis/user/OidcApi/#deepsearchcpsapisuseroidcapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description authenticate GET /oidc/authenticate create_tokens POST /oidc/token register_user POST /oidc/register_user token GET /oidc/token","title":"deepsearch.cps.apis.user.OidcApi"},{"location":"apis/user/OidcApi/#authenticate","text":"authenticate() Redirect to the OIDC authenticate endpoint.","title":"authenticate"},{"location":"apis/user/OidcApi/#example","text":"from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) try : api_instance . authenticate () except ApiException as e : print ( \"Exception when calling OidcApi->authenticate: %s \\n \" % e )","title":"Example"},{"location":"apis/user/OidcApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/OidcApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"apis/user/OidcApi/#authorization","text":"No authorization required","title":"Authorization"},{"location":"apis/user/OidcApi/#http-request-headers","text":"Content-Type : Not defined Accept : Not defined","title":"HTTP request headers"},{"location":"apis/user/OidcApi/#http-response-details","text":"Status code Description Response headers 302 Redirect to the OIDC authenticate endpoint - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/OidcApi/#create_tokens","text":"OidcTokenResponse create_tokens(body=body) Retrieve the user access and identity tokens using either the code or the refresh_token.","title":"create_tokens"},{"location":"apis/user/OidcApi/#example_1","text":"from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) body = deepsearch . cps . apis . user . CreateTokensRequestBody () # CreateTokensRequestBody | (optional) try : api_response = api_instance . create_tokens ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->create_tokens: %s \\n \" % e )","title":"Example"},{"location":"apis/user/OidcApi/#parameters_1","text":"Name Type Description Notes body CreateTokensRequestBody [optional]","title":"Parameters"},{"location":"apis/user/OidcApi/#return-type_1","text":"OidcTokenResponse","title":"Return type"},{"location":"apis/user/OidcApi/#authorization_1","text":"No authorization required","title":"Authorization"},{"location":"apis/user/OidcApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/OidcApi/#http-response-details_1","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/OidcApi/#register_user","text":"UserDetails register_user(data) Register a new user, provided a valid access_token and id_token from the oidc provider.","title":"register_user"},{"location":"apis/user/OidcApi/#example_2","text":"from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) data = deepsearch . cps . apis . user . RegisterUserRequestBody () # RegisterUserRequestBody | try : api_response = api_instance . register_user ( data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->register_user: %s \\n \" % e )","title":"Example"},{"location":"apis/user/OidcApi/#parameters_2","text":"Name Type Description Notes data RegisterUserRequestBody","title":"Parameters"},{"location":"apis/user/OidcApi/#return-type_2","text":"UserDetails","title":"Return type"},{"location":"apis/user/OidcApi/#authorization_2","text":"No authorization required","title":"Authorization"},{"location":"apis/user/OidcApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/OidcApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/OidcApi/#token","text":"OidcTokenResponse token(code=code, refresh_token=refresh_token) Retrieve the user access and identity tokens using either the code or the refresh_token.","title":"token"},{"location":"apis/user/OidcApi/#example_3","text":"from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient () as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . OidcApi ( api_client ) code = 'code_example' # str | The oidc code response (optional) refresh_token = 'refresh_token_example' # str | The oidc code response (optional) try : api_response = api_instance . token ( code = code , refresh_token = refresh_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling OidcApi->token: %s \\n \" % e )","title":"Example"},{"location":"apis/user/OidcApi/#parameters_3","text":"Name Type Description Notes code str The oidc code response [optional] refresh_token str The oidc code response [optional]","title":"Parameters"},{"location":"apis/user/OidcApi/#return-type_3","text":"OidcTokenResponse","title":"Return type"},{"location":"apis/user/OidcApi/#authorization_3","text":"No authorization required","title":"Authorization"},{"location":"apis/user/OidcApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/OidcApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/OidcTokenResponse/","text":"OidcTokenResponse \u00b6 Properties \u00b6 Name Type Description Notes access_token str [optional] id_token str refresh_token str [Back to Model list] [Back to API list] [Back to README]","title":"OidcTokenResponse"},{"location":"apis/user/OidcTokenResponse/#oidctokenresponse","text":"","title":"OidcTokenResponse"},{"location":"apis/user/OidcTokenResponse/#properties","text":"Name Type Description Notes access_token str [optional] id_token str refresh_token str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/Project/","text":"Project \u00b6 Properties \u00b6 Name Type Description Notes date str [optional] name str [optional] proj_key str [optional] role UserType [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Project"},{"location":"apis/user/Project/#project","text":"","title":"Project"},{"location":"apis/user/Project/#properties","text":"Name Type Description Notes date str [optional] name str [optional] proj_key str [optional] role UserType [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ProjectUserAssignment/","text":"ProjectUserAssignment \u00b6 Properties \u00b6 Name Type Description Notes role str The role to assign to the user username str The username [Back to Model list] [Back to API list] [Back to README]","title":"ProjectUserAssignment"},{"location":"apis/user/ProjectUserAssignment/#projectuserassignment","text":"","title":"ProjectUserAssignment"},{"location":"apis/user/ProjectUserAssignment/#properties","text":"Name Type Description Notes role str The role to assign to the user username str The username [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ProjectsApi/","text":"deepsearch.cps.apis.user.ProjectsApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description add_user POST /projects/{proj_key}/users create POST /projects delete DELETE /projects/{proj_key} details GET /projects/{proj_key} edit_user PUT /projects/{proj_key}/users get_delete_confirmation_token GET /projects/{proj_key}/delete get_project_token GET /projects/{proj_key}/token is_authorized GET /projects/{proj_key}/is_authorized list_audits_in_project GET /projects/{proj_key}/audits list_projects GET /projects list_users GET /projects/{proj_key}/users remove_user DELETE /projects/{proj_key}/users/{username} add_user \u00b6 SuccessMessage add_user(proj_key, data) Assign a new user to a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key data = deepsearch . cps . apis . user . ProjectUserAssignment () # ProjectUserAssignment | try : api_response = api_instance . add_user ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->add_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key data ProjectUserAssignment Return type \u00b6 SuccessMessage Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 User assigned to project. - 400 Invalid new_user_type. - 403 The user that's performing this operation does not have permission to assign the user. - 404 User that's going to be assigned doesn't exist, or the project doesn't exist. - 409 Reassigning the user would leave the project in an invalid state. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create \u00b6 Project create(data) Create a new project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) data = deepsearch . cps . apis . user . CreateProjectRequestBody () # CreateProjectRequestBody | try : api_response = api_instance . create ( data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->create: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes data CreateProjectRequestBody Return type \u00b6 Project Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 New project details - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete \u00b6 delete(proj_key, confirmation_token) Delete a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key confirmation_token = 'confirmation_token_example' # str | The delete confirmation token try : api_instance . delete ( proj_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling ProjectsApi->delete: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key confirmation_token str The delete confirmation token Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Project deleted successfully. - 403 The user that is executing this operation is not an owner of the project. - 404 Project not found. - 409 User not assigned to project. - [Back to top] [Back to API list] [Back to Model list] [Back to README] details \u00b6 Project details(proj_key) Returns the details of the project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . details ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->details: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key Return type \u00b6 Project Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] edit_user \u00b6 SuccessMessage edit_user(proj_key, data) Assign a new user to a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key data = deepsearch . cps . apis . user . ProjectUserAssignment () # ProjectUserAssignment | try : api_response = api_instance . edit_user ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->edit_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key data ProjectUserAssignment Return type \u00b6 SuccessMessage Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 User assigned to project. - 400 Invalid new_user_type. - 403 The user that's performing this operation does not have permission to assign the user. - 404 User that's going to be assigned doesn't exist, or the project doesn't exist. - 409 Reassigning the user would leave the project in an invalid state. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_delete_confirmation_token \u00b6 TokenResponse get_delete_confirmation_token(proj_key) Get a delete confirmation token for the provided project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . get_delete_confirmation_token ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->get_delete_confirmation_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key Return type \u00b6 TokenResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Confirmation token. - 403 The user that is executing this operation is not an owner of the project. - 404 Project not found. - 409 User not assigned to project. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_token \u00b6 AccessToken get_project_token(proj_key) Request a token granting access to the current project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . get_project_token ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->get_project_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key Return type \u00b6 AccessToken Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] is_authorized \u00b6 SuccessMessage is_authorized(proj_key, role=role) Provide user-key and project-key to coordinates a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key role = 'role_example' # str | The specific role to probe (optional) try : api_response = api_instance . is_authorized ( proj_key , role = role ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->is_authorized: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key role str The specific role to probe [optional] Return type \u00b6 SuccessMessage Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_audits_in_project \u00b6 InlineResponse200 list_audits_in_project(proj_key, user_key=user_key, type_=type_, search_term=search_term, before=before, after=after, limit=limit) List audits related to the project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key user_key = 'user_key_example' # str | (optional) type_ = 'type__example' # str | (optional) search_term = 'search_term_example' # str | (optional) before = 'before_example' # str | (optional) after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_audits_in_project ( proj_key , user_key = user_key , type_ = type_ , search_term = search_term , before = before , after = after , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_audits_in_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key user_key str [optional] type_ str [optional] search_term str [optional] before str [optional] after str [optional] limit int [optional] [default to 50] Return type \u00b6 InlineResponse200 Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_projects \u00b6 list[Project] list_projects(role=role, include_collaborators=include_collaborators) List all projects assigned to a user Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) role = 'role_example' # str | filter for the user role (optional) include_collaborators = True # bool | (optional) (default to True) try : api_response = api_instance . list_projects ( role = role , include_collaborators = include_collaborators ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes role str filter for the user role [optional] include_collaborators bool [optional] [default to True] Return type \u00b6 list[Project] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_users \u00b6 dict(str, list[UserDetails]) list_users(proj_key) List all users belonging to a project Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . list_users ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_users: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key Return type \u00b6 dict(str, list[UserDetails]) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 404 User does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README] remove_user \u00b6 remove_user(proj_key, username) Delete an user from a project. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key username = 'username_example' # str | The username for the user try : api_instance . remove_user ( proj_key , username ) except ApiException as e : print ( \"Exception when calling ProjectsApi->remove_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes proj_key str The project key username str The username for the user Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 User deleted from project successfully. - 403 The user that is executing this operation is not an owner of the project. - 404 Project or user not found. - 409 User not assigned to project, or the project only has one owner left. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.user.ProjectsApi"},{"location":"apis/user/ProjectsApi/#deepsearchcpsapisuserprojectsapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description add_user POST /projects/{proj_key}/users create POST /projects delete DELETE /projects/{proj_key} details GET /projects/{proj_key} edit_user PUT /projects/{proj_key}/users get_delete_confirmation_token GET /projects/{proj_key}/delete get_project_token GET /projects/{proj_key}/token is_authorized GET /projects/{proj_key}/is_authorized list_audits_in_project GET /projects/{proj_key}/audits list_projects GET /projects list_users GET /projects/{proj_key}/users remove_user DELETE /projects/{proj_key}/users/{username}","title":"deepsearch.cps.apis.user.ProjectsApi"},{"location":"apis/user/ProjectsApi/#add_user","text":"SuccessMessage add_user(proj_key, data) Assign a new user to a project","title":"add_user"},{"location":"apis/user/ProjectsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key data = deepsearch . cps . apis . user . ProjectUserAssignment () # ProjectUserAssignment | try : api_response = api_instance . add_user ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->add_user: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters","text":"Name Type Description Notes proj_key str The project key data ProjectUserAssignment","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type","text":"SuccessMessage","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details","text":"Status code Description Response headers 200 User assigned to project. - 400 Invalid new_user_type. - 403 The user that's performing this operation does not have permission to assign the user. - 404 User that's going to be assigned doesn't exist, or the project doesn't exist. - 409 Reassigning the user would leave the project in an invalid state. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#create","text":"Project create(data) Create a new project","title":"create"},{"location":"apis/user/ProjectsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) data = deepsearch . cps . apis . user . CreateProjectRequestBody () # CreateProjectRequestBody | try : api_response = api_instance . create ( data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->create: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_1","text":"Name Type Description Notes data CreateProjectRequestBody","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_1","text":"Project","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_1","text":"Status code Description Response headers 200 New project details - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#delete","text":"delete(proj_key, confirmation_token) Delete a project.","title":"delete"},{"location":"apis/user/ProjectsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key confirmation_token = 'confirmation_token_example' # str | The delete confirmation token try : api_instance . delete ( proj_key , confirmation_token ) except ApiException as e : print ( \"Exception when calling ProjectsApi->delete: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_2","text":"Name Type Description Notes proj_key str The project key confirmation_token str The delete confirmation token","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_2","text":"Status code Description Response headers 204 Project deleted successfully. - 403 The user that is executing this operation is not an owner of the project. - 404 Project not found. - 409 User not assigned to project. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#details","text":"Project details(proj_key) Returns the details of the project","title":"details"},{"location":"apis/user/ProjectsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . details ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->details: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_3","text":"Name Type Description Notes proj_key str The project key","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_3","text":"Project","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#edit_user","text":"SuccessMessage edit_user(proj_key, data) Assign a new user to a project","title":"edit_user"},{"location":"apis/user/ProjectsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key data = deepsearch . cps . apis . user . ProjectUserAssignment () # ProjectUserAssignment | try : api_response = api_instance . edit_user ( proj_key , data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->edit_user: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_4","text":"Name Type Description Notes proj_key str The project key data ProjectUserAssignment","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_4","text":"SuccessMessage","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_4","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_4","text":"Status code Description Response headers 200 User assigned to project. - 400 Invalid new_user_type. - 403 The user that's performing this operation does not have permission to assign the user. - 404 User that's going to be assigned doesn't exist, or the project doesn't exist. - 409 Reassigning the user would leave the project in an invalid state. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#get_delete_confirmation_token","text":"TokenResponse get_delete_confirmation_token(proj_key) Get a delete confirmation token for the provided project.","title":"get_delete_confirmation_token"},{"location":"apis/user/ProjectsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . get_delete_confirmation_token ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->get_delete_confirmation_token: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_5","text":"Name Type Description Notes proj_key str The project key","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_5","text":"TokenResponse","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_5","text":"Status code Description Response headers 200 Confirmation token. - 403 The user that is executing this operation is not an owner of the project. - 404 Project not found. - 409 User not assigned to project. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#get_project_token","text":"AccessToken get_project_token(proj_key) Request a token granting access to the current project","title":"get_project_token"},{"location":"apis/user/ProjectsApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . get_project_token ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->get_project_token: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_6","text":"Name Type Description Notes proj_key str The project key","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_6","text":"AccessToken","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_6","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#is_authorized","text":"SuccessMessage is_authorized(proj_key, role=role) Provide user-key and project-key to coordinates a project","title":"is_authorized"},{"location":"apis/user/ProjectsApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key role = 'role_example' # str | The specific role to probe (optional) try : api_response = api_instance . is_authorized ( proj_key , role = role ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->is_authorized: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_7","text":"Name Type Description Notes proj_key str The project key role str The specific role to probe [optional]","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_7","text":"SuccessMessage","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_7","text":"Status code Description Response headers 200 OK - 401 Unauthorized - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#list_audits_in_project","text":"InlineResponse200 list_audits_in_project(proj_key, user_key=user_key, type_=type_, search_term=search_term, before=before, after=after, limit=limit) List audits related to the project","title":"list_audits_in_project"},{"location":"apis/user/ProjectsApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key user_key = 'user_key_example' # str | (optional) type_ = 'type__example' # str | (optional) search_term = 'search_term_example' # str | (optional) before = 'before_example' # str | (optional) after = 'after_example' # str | (optional) limit = 50 # int | (optional) (default to 50) try : api_response = api_instance . list_audits_in_project ( proj_key , user_key = user_key , type_ = type_ , search_term = search_term , before = before , after = after , limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_audits_in_project: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_8","text":"Name Type Description Notes proj_key str The project key user_key str [optional] type_ str [optional] search_term str [optional] before str [optional] after str [optional] limit int [optional] [default to 50]","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_8","text":"InlineResponse200","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_8","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#list_projects","text":"list[Project] list_projects(role=role, include_collaborators=include_collaborators) List all projects assigned to a user","title":"list_projects"},{"location":"apis/user/ProjectsApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) role = 'role_example' # str | filter for the user role (optional) include_collaborators = True # bool | (optional) (default to True) try : api_response = api_instance . list_projects ( role = role , include_collaborators = include_collaborators ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_9","text":"Name Type Description Notes role str filter for the user role [optional] include_collaborators bool [optional] [default to True]","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_9","text":"list[Project]","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_9","text":"Status code Description Response headers 200 OK - 404 Project does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#list_users","text":"dict(str, list[UserDetails]) list_users(proj_key) List all users belonging to a project","title":"list_users"},{"location":"apis/user/ProjectsApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key try : api_response = api_instance . list_users ( proj_key ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_users: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_10","text":"Name Type Description Notes proj_key str The project key","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_10","text":"dict(str, list[UserDetails])","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_10","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 404 User does not exist. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/ProjectsApi/#remove_user","text":"remove_user(proj_key, username) Delete an user from a project.","title":"remove_user"},{"location":"apis/user/ProjectsApi/#example_11","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . ProjectsApi ( api_client ) proj_key = 'proj_key_example' # str | The project key username = 'username_example' # str | The username for the user try : api_instance . remove_user ( proj_key , username ) except ApiException as e : print ( \"Exception when calling ProjectsApi->remove_user: %s \\n \" % e )","title":"Example"},{"location":"apis/user/ProjectsApi/#parameters_11","text":"Name Type Description Notes proj_key str The project key username str The username for the user","title":"Parameters"},{"location":"apis/user/ProjectsApi/#return-type_11","text":"void (empty response body)","title":"Return type"},{"location":"apis/user/ProjectsApi/#authorization_11","text":"Bearer","title":"Authorization"},{"location":"apis/user/ProjectsApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/ProjectsApi/#http-response-details_11","text":"Status code Description Response headers 204 User deleted from project successfully. - 403 The user that is executing this operation is not an owner of the project. - 404 Project or user not found. - 409 User not assigned to project, or the project only has one owner left. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/RegisterUserRequestBody/","text":"RegisterUserRequestBody \u00b6 Properties \u00b6 Name Type Description Notes access_token str OIDC access_token signed by the provider id_token str OIDC id_token signed by the provider [Back to Model list] [Back to API list] [Back to README]","title":"RegisterUserRequestBody"},{"location":"apis/user/RegisterUserRequestBody/#registeruserrequestbody","text":"","title":"RegisterUserRequestBody"},{"location":"apis/user/RegisterUserRequestBody/#properties","text":"Name Type Description Notes access_token str OIDC access_token signed by the provider id_token str OIDC id_token signed by the provider [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ServiceAccount/","text":"ServiceAccount \u00b6 Properties \u00b6 Name Type Description Notes credentials ServiceAccountCredentials [optional] name str [optional] user_key str [Back to Model list] [Back to API list] [Back to README]","title":"ServiceAccount"},{"location":"apis/user/ServiceAccount/#serviceaccount","text":"","title":"ServiceAccount"},{"location":"apis/user/ServiceAccount/#properties","text":"Name Type Description Notes credentials ServiceAccountCredentials [optional] name str [optional] user_key str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/ServiceAccountCredentials/","text":"ServiceAccountCredentials \u00b6 Properties \u00b6 Name Type Description Notes password str username str [Back to Model list] [Back to API list] [Back to README]","title":"ServiceAccountCredentials"},{"location":"apis/user/ServiceAccountCredentials/#serviceaccountcredentials","text":"","title":"ServiceAccountCredentials"},{"location":"apis/user/ServiceAccountCredentials/#properties","text":"Name Type Description Notes password str username str [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/SettingsApi/","text":"deepsearch.cps.apis.user.SettingsApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description global_permissions GET /permissions global_permissions \u00b6 dict(str, bool) global_permissions() Get the global permissions for users. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . SettingsApi ( api_client ) try : api_response = api_instance . global_permissions () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SettingsApi->global_permissions: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 dict(str, bool) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.user.SettingsApi"},{"location":"apis/user/SettingsApi/#deepsearchcpsapisusersettingsapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description global_permissions GET /permissions","title":"deepsearch.cps.apis.user.SettingsApi"},{"location":"apis/user/SettingsApi/#global_permissions","text":"dict(str, bool) global_permissions() Get the global permissions for users.","title":"global_permissions"},{"location":"apis/user/SettingsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . SettingsApi ( api_client ) try : api_response = api_instance . global_permissions () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SettingsApi->global_permissions: %s \\n \" % e )","title":"Example"},{"location":"apis/user/SettingsApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/SettingsApi/#return-type","text":"dict(str, bool)","title":"Return type"},{"location":"apis/user/SettingsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/user/SettingsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/SettingsApi/#http-response-details","text":"Status code Description Response headers 200 OK - 401 Unauthorized - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/SuccessMessage/","text":"SuccessMessage \u00b6 Properties \u00b6 Name Type Description Notes success str Human readable message. [Back to Model list] [Back to API list] [Back to README]","title":"SuccessMessage"},{"location":"apis/user/SuccessMessage/#successmessage","text":"","title":"SuccessMessage"},{"location":"apis/user/SuccessMessage/#properties","text":"Name Type Description Notes success str Human readable message. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/TokenResponse/","text":"TokenResponse \u00b6 Properties \u00b6 Name Type Description Notes token str The delete confirmation token. [Back to Model list] [Back to API list] [Back to README]","title":"TokenResponse"},{"location":"apis/user/TokenResponse/#tokenresponse","text":"","title":"TokenResponse"},{"location":"apis/user/TokenResponse/#properties","text":"Name Type Description Notes token str The delete confirmation token. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/UserApi/","text":"deepsearch.cps.apis.user.UserApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description api_key_create POST /user/api_key api_key_create \u00b6 ApiKey api_key_create() Create an API Key for your user Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UserApi ( api_client ) try : api_response = api_instance . api_key_create () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UserApi->api_key_create: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 ApiKey Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"User API"},{"location":"apis/user/UserApi/#deepsearchcpsapisuseruserapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description api_key_create POST /user/api_key","title":"deepsearch.cps.apis.user.UserApi"},{"location":"apis/user/UserApi/#api_key_create","text":"ApiKey api_key_create() Create an API Key for your user","title":"api_key_create"},{"location":"apis/user/UserApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UserApi ( api_client ) try : api_response = api_instance . api_key_create () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UserApi->api_key_create: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UserApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/UserApi/#return-type","text":"ApiKey","title":"Return type"},{"location":"apis/user/UserApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/user/UserApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UserApi/#http-response-details","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UserDetails/","text":"UserDetails \u00b6 Properties \u00b6 Name Type Description Notes email str [optional] role str [optional] username str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UserDetails"},{"location":"apis/user/UserDetails/#userdetails","text":"","title":"UserDetails"},{"location":"apis/user/UserDetails/#properties","text":"Name Type Description Notes email str [optional] role str [optional] username str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/UserType/","text":"UserType \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"UserType"},{"location":"apis/user/UserType/#usertype","text":"","title":"UserType"},{"location":"apis/user/UserType/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"apis/user/UsersApi/","text":"deepsearch.cps.apis.user.UsersApi \u00b6 All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description api_key_get GET /user/api_key get_access_token POST /user/token get_current_user_details GET /user/current impersonate_user_token POST /user/impersonate search GET /user/search service_accounts_create POST /user/service_accounts service_accounts_list GET /user/service_accounts api_key_get \u00b6 ApiKey api_key_get() Show the API Key for your user Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . api_key_get () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->api_key_get: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 ApiKey Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_access_token \u00b6 AccessToken get_access_token(options=options) Request a user API token Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) options = deepsearch . cps . apis . user . GetAccessTokenRequestBody () # GetAccessTokenRequestBody | (optional) try : api_response = api_instance . get_access_token ( options = options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_access_token: %s \\n \" % e ) Basic Authentication (UserAPIKey): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) options = deepsearch . cps . apis . user . GetAccessTokenRequestBody () # GetAccessTokenRequestBody | (optional) try : api_response = api_instance . get_access_token ( options = options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_access_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes options GetAccessTokenRequestBody [optional] Return type \u00b6 AccessToken Authorization \u00b6 Bearer , UserAPIKey HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_current_user_details \u00b6 UserDetails get_current_user_details() Gets the current user's details. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . get_current_user_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_current_user_details: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 UserDetails Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] impersonate_user_token \u00b6 TokenResponse impersonate_user_token(body) Request an impersonate user token. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) body = deepsearch . cps . apis . user . ImpersonateUserTokenRequestBody () # ImpersonateUserTokenRequestBody | try : api_response = api_instance . impersonate_user_token ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->impersonate_user_token: %s \\n \" % e ) Basic Authentication (UserAPIKey): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) body = deepsearch . cps . apis . user . ImpersonateUserTokenRequestBody () # ImpersonateUserTokenRequestBody | try : api_response = api_instance . impersonate_user_token ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->impersonate_user_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body ImpersonateUserTokenRequestBody Return type \u00b6 TokenResponse Authorization \u00b6 Bearer , UserAPIKey HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - 401 Unauthorized. - 403 The user that's performing this operation does not have permission or the impersonate secret isn't valid. - [Back to top] [Back to API list] [Back to Model list] [Back to README] search \u00b6 list[UserDetails] search(term) Search for users matching the email or name. Depending on the user's permissions, only owners and assignees from their projects may be shown. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) term = 'term_example' # str | Search term try : api_response = api_instance . search ( term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->search: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes term str Search term Return type \u00b6 list[UserDetails] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] service_accounts_create \u00b6 ServiceAccount service_accounts_create() Create a new service accounts for your user Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . service_accounts_create () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->service_accounts_create: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 ServiceAccount Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README] service_accounts_list \u00b6 list[ServiceAccount] service_accounts_list() List all service accounts of your user Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . service_accounts_list () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->service_accounts_list: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 list[ServiceAccount] Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"deepsearch.cps.apis.user.UsersApi"},{"location":"apis/user/UsersApi/#deepsearchcpsapisuserusersapi","text":"All URIs are relative to http://localhost/api/cps/user/v1 Method HTTP request Description api_key_get GET /user/api_key get_access_token POST /user/token get_current_user_details GET /user/current impersonate_user_token POST /user/impersonate search GET /user/search service_accounts_create POST /user/service_accounts service_accounts_list GET /user/service_accounts","title":"deepsearch.cps.apis.user.UsersApi"},{"location":"apis/user/UsersApi/#api_key_get","text":"ApiKey api_key_get() Show the API Key for your user","title":"api_key_get"},{"location":"apis/user/UsersApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . api_key_get () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->api_key_get: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type","text":"ApiKey","title":"Return type"},{"location":"apis/user/UsersApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#get_access_token","text":"AccessToken get_access_token(options=options) Request a user API token","title":"get_access_token"},{"location":"apis/user/UsersApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) options = deepsearch . cps . apis . user . GetAccessTokenRequestBody () # GetAccessTokenRequestBody | (optional) try : api_response = api_instance . get_access_token ( options = options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_access_token: %s \\n \" % e ) Basic Authentication (UserAPIKey): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) options = deepsearch . cps . apis . user . GetAccessTokenRequestBody () # GetAccessTokenRequestBody | (optional) try : api_response = api_instance . get_access_token ( options = options ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_access_token: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_1","text":"Name Type Description Notes options GetAccessTokenRequestBody [optional]","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_1","text":"AccessToken","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_1","text":"Bearer , UserAPIKey","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_1","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#get_current_user_details","text":"UserDetails get_current_user_details() Gets the current user's details.","title":"get_current_user_details"},{"location":"apis/user/UsersApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . get_current_user_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->get_current_user_details: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_2","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_2","text":"UserDetails","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_2","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#impersonate_user_token","text":"TokenResponse impersonate_user_token(body) Request an impersonate user token.","title":"impersonate_user_token"},{"location":"apis/user/UsersApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) body = deepsearch . cps . apis . user . ImpersonateUserTokenRequestBody () # ImpersonateUserTokenRequestBody | try : api_response = api_instance . impersonate_user_token ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->impersonate_user_token: %s \\n \" % e ) Basic Authentication (UserAPIKey): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Configure HTTP basic authorization: UserAPIKey configuration = deepsearch . cps . apis . user . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) body = deepsearch . cps . apis . user . ImpersonateUserTokenRequestBody () # ImpersonateUserTokenRequestBody | try : api_response = api_instance . impersonate_user_token ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->impersonate_user_token: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_3","text":"Name Type Description Notes body ImpersonateUserTokenRequestBody","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_3","text":"TokenResponse","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_3","text":"Bearer , UserAPIKey","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_3","text":"Status code Description Response headers 200 OK - 401 Unauthorized. - 403 The user that's performing this operation does not have permission or the impersonate secret isn't valid. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#search","text":"list[UserDetails] search(term) Search for users matching the email or name. Depending on the user's permissions, only owners and assignees from their projects may be shown.","title":"search"},{"location":"apis/user/UsersApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) term = 'term_example' # str | Search term try : api_response = api_instance . search ( term ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->search: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_4","text":"Name Type Description Notes term str Search term","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_4","text":"list[UserDetails]","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_4","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#service_accounts_create","text":"ServiceAccount service_accounts_create() Create a new service accounts for your user","title":"service_accounts_create"},{"location":"apis/user/UsersApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . service_accounts_create () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->service_accounts_create: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_5","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_5","text":"ServiceAccount","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_5","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"apis/user/UsersApi/#service_accounts_list","text":"list[ServiceAccount] service_accounts_list() List all service accounts of your user","title":"service_accounts_list"},{"location":"apis/user/UsersApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import deepsearch.cps.apis.user from deepsearch.cps.apis.user.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to http://localhost/api/cps/user/v1 # See configuration.py for a list of all supported configuration parameters. configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = deepsearch . cps . apis . user . Configuration ( host = \"http://localhost/api/cps/user/v1\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with deepsearch . cps . apis . user . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = deepsearch . cps . apis . user . UsersApi ( api_client ) try : api_response = api_instance . service_accounts_list () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsersApi->service_accounts_list: %s \\n \" % e )","title":"Example"},{"location":"apis/user/UsersApi/#parameters_6","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"apis/user/UsersApi/#return-type_6","text":"list[ServiceAccount]","title":"Return type"},{"location":"apis/user/UsersApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"apis/user/UsersApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"apis/user/UsersApi/#http-response-details_6","text":"Status code Description Response headers 200 OK - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"gallery/","text":"Gallery \u00b6 Examples of complete analysis and usages Examples are usually demonstrated as Jupyter notebooks which are listed in the examples folder. To the examples Dependencies Running the examples requires additional dependencies such as jupyter/notebook and pandas . These are easily installed with the examples extra dependency. $ pip install deepsearch-toolkit [ examples ] ---> 100%","title":"Example gallery"},{"location":"gallery/#gallery","text":"Examples of complete analysis and usages Examples are usually demonstrated as Jupyter notebooks which are listed in the examples folder. To the examples Dependencies Running the examples requires additional dependencies such as jupyter/notebook and pandas . These are easily installed with the examples extra dependency. $ pip install deepsearch-toolkit [ examples ] ---> 100%","title":"Gallery"},{"location":"getting_started/","text":"Authentication \u00b6 After registering with Deep Search , you can obtain your login information by clicking on API in the top-right corner. Your login information consists of your USER-EMAIL (User name as shown below) and an API-KEY . Configure \u00b6 CLI Python Using the deepsearch login command: $ deepsearch login Host [https://deepsearch-experience.res.ibm.com]: #(1) Email: #(2) Api key: #(3) Press Enter/Return for using default host. Otherwise, input the Deep Search deployment host to use. Enter your login USER-EMAIL . Enter your login API-KEY . import deepsearch as ds # API key authorization auth = ds . DeepSearchKeyAuth ( username = \"USER-EMAIL\" , api_key = \"API-KEY\" , ) # In case you have already a valid temporary access_token # auth = DeepSearchAuth(bearer_token=\"TOKEN\") config = ds . DeepSearchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , ) client = ds . CpsApiClient ( config ) api = ds . CpsApi ( client ) Verify Login \u00b6 All capabilities of the toolkit can only occur after a successful login configuration. Here, we verify our login configurations by checking the version Deep Search Toolkit. In addition, we recommend trying some simple operations like listing your projects or converting a document as shown below. CLI Python Using the deepsearch version command $ deepsearch version import deepsearch as ds versions = ds . version () Convert Documents \u00b6 Here, we show a simple way to convert documents using Deep Search . See the guide on document conversion for more details. Let PATH_DOCS be the path to a PDF document or a ZIP file or a directory in your local machine: CLI Python $ deepsearch documents convert -p PROJ_KEY -i PATH_DOCS import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , source_path = PATH_DOCS ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Getting started"},{"location":"getting_started/#authentication","text":"After registering with Deep Search , you can obtain your login information by clicking on API in the top-right corner. Your login information consists of your USER-EMAIL (User name as shown below) and an API-KEY .","title":"Authentication"},{"location":"getting_started/#configure","text":"CLI Python Using the deepsearch login command: $ deepsearch login Host [https://deepsearch-experience.res.ibm.com]: #(1) Email: #(2) Api key: #(3) Press Enter/Return for using default host. Otherwise, input the Deep Search deployment host to use. Enter your login USER-EMAIL . Enter your login API-KEY . import deepsearch as ds # API key authorization auth = ds . DeepSearchKeyAuth ( username = \"USER-EMAIL\" , api_key = \"API-KEY\" , ) # In case you have already a valid temporary access_token # auth = DeepSearchAuth(bearer_token=\"TOKEN\") config = ds . DeepSearchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , ) client = ds . CpsApiClient ( config ) api = ds . CpsApi ( client )","title":"Configure"},{"location":"getting_started/#verify-login","text":"All capabilities of the toolkit can only occur after a successful login configuration. Here, we verify our login configurations by checking the version Deep Search Toolkit. In addition, we recommend trying some simple operations like listing your projects or converting a document as shown below. CLI Python Using the deepsearch version command $ deepsearch version import deepsearch as ds versions = ds . version ()","title":"Verify Login"},{"location":"getting_started/#convert-documents","text":"Here, we show a simple way to convert documents using Deep Search . See the guide on document conversion for more details. Let PATH_DOCS be the path to a PDF document or a ZIP file or a directory in your local machine: CLI Python $ deepsearch documents convert -p PROJ_KEY -i PATH_DOCS import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , source_path = PATH_DOCS ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Convert Documents"},{"location":"guide/","text":"User guides \u00b6 Common Deep Search operations \u00b6 Convert a document Management of system resources \u00b6 List projects List and manage data List and manage KGs Operate with manual API calls Custom CLI plugins","title":"User guides"},{"location":"guide/#user-guides","text":"","title":"User guides"},{"location":"guide/#common-deep-search-operations","text":"Convert a document","title":"Common Deep Search operations"},{"location":"guide/#management-of-system-resources","text":"List projects List and manage data List and manage KGs Operate with manual API calls Custom CLI plugins","title":"Management of system resources"},{"location":"guide/apis/","text":"Tip The features described on this page are not available in the public service. Contact us to know more. Interaction with the Deep Search APIs \u00b6 Autogenerated API clients \u00b6 The SDK is also exposing the Swagger/OpenAPI autogenerated sdk clients. They can be used for interaction with all the CPS API endpoints. For more details, refer to the autogenerated docs . Usage of the Swagger SDK \u00b6 from deepsearch.core.client import DeepSearchBearerTokenAuth , DeepSearchKeyAuth , DeepSearchConfig from deepsearch.cps.client.api import CpsApi , CpsApiClient import urllib3 urllib3 . disable_warnings ( urllib3 . exceptions . InsecureRequestWarning ) # Import of the bare Swagger clients from deepsearch.cps.apis import public as sw_client auth = DeepSearchKeyAuth ( username = \"EMAIL\" , api_key = \"TOKEN\" , ) config = DeepSeaerchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , verify_ssl = False , ) client = CpsApiClient ( config ) api = CpsApi ( client ) # Initialize the Swagger client, e.g. the `KnowledgeGraphsApi` sw_kg_api = sw_client . KnowledgeGraphsApi ( api . client . swagger_client ) # ...use the Swagger client directly Interacting with the API directly via requests \u00b6 Another option is interacting with the CPS API directly using the endpoints. CPS provides a Swagger UI for inspecting all API endpoints (documented with schemas). To access the API documentation please use the following URLs: - User API: https://{HOST}/api/cps/user/v1/ui/ - Public API: https://{HOST}/api/cps/public/v1/ui/ For example: - User API: https://deepsearch-experience.res.ibm.com/api/cps/user/v1/ui/ - Public API: https://deepsearch-experience.res.ibm.com/api/cps/public/v1/ui/ Once find the endpoint for your request, you can use it with this example code. from deepsearch.core.client import DeepSearchBearerTokenAuth , DeepSearchKeyAuth , DeepSearchConfig from deepsearch.cps.client.api import CpsApi , CpsApiClient auth = DeepSearchKeyAuth ( username = \"EMAIL\" , api_key = \"TOKEN\" , ) config = DeepSearchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , verify_ssl = False , ) client = CpsApiClient ( config ) api = CpsApi ( client ) cps_api_url = api . client . swagger_client . configuration . host # For example, get list of KGs via the endpoint `/backend/project/{proj_key}/bags` proj_key = \"abc123\" r = api . client . session . get ( f \" { cps_api_url } /backend/project/ { proj_key } /bags\" ) r . raise_for_status () print ( r . json ())","title":"APIs"},{"location":"guide/apis/#interaction-with-the-deep-search-apis","text":"","title":"Interaction with the Deep Search APIs"},{"location":"guide/apis/#autogenerated-api-clients","text":"The SDK is also exposing the Swagger/OpenAPI autogenerated sdk clients. They can be used for interaction with all the CPS API endpoints. For more details, refer to the autogenerated docs .","title":"Autogenerated API clients"},{"location":"guide/apis/#usage-of-the-swagger-sdk","text":"from deepsearch.core.client import DeepSearchBearerTokenAuth , DeepSearchKeyAuth , DeepSearchConfig from deepsearch.cps.client.api import CpsApi , CpsApiClient import urllib3 urllib3 . disable_warnings ( urllib3 . exceptions . InsecureRequestWarning ) # Import of the bare Swagger clients from deepsearch.cps.apis import public as sw_client auth = DeepSearchKeyAuth ( username = \"EMAIL\" , api_key = \"TOKEN\" , ) config = DeepSeaerchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , verify_ssl = False , ) client = CpsApiClient ( config ) api = CpsApi ( client ) # Initialize the Swagger client, e.g. the `KnowledgeGraphsApi` sw_kg_api = sw_client . KnowledgeGraphsApi ( api . client . swagger_client ) # ...use the Swagger client directly","title":"Usage of the Swagger SDK"},{"location":"guide/apis/#interacting-with-the-api-directly-via-requests","text":"Another option is interacting with the CPS API directly using the endpoints. CPS provides a Swagger UI for inspecting all API endpoints (documented with schemas). To access the API documentation please use the following URLs: - User API: https://{HOST}/api/cps/user/v1/ui/ - Public API: https://{HOST}/api/cps/public/v1/ui/ For example: - User API: https://deepsearch-experience.res.ibm.com/api/cps/user/v1/ui/ - Public API: https://deepsearch-experience.res.ibm.com/api/cps/public/v1/ui/ Once find the endpoint for your request, you can use it with this example code. from deepsearch.core.client import DeepSearchBearerTokenAuth , DeepSearchKeyAuth , DeepSearchConfig from deepsearch.cps.client.api import CpsApi , CpsApiClient auth = DeepSearchKeyAuth ( username = \"EMAIL\" , api_key = \"TOKEN\" , ) config = DeepSearchConfig ( host = \"https://deepsearch-experience.res.ibm.com\" , auth = auth , verify_ssl = False , ) client = CpsApiClient ( config ) api = CpsApi ( client ) cps_api_url = api . client . swagger_client . configuration . host # For example, get list of KGs via the endpoint `/backend/project/{proj_key}/bags` proj_key = \"abc123\" r = api . client . session . get ( f \" { cps_api_url } /backend/project/ { proj_key } /bags\" ) r . raise_for_status () print ( r . json ())","title":"Interacting with the API directly via requests"},{"location":"guide/cli_plugins/","text":"CLI plugins \u00b6 We use Pluggy to extend the DeepSearch CLI. We recommend having a look at it's documentation for further details. Writing a CLI plugin \u00b6 We use Typer on the DeepSearch CLI. We recommend having a look at it's tutorial, which goes into further detail on how to use this library. In the example file below, we use the hookimpl to add our own CLI command group. The main requirements are: Your hook implementation must return a typer.Typer instance The instance must have a name set Consider the following toy example: # my_deepsearch_plugin/main.py import typer # Get the hookimpl that you will use to hook into the DeepSearch CLI from deepsearch.core.cli.plugins import deepsearch_cli_hookimpl # Implement the function to return a group. # We're defining an 'example' group, # using the Typer library. # It will be available as 'deepsearch example'. # Note: the name of the function is important! @deepsearch_cli_hookimpl def deepsearch_cli_add_group () -> typer . Typer : app = typer . Typer ( name = \"example\" ) # Define one or more commands. @app . command ( \"test\" ) def test ( name : str ): typer . echo ( f \"Hello, { name } !\" ) return app You can use any of the deepsearch package's contents to write your CLI plugins. See deepsearch/examples for more examples. Adding the plugin to your package \u00b6 Pluggy makes use of setuptools entry points to load plugins. Here's how you can add yours: Via setup.py \u00b6 Add a entry_points argument to your setup.py , replacing my_deepsearch_plugin.main to point to the file where you defined your plugin. setup ( entry_points = { \"deepsearch\" : [ \"cli = my_deepsearch_plugin.main\" ], } ) Via Poetry with pyproject.toml \u00b6 Add the following to your pyproject.toml , replacing my_deepsearch_plugin.main to point to the file where you defined your plugin. [tool.poetry.plugins.deepsearch] cli = \"my_deepsearch_plugin.main\" Using the plugin \u00b6 After installing your plugin package, you should see the example section when you run deepsearch : > deepsearch Usage: deepsearch [OPTIONS] COMMAND [ARGS]... Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: config Manage CLI config files cps Interact with DeepSearch CPS component example login Login to DeepSearch platform query Interact with DeepSearch Query component version Print the client and server version information And running our newly added command gives us... > deepsearch example test DeepSearch Hello, DeepSearch!","title":"Plugin system"},{"location":"guide/cli_plugins/#cli-plugins","text":"We use Pluggy to extend the DeepSearch CLI. We recommend having a look at it's documentation for further details.","title":"CLI plugins"},{"location":"guide/cli_plugins/#writing-a-cli-plugin","text":"We use Typer on the DeepSearch CLI. We recommend having a look at it's tutorial, which goes into further detail on how to use this library. In the example file below, we use the hookimpl to add our own CLI command group. The main requirements are: Your hook implementation must return a typer.Typer instance The instance must have a name set Consider the following toy example: # my_deepsearch_plugin/main.py import typer # Get the hookimpl that you will use to hook into the DeepSearch CLI from deepsearch.core.cli.plugins import deepsearch_cli_hookimpl # Implement the function to return a group. # We're defining an 'example' group, # using the Typer library. # It will be available as 'deepsearch example'. # Note: the name of the function is important! @deepsearch_cli_hookimpl def deepsearch_cli_add_group () -> typer . Typer : app = typer . Typer ( name = \"example\" ) # Define one or more commands. @app . command ( \"test\" ) def test ( name : str ): typer . echo ( f \"Hello, { name } !\" ) return app You can use any of the deepsearch package's contents to write your CLI plugins. See deepsearch/examples for more examples.","title":"Writing a CLI plugin"},{"location":"guide/cli_plugins/#adding-the-plugin-to-your-package","text":"Pluggy makes use of setuptools entry points to load plugins. Here's how you can add yours:","title":"Adding the plugin to your package"},{"location":"guide/cli_plugins/#via-setuppy","text":"Add a entry_points argument to your setup.py , replacing my_deepsearch_plugin.main to point to the file where you defined your plugin. setup ( entry_points = { \"deepsearch\" : [ \"cli = my_deepsearch_plugin.main\" ], } )","title":"Via setup.py"},{"location":"guide/cli_plugins/#via-poetry-with-pyprojecttoml","text":"Add the following to your pyproject.toml , replacing my_deepsearch_plugin.main to point to the file where you defined your plugin. [tool.poetry.plugins.deepsearch] cli = \"my_deepsearch_plugin.main\"","title":"Via Poetry with pyproject.toml"},{"location":"guide/cli_plugins/#using-the-plugin","text":"After installing your plugin package, you should see the example section when you run deepsearch : > deepsearch Usage: deepsearch [OPTIONS] COMMAND [ARGS]... Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: config Manage CLI config files cps Interact with DeepSearch CPS component example login Login to DeepSearch platform query Interact with DeepSearch Query component version Print the client and server version information And running our newly added command gives us... > deepsearch example test DeepSearch Hello, DeepSearch!","title":"Using the plugin"},{"location":"guide/convert_doc/","text":"This page shows how to convert documents and download the converted .json files. Instead of downloading the converted .json files, if you'd like to add the converted document to your project see Adding documents in a project . For the tasks on this page, you are required to identify your project within Deep Search via a PROJ_KEY . Listing projects shows the PROJ_KEY for all of your projects. Converting local documents \u00b6 The toolkit provides an easy method to convert documents from your local machine. The deepsearch documents component processes your input, uploads local files, submits for conversion and downloads the results to your machine. Following inputs are supported: Single document in PDF format. Multiple documents in ZIP format. Directory containing multiple documents in PDF and ZIP formats. Warning ZIP files containing additional ZIP files are not supported. Let PATH_DOCS be the path to a PDF document or a ZIP file or a directory in your local machine: CLI Python $ deepsearch documents convert -p PROJ_KEY -i PATH_DOCS import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , source_path = PATH_DOCS ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR ) Converting remote documents \u00b6 Single URL \u00b6 Let URL be the web address for an online document. CLI Python $ deepsearch documents convert -p PROJ_KEY -u URL import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , urls = URL ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR ) Multiple URLs \u00b6 Multiple online documents can also be conveniently converted. For CLI: Create a text file containing the web addresses for online documents, separated by empty lines. For example, the contents of ONLINE-DOCS.txt could be: URL1 URL2 URL3 Let PATH_ONLINE_DOCS be the path to this text file. For python: Simply pass a python list object containing multiple urls. Let URL be a list containing several URLs. CLI Python deepsearch documents convert -p PROJ_KEY -u PATH_ONLINE_DOCS import deepsearch as ds URL = [ \"https:///URL1\" , \"https://URL2\" , \"https://URL3\" ] documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , urls = URL ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Document Conversion"},{"location":"guide/convert_doc/#converting-local-documents","text":"The toolkit provides an easy method to convert documents from your local machine. The deepsearch documents component processes your input, uploads local files, submits for conversion and downloads the results to your machine. Following inputs are supported: Single document in PDF format. Multiple documents in ZIP format. Directory containing multiple documents in PDF and ZIP formats. Warning ZIP files containing additional ZIP files are not supported. Let PATH_DOCS be the path to a PDF document or a ZIP file or a directory in your local machine: CLI Python $ deepsearch documents convert -p PROJ_KEY -i PATH_DOCS import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , source_path = PATH_DOCS ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Converting local documents"},{"location":"guide/convert_doc/#converting-remote-documents","text":"","title":"Converting remote documents"},{"location":"guide/convert_doc/#single-url","text":"Let URL be the web address for an online document. CLI Python $ deepsearch documents convert -p PROJ_KEY -u URL import deepsearch as ds documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , urls = URL ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Single URL"},{"location":"guide/convert_doc/#multiple-urls","text":"Multiple online documents can also be conveniently converted. For CLI: Create a text file containing the web addresses for online documents, separated by empty lines. For example, the contents of ONLINE-DOCS.txt could be: URL1 URL2 URL3 Let PATH_ONLINE_DOCS be the path to this text file. For python: Simply pass a python list object containing multiple urls. Let URL be a list containing several URLs. CLI Python deepsearch documents convert -p PROJ_KEY -u PATH_ONLINE_DOCS import deepsearch as ds URL = [ \"https:///URL1\" , \"https://URL2\" , \"https://URL3\" ] documents = ds . convert_documents ( api = api , proj_key = PROJ_KEY , urls = URL ) # Let's download all the converted documents locally in RESULT_DIR documents . download_all ( result_dir = RESULT_DIR )","title":"Multiple URLs"},{"location":"guide/data_indices/","text":"Tip The features described on this page are not available in the public service. Contact us to know more. Data indices \u00b6 A data index stores a collection of documents in a project. This page shows how to create and delete a data index, and to list all data indices in a project. Since a data index \"lives\" inside a project, we need to specify which project we are referring to. This is accomplished by a project key PROJ_KEY . We can obtain the project keys for our projects by listing them . Create data index in a project \u00b6 Suppose you want to create an index called NAME . Optionally, a description, DESC , for the data index can be provided. CLI Python $ deepsearch cps data-indices create -p PROJ_KEY -n NAME -d DESC After you have generated the api object (from login configuration ), api . data_indices . create ( proj_key = PROJ_KEY , name = NAME , desc = DESC ) In addition, it is possible to specify non-default type of data index. For more, see here for CLI and here for python . Type Description Document (Default) Index containing documents uploaded as PDF and converted by the platform. DB Records Index containing data matching the DB records schema. This usually orginates from curated data collections, and exposes a schema which can be leveraged in the processing pipeline. Generic Generic type with the least requirements. Experiment Data coming from simulation experiments. Listing data indices in a project \u00b6 CLI Python $ deepsearch cps data-indices list -p PROJ_KEY indices = api . data_indices . list ( PROJ_KEY ) for item in indices : print ( item . key , item . name ) # If your project uses Pandas, you can easily convert the list of projects to a Dataframe import pandas as pd df = pd . DataFrame ([ item . to_dict () for item in indices ]) print ( df ) Deleting data index in a project \u00b6 To delete a data index, you need to specify an index via its INDEX_KEY . Listing data indices will show the INDEX_KEY for all the indices in a project. CLI Python $ deepsearch cps data-indices delete -p PROJ_KEY -x INDEX_KEY from deepsearch.cps.client.components.elastic import ElasticProjectDataCollectionSource # specify index coords = ElasticProjectDataCollectionSource ( proj_key = PROJ_KEY , index_key = INDEX_KEY ) api . data_indices . delete ( coords ) Adding documents in a project \u00b6 Documents can be converted and added, directly, to a data index in a project. Briefly, documents can be on a local machine or on the remote files. Local documents can be in PDF format, ZIP archives, or directory containing both ( PATH_DOCS ). The web address of a remote document is input directly or multiple web addresses can be stored in a text file ( PATH_URL ). The specification of documents is same as in Document Conversion . CLI Python // for local documents $ deepsearch cps data-indices upload -p PROJ_KEY -x INDEX_KEY -i PATH_DOCS // for online documents $ deepsearch cps data-indices upload -p PROJ_KEY -x INDEX_KEY -u PATH_URL from deepsearch.cps.client.components.elastic import ElasticProjectDataCollectionSource # Specify index coords = ElasticProjectDataCollectionSource ( proj_key = PROJ_KEY , index_key = INDEX_KEY ) # For local documents ds . data_indices_utilities . upload_files ( coords = coords , local_file = PATH_DOCS ) # For online documents # load the urls from the file to a list input_urls = open ( PATH_URL ) . readlines () # or, define a list directly #input_urls = [\"https:///URL1\", \"https://URL2\", \"https://URL3\"] ds . data_indices_utilities . upload_files ( coords = coords , url = input_urls )","title":"Data"},{"location":"guide/data_indices/#data-indices","text":"A data index stores a collection of documents in a project. This page shows how to create and delete a data index, and to list all data indices in a project. Since a data index \"lives\" inside a project, we need to specify which project we are referring to. This is accomplished by a project key PROJ_KEY . We can obtain the project keys for our projects by listing them .","title":"Data indices"},{"location":"guide/data_indices/#create-data-index-in-a-project","text":"Suppose you want to create an index called NAME . Optionally, a description, DESC , for the data index can be provided. CLI Python $ deepsearch cps data-indices create -p PROJ_KEY -n NAME -d DESC After you have generated the api object (from login configuration ), api . data_indices . create ( proj_key = PROJ_KEY , name = NAME , desc = DESC ) In addition, it is possible to specify non-default type of data index. For more, see here for CLI and here for python . Type Description Document (Default) Index containing documents uploaded as PDF and converted by the platform. DB Records Index containing data matching the DB records schema. This usually orginates from curated data collections, and exposes a schema which can be leveraged in the processing pipeline. Generic Generic type with the least requirements. Experiment Data coming from simulation experiments.","title":"Create data index in a project"},{"location":"guide/data_indices/#listing-data-indices-in-a-project","text":"CLI Python $ deepsearch cps data-indices list -p PROJ_KEY indices = api . data_indices . list ( PROJ_KEY ) for item in indices : print ( item . key , item . name ) # If your project uses Pandas, you can easily convert the list of projects to a Dataframe import pandas as pd df = pd . DataFrame ([ item . to_dict () for item in indices ]) print ( df )","title":"Listing data indices in a project"},{"location":"guide/data_indices/#deleting-data-index-in-a-project","text":"To delete a data index, you need to specify an index via its INDEX_KEY . Listing data indices will show the INDEX_KEY for all the indices in a project. CLI Python $ deepsearch cps data-indices delete -p PROJ_KEY -x INDEX_KEY from deepsearch.cps.client.components.elastic import ElasticProjectDataCollectionSource # specify index coords = ElasticProjectDataCollectionSource ( proj_key = PROJ_KEY , index_key = INDEX_KEY ) api . data_indices . delete ( coords )","title":"Deleting data index in a project"},{"location":"guide/data_indices/#adding-documents-in-a-project","text":"Documents can be converted and added, directly, to a data index in a project. Briefly, documents can be on a local machine or on the remote files. Local documents can be in PDF format, ZIP archives, or directory containing both ( PATH_DOCS ). The web address of a remote document is input directly or multiple web addresses can be stored in a text file ( PATH_URL ). The specification of documents is same as in Document Conversion . CLI Python // for local documents $ deepsearch cps data-indices upload -p PROJ_KEY -x INDEX_KEY -i PATH_DOCS // for online documents $ deepsearch cps data-indices upload -p PROJ_KEY -x INDEX_KEY -u PATH_URL from deepsearch.cps.client.components.elastic import ElasticProjectDataCollectionSource # Specify index coords = ElasticProjectDataCollectionSource ( proj_key = PROJ_KEY , index_key = INDEX_KEY ) # For local documents ds . data_indices_utilities . upload_files ( coords = coords , local_file = PATH_DOCS ) # For online documents # load the urls from the file to a list input_urls = open ( PATH_URL ) . readlines () # or, define a list directly #input_urls = [\"https:///URL1\", \"https://URL2\", \"https://URL3\"] ds . data_indices_utilities . upload_files ( coords = coords , url = input_urls )","title":"Adding documents in a project"},{"location":"guide/kgs/","text":"Tip The features described on this page are not available in the public service. Contact us to know more. Knowledge graphs \u00b6 Operations on KGs \u00b6 When interacting with a KG, you can obtain the proj_key and kg_key identifiers from the API section of the UI. List the KGs in a project \u00b6 proj_key = \"abc123\" # get your proj_key from the UI details kgs = api . knowledge_graphs . list ( proj_key ) print ( kgs ) Query a KG \u00b6 from deepsearch.cps.client.queries import Query from deepsearch.cps.client.queries.task import Value from deepsearch.cps.client.queries.query_tasks import ForEach , Workflow from deepsearch.cps.client.builders.wf_builder import WorkflowBuilder , WorkflowTaskOperation proj_key = \"abc123\" # get your proj_key from the UI details kg_key = \"xyz987\" # get kg_key (also called bag_key) from the UI details kg = api . knowledge_graphs . get ( proj_key , kg_key ) if kg is None : raise Exception ( \"No such kg\" ) # Get the KG topology topo = kg . get_topology () query = Query () builder = WorkflowBuilder () # ... add Workflow tasks to the query # Add Workflow and KG coordinates to the query wf = query . add ( Workflow ( id = \"\" , builder = builder , coordinates = kg , inputs = {})) # Execute the query result = api . queries . run ( query ) More example queries are available in the examples gallery .","title":"Knowledge graphs"},{"location":"guide/kgs/#knowledge-graphs","text":"","title":"Knowledge graphs"},{"location":"guide/kgs/#operations-on-kgs","text":"When interacting with a KG, you can obtain the proj_key and kg_key identifiers from the API section of the UI.","title":"Operations on KGs"},{"location":"guide/kgs/#list-the-kgs-in-a-project","text":"proj_key = \"abc123\" # get your proj_key from the UI details kgs = api . knowledge_graphs . list ( proj_key ) print ( kgs )","title":"List the KGs in a project"},{"location":"guide/kgs/#query-a-kg","text":"from deepsearch.cps.client.queries import Query from deepsearch.cps.client.queries.task import Value from deepsearch.cps.client.queries.query_tasks import ForEach , Workflow from deepsearch.cps.client.builders.wf_builder import WorkflowBuilder , WorkflowTaskOperation proj_key = \"abc123\" # get your proj_key from the UI details kg_key = \"xyz987\" # get kg_key (also called bag_key) from the UI details kg = api . knowledge_graphs . get ( proj_key , kg_key ) if kg is None : raise Exception ( \"No such kg\" ) # Get the KG topology topo = kg . get_topology () query = Query () builder = WorkflowBuilder () # ... add Workflow tasks to the query # Add Workflow and KG coordinates to the query wf = query . add ( Workflow ( id = \"\" , builder = builder , coordinates = kg , inputs = {})) # Execute the query result = api . queries . run ( query ) More example queries are available in the examples gallery .","title":"Query a KG"},{"location":"guide/projects/","text":"Tip The features described on this page are not available in the public service. Contact us to know more. Projects \u00b6 Deep Search projects allow users to collaborate. All resources such as data, models and knowledge graphs belog to a project. Collaborators may be added to a project as owners , editors or viewers . Below is a description of the roles. Role Description viewer Inspect documents, view all project resources, query project knowledge graphs. editor All permissions of viewer + creating and editing new project resources. owner All permissions of editor + possibility to manage collaborators and delete the project. Listing projects \u00b6 Info Please configure your login before trying these examples. CLI Python Using the deepsearch cps component: $ deepsearch cps projects list key name ---------------------------------------- --------------------- c5e1f35a57e1a538c111c59752f06df07aab6c91 dev 20ae7fb2567d4b777712a6bb50f133c118497d0d MyProjects 1146f5cf2c5ebb4774df38888d5fa608673fca33 IT Services 744978acd58c0cd16893ec4e0ccdd69fd8dd5566 ... After you have generated the api object (from login configuration ), listing projects is very easy. projects = api . projects . list () # returns list of projects for proj in projects : print ( proj . key , proj . name ) # If your project uses Pandas, you can easily convert the list of projects to a Dataframe import pandas as pd df = pd . DataFrame ( projects ) print ( df )","title":"Projects"},{"location":"guide/projects/#projects","text":"Deep Search projects allow users to collaborate. All resources such as data, models and knowledge graphs belog to a project. Collaborators may be added to a project as owners , editors or viewers . Below is a description of the roles. Role Description viewer Inspect documents, view all project resources, query project knowledge graphs. editor All permissions of viewer + creating and editing new project resources. owner All permissions of editor + possibility to manage collaborators and delete the project.","title":"Projects"},{"location":"guide/projects/#listing-projects","text":"Info Please configure your login before trying these examples. CLI Python Using the deepsearch cps component: $ deepsearch cps projects list key name ---------------------------------------- --------------------- c5e1f35a57e1a538c111c59752f06df07aab6c91 dev 20ae7fb2567d4b777712a6bb50f133c118497d0d MyProjects 1146f5cf2c5ebb4774df38888d5fa608673fca33 IT Services 744978acd58c0cd16893ec4e0ccdd69fd8dd5566 ... After you have generated the api object (from login configuration ), listing projects is very easy. projects = api . projects . list () # returns list of projects for proj in projects : print ( proj . key , proj . name ) # If your project uses Pandas, you can easily convert the list of projects to a Dataframe import pandas as pd df = pd . DataFrame ( projects ) print ( df )","title":"Listing projects"}]}